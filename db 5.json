{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next-reloaded/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/canvas-nest/LICENSE","path":"lib/canvas-nest/LICENSE","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/canvas-nest/README.md","path":"lib/canvas-nest/README.md","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/canvas-nest/canvas-nest-nomobile.min.js","path":"lib/canvas-nest/canvas-nest-nomobile.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/_data/styles.styl","hash":"da89d62ab19934f52fb0dd19b4ae1cae3c83e20a","modified":1625573929861},{"_id":"source/tags/index.md","hash":"2dc8dad536c299dd2fb19d0dd8f73de1722eb26e","modified":1575331931000},{"_id":"source/about/index.md","hash":"5ccd0e6beece9e0a5c063a3a1cd90469f3a48d34","modified":1575331931000},{"_id":"source/_posts/Arduino.md","hash":"ced4652c8541ad6a5c7f2e051442be8816847a25","modified":1575331931000},{"_id":"source/.DS_Store","hash":"d1f9ad77887311e1662d25fa913eaa1aa2077538","modified":1625567236569},{"_id":"source/_posts/Assembly.md","hash":"3d6723a5756fe516b4963b95a37f557a3f238c23","modified":1575331931000},{"_id":"source/categories/index.md","hash":"b6c997897d4d560a88e26efee1b7510f0ce51823","modified":1575331931000},{"_id":"source/_posts/CMTE-s-note.md","hash":"3ba81655799b8a5ed727826c378a01fdabadc1b5","modified":1625447207129},{"_id":"source/_posts/CS.md","hash":"f67218d78163afeefd86a6e7c0e8d697a4b9f73b","modified":1575331931000},{"_id":"source/_posts/VAD.md","hash":"1fabce03ea8b3b3c9fb8145c0bed079637147849","modified":1625563779245},{"_id":"source/_posts/FC.md","hash":"56fa66a144bdf9c63aa413b41ed523dc1ee38c33","modified":1625124334397},{"_id":"source/_posts/WuhanNote.md","hash":"6c67253ef1f00dca6f680395df7347ccf6048221","modified":1625470094172},{"_id":"source/_posts/updateEveryday.md","hash":"5824ec0b6986e1ccca9aa88005bcf2646267bd3c","modified":1625573545842},{"_id":"source/_posts/PPA.md","hash":"951646854367a769e00d55c1bc1fcd0561ebfb86","modified":1575332054000},{"_id":"source/_posts/每日总结.md","hash":"973efda639dcc3118690acfe093f26228e97e1a8","modified":1575331931000},{"_id":"source/_posts/MatLab.md","hash":"9b347ba5903c41ecf239519a919cbe3f6c646517","modified":1575331931000},{"_id":"themes/next-reloaded/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1625128828980},{"_id":"themes/next-reloaded/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1625128828979},{"_id":"themes/next-reloaded/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1625128828979},{"_id":"themes/next-reloaded/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1625131388107},{"_id":"themes/next-reloaded/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1625128828985},{"_id":"themes/next-reloaded/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1625128828985},{"_id":"themes/next-reloaded/_config.yml","hash":"66d82135d191f4a01a2f6f95b5c5dba716666fd1","modified":1625572535004},{"_id":"themes/next-reloaded/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1625128828985},{"_id":"themes/next-reloaded/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1625128829014},{"_id":"themes/next-reloaded/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1625128828986},{"_id":"themes/next-reloaded/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1625128828988},{"_id":"themes/next-reloaded/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1625128828986},{"_id":"themes/next-reloaded/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1625128828988},{"_id":"themes/next-reloaded/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1625128828993},{"_id":"themes/next-reloaded/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1625128828989},{"_id":"themes/next-reloaded/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1625128828989},{"_id":"themes/next-reloaded/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1625128828989},{"_id":"themes/next-reloaded/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1625128828989},{"_id":"themes/next-reloaded/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1625128828990},{"_id":"themes/next-reloaded/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1625128828990},{"_id":"themes/next-reloaded/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1625128828990},{"_id":"themes/next-reloaded/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1625128828989},{"_id":"themes/next-reloaded/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1625128828982},{"_id":"themes/next-reloaded/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1625128828980},{"_id":"themes/next-reloaded/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1625128828982},{"_id":"themes/next-reloaded/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1625128828980},{"_id":"themes/next-reloaded/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1625128828982},{"_id":"themes/next-reloaded/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1625128828983},{"_id":"themes/next-reloaded/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1625128828983},{"_id":"themes/next-reloaded/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1625128828984},{"_id":"themes/next-reloaded/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1625128828984},{"_id":"themes/next-reloaded/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1625128828983},{"_id":"themes/next-reloaded/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1625128828985},{"_id":"themes/next-reloaded/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1625128829013},{"_id":"themes/next-reloaded/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1625128829014},{"_id":"themes/next-reloaded/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1625128828999},{"_id":"themes/next-reloaded/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1625128829014},{"_id":"themes/next-reloaded/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1625128829019},{"_id":"themes/next-reloaded/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1625128829014},{"_id":"themes/next-reloaded/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1625128829014},{"_id":"themes/next-reloaded/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1625128829014},{"_id":"themes/next-reloaded/source/.DS_Store","hash":"08667eab623c5c79f3ce620fdf6cb76237e910c9","modified":1625567231497},{"_id":"themes/next-reloaded/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1625128828994},{"_id":"themes/next-reloaded/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1625128828994},{"_id":"themes/next-reloaded/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1625128828994},{"_id":"themes/next-reloaded/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1625128828994},{"_id":"themes/next-reloaded/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1625128828994},{"_id":"themes/next-reloaded/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1625128828994},{"_id":"themes/next-reloaded/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1625128828995},{"_id":"themes/next-reloaded/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1625128828995},{"_id":"themes/next-reloaded/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1625128828995},{"_id":"themes/next-reloaded/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1625128828995},{"_id":"themes/next-reloaded/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1625128828996},{"_id":"themes/next-reloaded/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1625128828996},{"_id":"themes/next-reloaded/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1625128828995},{"_id":"themes/next-reloaded/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1625128828996},{"_id":"themes/next-reloaded/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1625128828997},{"_id":"themes/next-reloaded/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1625128828997},{"_id":"themes/next-reloaded/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1625128828996},{"_id":"themes/next-reloaded/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1625128828998},{"_id":"themes/next-reloaded/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1625128828998},{"_id":"themes/next-reloaded/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1625128828998},{"_id":"themes/next-reloaded/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1625128828999},{"_id":"themes/next-reloaded/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1625128828998},{"_id":"themes/next-reloaded/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1625128828991},{"_id":"themes/next-reloaded/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1625128828991},{"_id":"themes/next-reloaded/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1625128828991},{"_id":"themes/next-reloaded/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1625128828990},{"_id":"themes/next-reloaded/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1625128828992},{"_id":"themes/next-reloaded/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1625128828992},{"_id":"themes/next-reloaded/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1625128828992},{"_id":"themes/next-reloaded/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1625128828992},{"_id":"themes/next-reloaded/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1625128828991},{"_id":"themes/next-reloaded/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1625128828993},{"_id":"themes/next-reloaded/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1625128828993},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1625128828981},{"_id":"themes/next-reloaded/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1625128828993},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1625128828981},{"_id":"themes/next-reloaded/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1625128828993},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1625128828981},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1625128828982},{"_id":"themes/next-reloaded/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1625128828999},{"_id":"themes/next-reloaded/layout/_partials/footer.swig","hash":"505d9d2beb59da6860b35110996af673d82b7c1d","modified":1625571760499},{"_id":"themes/next-reloaded/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1625128829000},{"_id":"themes/next-reloaded/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1625128829001},{"_id":"themes/next-reloaded/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1625128829003},{"_id":"themes/next-reloaded/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1625128829006},{"_id":"themes/next-reloaded/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1625128829004},{"_id":"themes/next-reloaded/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1625128829006},{"_id":"themes/next-reloaded/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1625128829007},{"_id":"themes/next-reloaded/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1625128829006},{"_id":"themes/next-reloaded/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1625128829007},{"_id":"themes/next-reloaded/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1625128829008},{"_id":"themes/next-reloaded/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1625128829008},{"_id":"themes/next-reloaded/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1625128829015},{"_id":"themes/next-reloaded/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1625128829017},{"_id":"themes/next-reloaded/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1625128829000},{"_id":"themes/next-reloaded/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1625128829017},{"_id":"themes/next-reloaded/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1625128829017},{"_id":"themes/next-reloaded/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1625128829018},{"_id":"themes/next-reloaded/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1625128829018},{"_id":"themes/next-reloaded/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1625128829010},{"_id":"themes/next-reloaded/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1625128829019},{"_id":"themes/next-reloaded/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1625128829018},{"_id":"themes/next-reloaded/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1625128829019},{"_id":"themes/next-reloaded/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1625128829019},{"_id":"themes/next-reloaded/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1625128829019},{"_id":"themes/next-reloaded/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1625128829020},{"_id":"themes/next-reloaded/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1625128829020},{"_id":"themes/next-reloaded/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1625128829021},{"_id":"themes/next-reloaded/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1625128829020},{"_id":"themes/next-reloaded/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1625128829021},{"_id":"themes/next-reloaded/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1625128829021},{"_id":"themes/next-reloaded/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1625128829021},{"_id":"themes/next-reloaded/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1625128829021},{"_id":"themes/next-reloaded/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1625128829018},{"_id":"themes/next-reloaded/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1625128829011},{"_id":"themes/next-reloaded/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1625128829038},{"_id":"themes/next-reloaded/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1625128829050},{"_id":"themes/next-reloaded/source/css/_colors.styl","hash":"f39f2af56ec376959ba6a48717a0fae905475565","modified":1625570227434},{"_id":"themes/next-reloaded/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1625128829044},{"_id":"themes/next-reloaded/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1625128829047},{"_id":"themes/next-reloaded/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1625128829048},{"_id":"themes/next-reloaded/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1625128829048},{"_id":"themes/next-reloaded/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1625128829048},{"_id":"themes/next-reloaded/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1625128829048},{"_id":"themes/next-reloaded/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1625128829044},{"_id":"themes/next-reloaded/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1625128829045},{"_id":"themes/next-reloaded/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1625128829049},{"_id":"themes/next-reloaded/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1625128829045},{"_id":"themes/next-reloaded/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1625128829046},{"_id":"themes/next-reloaded/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1625128829045},{"_id":"themes/next-reloaded/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1625128829045},{"_id":"themes/next-reloaded/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1625128829046},{"_id":"themes/next-reloaded/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1625128829046},{"_id":"themes/next-reloaded/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1625128829046},{"_id":"themes/next-reloaded/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1625128829046},{"_id":"themes/next-reloaded/layout/_partials/head/head.swig","hash":"cc08c59a84f876981f0818268016a553c5eb0c69","modified":1625572817550},{"_id":"themes/next-reloaded/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1625128829047},{"_id":"themes/next-reloaded/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1625128829002},{"_id":"themes/next-reloaded/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1625128829047},{"_id":"themes/next-reloaded/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1625128829047},{"_id":"themes/next-reloaded/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1625128829004},{"_id":"themes/next-reloaded/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1625128829002},{"_id":"themes/next-reloaded/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1625128829003},{"_id":"themes/next-reloaded/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1625128829004},{"_id":"themes/next-reloaded/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1625128829003},{"_id":"themes/next-reloaded/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1625128829005},{"_id":"themes/next-reloaded/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1625128829003},{"_id":"themes/next-reloaded/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1625128829003},{"_id":"themes/next-reloaded/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1625128829005},{"_id":"themes/next-reloaded/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1625128829004},{"_id":"themes/next-reloaded/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1625128829004},{"_id":"themes/next-reloaded/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1625128829005},{"_id":"themes/next-reloaded/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1625128829004},{"_id":"themes/next-reloaded/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1625128829005},{"_id":"themes/next-reloaded/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1625128829006},{"_id":"themes/next-reloaded/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1625128829005},{"_id":"themes/next-reloaded/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1625128829007},{"_id":"themes/next-reloaded/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1625128829006},{"_id":"themes/next-reloaded/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1625128829007},{"_id":"themes/next-reloaded/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1625128829007},{"_id":"themes/next-reloaded/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1625128829009},{"_id":"themes/next-reloaded/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1625128829009},{"_id":"themes/next-reloaded/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1625128829007},{"_id":"themes/next-reloaded/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1625128829009},{"_id":"themes/next-reloaded/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1625128829010},{"_id":"themes/next-reloaded/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1625128829009},{"_id":"themes/next-reloaded/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1625128829010},{"_id":"themes/next-reloaded/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1625128829009},{"_id":"themes/next-reloaded/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1625128829010},{"_id":"themes/next-reloaded/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1625128829010},{"_id":"themes/next-reloaded/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1625128829011},{"_id":"themes/next-reloaded/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1625128829011},{"_id":"themes/next-reloaded/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1625128829008},{"_id":"themes/next-reloaded/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1625128829008},{"_id":"themes/next-reloaded/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1625128829008},{"_id":"themes/next-reloaded/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1625128829011},{"_id":"themes/next-reloaded/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1625128829012},{"_id":"themes/next-reloaded/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1625128829008},{"_id":"themes/next-reloaded/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1625128829012},{"_id":"themes/next-reloaded/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1625128829012},{"_id":"themes/next-reloaded/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1625128829012},{"_id":"themes/next-reloaded/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1625128829016},{"_id":"themes/next-reloaded/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1625128829016},{"_id":"themes/next-reloaded/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1625128829012},{"_id":"themes/next-reloaded/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1625128829016},{"_id":"themes/next-reloaded/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1625128829016},{"_id":"themes/next-reloaded/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1625128829017},{"_id":"themes/next-reloaded/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1625128829017},{"_id":"themes/next-reloaded/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1625128829017},{"_id":"themes/next-reloaded/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1625128829016},{"_id":"themes/next-reloaded/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1625128829013},{"_id":"themes/next-reloaded/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1625128829015},{"_id":"themes/next-reloaded/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1625128829013},{"_id":"themes/next-reloaded/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1625128829015},{"_id":"themes/next-reloaded/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1625128829015},{"_id":"themes/next-reloaded/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1625128829013},{"_id":"themes/next-reloaded/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1625128829013},{"_id":"themes/next-reloaded/source/css/_variables/Pisces.styl","hash":"32c32f352d089dff05cf70d1971488dc5aa3ff96","modified":1625570391623},{"_id":"themes/next-reloaded/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1625128829043},{"_id":"themes/next-reloaded/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1625128829044},{"_id":"themes/next-reloaded/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1625128829043},{"_id":"themes/next-reloaded/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1625128829043},{"_id":"themes/next-reloaded/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1625568327483},{"_id":"themes/next-reloaded/source/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"956eada198babd00f028e8908767cb158926c3f3","modified":1625568327482},{"_id":"themes/next-reloaded/source/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1625568327482},{"_id":"themes/next-reloaded/source/lib/canvas-nest/README.md","hash":"0ba5a24a483f36166f0cb871bd30f4c7467f3593","modified":1625568327482},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1625128829053},{"_id":"themes/next-reloaded/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1625128829049},{"_id":"themes/next-reloaded/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1625128829049},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1625128829053},{"_id":"themes/next-reloaded/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1625128829022},{"_id":"themes/next-reloaded/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1625128829023},{"_id":"themes/next-reloaded/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1625128829027},{"_id":"themes/next-reloaded/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1625128829023},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1625128829039},{"_id":"themes/next-reloaded/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1625128829030},{"_id":"themes/next-reloaded/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1625128829030},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1625128829039},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1625128829039},{"_id":"themes/next-reloaded/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1625128829011},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1625128829039},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1625128829040},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1625128829033},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1625128829035},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1625128829033},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1625128829033},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1625128829035},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1625128829035},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1625128829035},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1625128829037},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1625128829040},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1625128829040},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1625128829040},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_layout.styl","hash":"d4b3c914aa4267541f3c2aa557872122908b0ddd","modified":1625573039849},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1625128829041},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_menu.styl","hash":"107f0da2ad831e3df0358b193af2170f1270df09","modified":1625573178856},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_sidebar.styl","hash":"6b1a9c200863b9771a0b9efe3e852ee0ea5868cd","modified":1625573398002},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1625128829041},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1625128829041},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1625128829041},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1625128829042},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1625128829042},{"_id":"themes/next-reloaded/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1625128829038},{"_id":"themes/next-reloaded/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1625128829051},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1625568327475},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/config","hash":"6aef6bbfcb8ccf9d042bf26defe7d08167b6d81e","modified":1625568327478},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1625128829051},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1625568325839},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/index","hash":"559efb610323bf009ada5308f8ee88a954b254f4","modified":1625568327483},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/packed-refs","hash":"80eecf0c5c7f21b2678dc1c329f74de19b6a3a67","modified":1625568327473},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1625568327481},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1625128829027},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1625128829027},{"_id":"themes/next-reloaded/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1625128829028},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1625128829027},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1625128829027},{"_id":"themes/next-reloaded/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1625128829029},{"_id":"themes/next-reloaded/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1625128829029},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1625128829028},{"_id":"themes/next-reloaded/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1625128829029},{"_id":"themes/next-reloaded/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1625128829029},{"_id":"themes/next-reloaded/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1625128829029},{"_id":"themes/next-reloaded/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1625128829028},{"_id":"themes/next-reloaded/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1625128829023},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1625128829025},{"_id":"themes/next-reloaded/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1625128829024},{"_id":"themes/next-reloaded/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1625128829024},{"_id":"themes/next-reloaded/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1625128829024},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1625128829025},{"_id":"themes/next-reloaded/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1625128829023},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1625128829024},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1625128829025},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1625128829025},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1625128829025},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1625128829025},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1625128829026},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1625128829026},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1625128829026},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1625128829026},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1625128829026},{"_id":"themes/next-reloaded/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1625128829026},{"_id":"themes/next-reloaded/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1625128829028},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1625128829030},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1625128829031},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1625128829031},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1625128829031},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1625128829030},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1625128829032},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1625128829032},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1625128829032},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1625128829031},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1625128829034},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1625128829033},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar.styl","hash":"526ddd6da5ddb3c94ce66a5974bfcbb9ca182326","modified":1625570661509},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1625128829036},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1625128829034},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1625128829034},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1625128829036},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1625128829036},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1625128829037},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1625128829037},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1625128829037},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1625128829037},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1625568325842},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1625568325844},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1625568325840},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1625568325845},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1625568325841},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1625568325844},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1625568325842},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1625568325845},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1625568325841},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1625568325844},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1625568325846},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1625568325843},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1625568325846},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1625568325839},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/refs/heads/master","hash":"473e30291eac5f6d120dfe823b29ad4b2218f05a","modified":1625568327476},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/logs/HEAD","hash":"255a85bbb1c2d46dcc66736a652eab29de23ebaf","modified":1625568327476},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/objects/pack/pack-8614499ac34603e5f62a25e1ed7138332befa370.pack","hash":"455c5c532eee08dd88c8295639309b05fccbb64c","modified":1625568327459},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1625568327475},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/logs/refs/remotes/origin/HEAD","hash":"255a85bbb1c2d46dcc66736a652eab29de23ebaf","modified":1625568327475},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/logs/refs/heads/master","hash":"255a85bbb1c2d46dcc66736a652eab29de23ebaf","modified":1625568327477},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/objects/pack/pack-8614499ac34603e5f62a25e1ed7138332befa370.idx","hash":"7b050e7c7c4ed82ff61ea69f13085b11bac423cf","modified":1625568327459},{"_id":"themes/next-reloaded/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1625128829051},{"_id":"themes/next-reloaded/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1625128829052},{"_id":"public/atom.xml","hash":"8f491d05bcec199c8bf4825df313f5d69cf1beda","modified":1625573954171},{"_id":"public/search.xml","hash":"66048c03abfeca5f0f3f20ae2306e0d912ec96ba","modified":1625573954171},{"_id":"public/about/index.html","hash":"fe39ab5f18acab3eb5e9b47b0e3ef5cf978b851b","modified":1625573954171},{"_id":"public/tags/index.html","hash":"db2d0db3dd6b0d914597b2bfe9abc67bf2ea82b8","modified":1625573954171},{"_id":"public/categories/2021/index.html","hash":"5eae80a99c91f60082e3cea4005cd17b926a0d62","modified":1625573954171},{"_id":"public/categories/UbuntuRecovery/index.html","hash":"cfca57de1bead24e933b485895d10ca689f7ecb4","modified":1625573954171},{"_id":"public/categories/2019/life/index.html","hash":"16b0680adb2519d5c330386b03ce42682640f3d2","modified":1625573954171},{"_id":"public/categories/2019/KCL/CS/index.html","hash":"9b3090350d4e04b303ecd6f9939953d28d6737d4","modified":1625573954171},{"_id":"public/categories/2019/KCL/Arduino/index.html","hash":"8dc8c79fb7bb88a021b6cd351acc206bc7d46eb5","modified":1625573954171},{"_id":"public/categories/2019/KCL/MatLab/index.html","hash":"7f9becc16591f7b7ae7232f9209ff393bf87ca1a","modified":1625573954171},{"_id":"public/categories/2019/KCL/FC/index.html","hash":"3c79a14465661757255adc6911ec1fde1ac7c3d5","modified":1625573954171},{"_id":"public/categories/2019/KCL/CMTE/index.html","hash":"b0208ecec9a37b28bff54ff2b016914fe55a8d45","modified":1625573954171},{"_id":"public/categories/2021/Summer/index.html","hash":"300e4c319ef973f095d158d3bca84e41a1af9aa8","modified":1625573954171},{"_id":"public/categories/2019/KCL/PPA/index.html","hash":"c321ffdf3f713885d9c53c13423a9beab67d855e","modified":1625573954171},{"_id":"public/categories/2019/life/everynight/index.html","hash":"bc2a48472122dc9f80239075747996ba9fd0f5b8","modified":1625573954171},{"_id":"public/categories/2021/Summer/VAD/index.html","hash":"3e30bf01307859d2f1bb2df4417711f573664228","modified":1625573954171},{"_id":"public/categories/2021/Summer/计算机体系结构/index.html","hash":"4f26eafafaac14a24f5faa4671dccadc9c76a23e","modified":1625573954171},{"_id":"public/archives/page/2/index.html","hash":"0537d730f600f1f17ba775a24749e17d6dd1eefb","modified":1625573954171},{"_id":"public/archives/2019/10/index.html","hash":"eb186a259b465501a77711690244bda29038f777","modified":1625573954171},{"_id":"public/archives/2019/11/index.html","hash":"b09a49562781e06c85675af6efd5b0b5daced3e9","modified":1625573954171},{"_id":"public/archives/2021/index.html","hash":"d53b9a4e2ba19bb435e4462a51c6b48f8dd068c6","modified":1625573954171},{"_id":"public/archives/2021/07/index.html","hash":"829f8fe11a2441564d9fc3446c2ab0f05aff77cb","modified":1625573954171},{"_id":"public/tags/单片机/index.html","hash":"03fb53ea6194c92c35bef9ef3aa9e18bc600a1cc","modified":1625573954171},{"_id":"public/tags/空间向量/index.html","hash":"736e01fb319b22ff8a85b91d763754cdba9fd35f","modified":1625573954171},{"_id":"public/tags/CS/index.html","hash":"61c81c41cb01dc831a0ef777782e98d5993d413d","modified":1625573954171},{"_id":"public/tags/MatLab/index.html","hash":"fc0aaa937ef2502271e2e32ce2e88e3eb922ffbd","modified":1625573954171},{"_id":"public/tags/语音识别/index.html","hash":"dcfcdc3ecb6f731b0f75f0bd1a238be558e03579","modified":1625573954171},{"_id":"public/tags/ubuntu系统问题/index.html","hash":"9b3e3b46dd2f17325793f5e034865e116a4f3d90","modified":1625573954171},{"_id":"public/tags/计算机体系结构/index.html","hash":"13e74ea28fef1cbbd9a3b9cf98c8b3f7068029af","modified":1625573954171},{"_id":"public/categories/index.html","hash":"e31a2327e4de2b8382bcd8121f785d53e2debc0b","modified":1625573954171},{"_id":"public/2021/07/05/updateeveryday/index.html","hash":"db6fb084372adbdf0dcca9f9f51b2ecd4972eab6","modified":1625573954171},{"_id":"public/2021/07/05/wuhannote/index.html","hash":"4293ade955f570c44d852f8f10006534f95d2f9f","modified":1625573954171},{"_id":"public/2021/07/05/vad/index.html","hash":"dbf1eefc6a7111e75bd73b63bc459369dce7ba85","modified":1625573954171},{"_id":"public/2019/11/25/mei-ri-zong-jie/index.html","hash":"8da02537da9c4a1ca8eb7373476d643f8d825cad","modified":1625573954171},{"_id":"public/2019/11/13/fc/index.html","hash":"d51a37c2e459739490dc60c41aaf4a26780d7b6f","modified":1625573954171},{"_id":"public/2019/11/03/ppa/index.html","hash":"6b9a1dce0200aa3a0fc0bf4dd40424e006a07fcc","modified":1625573954171},{"_id":"public/2019/11/01/arduino/index.html","hash":"7b72c997d8bbb761eaa5a6d9f5ef96d4c5fd9143","modified":1625573954171},{"_id":"public/2019/10/31/assembly/index.html","hash":"304457b8886833a7773085965cc956bd9f185919","modified":1625573954171},{"_id":"public/2019/10/31/cs/index.html","hash":"49227143058172284d769636c1d9d0631e317b2d","modified":1625573954171},{"_id":"public/2019/10/30/matlab/index.html","hash":"e8539566fcd5fb760575e2ed6df42e412f8b85ca","modified":1625573954171},{"_id":"public/2019/10/30/cmte-s-note/index.html","hash":"c1f660550d1da3b89af496f76fb3210132b2ddd5","modified":1625573954171},{"_id":"public/categories/2019/index.html","hash":"f5ce3b157cdfdd08a2c3dff9c5086b2d237c68af","modified":1625573954171},{"_id":"public/categories/2019/KCL/index.html","hash":"fcbd802651916e0ff4e37aa9e820fc60fff36789","modified":1625573954171},{"_id":"public/index.html","hash":"a10596a564750eedd02c88e6382c2b45b50f98c8","modified":1625573954171},{"_id":"public/archives/index.html","hash":"cc287a351e6a2f2390a556a09646ac63b46ddb88","modified":1625573954171},{"_id":"public/archives/2019/index.html","hash":"36a6a13eeee7ef2108bd248915c47f8070ce9064","modified":1625573954171},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1625573954171},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1625573954171},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1625573954171},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1625573954171},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1625573954171},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1625573954171},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1625573954171},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1625573954171},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1625573954171},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1625573954171},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1625573954171},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1625573954171},{"_id":"public/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1625573954171},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1625573954171},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1625573954171},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1625573954171},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1625573954171},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1625573954171},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1625573954171},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1625573954171},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1625573954171},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1625573954171},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1625573954171},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1625573954171},{"_id":"public/lib/canvas-nest/README.html","hash":"6a2eaecc6783b4a497f96d980d583b17af21caa2","modified":1625573954171},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1625573954171},{"_id":"public/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"956eada198babd00f028e8908767cb158926c3f3","modified":1625573954171},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1625573954171},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1625573954171},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1625573954171},{"_id":"public/css/main.css","hash":"f9db8dc0d240eb8a7a5740ad1e16d4f61e8969d3","modified":1625573954171},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1625573954171},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1625573954171},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1625573954171}],"Category":[{"name":"2019","_id":"ckqs0rf7d00040mwlfpyl7m3j"},{"name":"KCL","parent":"ckqs0rf7d00040mwlfpyl7m3j","_id":"ckqs0rf7q000k0mwlg83s4ebh"},{"name":"2021","_id":"ckqs0rf7v000z0mwle5r38f07"},{"name":"UbuntuRecovery","_id":"ckqs0rf7w00120mwl02orbwto"},{"name":"life","parent":"ckqs0rf7d00040mwlfpyl7m3j","_id":"ckqs0rf7w00130mwlazvu3onk"},{"name":"CS","parent":"ckqs0rf7q000k0mwlg83s4ebh","_id":"ckqs0rf7x00150mwl1w8w7gad"},{"name":"Arduino","parent":"ckqs0rf7q000k0mwlg83s4ebh","_id":"ckqs0rf7x00160mwl2ba54jjo"},{"name":"MatLab","parent":"ckqs0rf7q000k0mwlg83s4ebh","_id":"ckqs0rf7y00180mwlc3ja5ik8"},{"name":"FC","parent":"ckqs0rf7q000k0mwlg83s4ebh","_id":"ckqs0rf80001b0mwl8ls0496t"},{"name":"CMTE","parent":"ckqs0rf7q000k0mwlg83s4ebh","_id":"ckqs0rf80001e0mwlexhwfzox"},{"name":"Summer","parent":"ckqs0rf7v000z0mwle5r38f07","_id":"ckqs0rf81001h0mwl136x8vik"},{"name":"PPA","parent":"ckqs0rf7q000k0mwlg83s4ebh","_id":"ckqs0rf82001l0mwlevndfw4k"},{"name":"everynight","parent":"ckqs0rf7w00130mwlazvu3onk","_id":"ckqs0rf83001r0mwl1dqgh8ab"},{"name":"VAD","parent":"ckqs0rf81001h0mwl136x8vik","_id":"ckqs0rf83001u0mwl6bnibqy7"},{"name":"计算机体系结构","parent":"ckqs0rf81001h0mwl136x8vik","_id":"ckqs0rf8800280mwl4zc94ir8"}],"Data":[{"_id":"styles","data":"body {\n  position: relative;\n  font-family: 'Lato', \"PingFang SC\", \"Microsoft YaHei\", sans-serif;\n  font-size: 14px;\n  line-height: 2;\n  color: #555;\n  background: #a5b8cc;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n/*更好的侧边滚动条*/\n::-webkit-scrollbar {\n  width: 10px;\n  height: 10px;\n}\n::-webkit-scrollbar-button {\n  width: 0;\n  height: 0;\n}\n::-webkit-scrollbar-button:start:increment,\n::-webkit-scrollbar-button:end:decrement {\n  display: none;\n}\n::-webkit-scrollbar-corner {\n  display: block;\n}\n::-webkit-scrollbar-thumb {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.2);\n}\n::-webkit-scrollbar-thumb:hover {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.5);\n}\n::-webkit-scrollbar-track,\n::-webkit-scrollbar-thumb {\n  border-right: 1px solid transparent;\n  border-left: 1px solid transparent;\n}\n::-webkit-scrollbar-track:hover {\n  background-color: rgba(0,0,0,0.15);\n}\n::-webkit-scrollbar-button:start {\n  width: 10px;\n  height: 10px;\n/*background: url(../images/scrollbar_arrow.png) no-repeat 0 0;*/\n/*可以添加滚动条样式*/\n}\n.post-sticky-flag {\n  font-size: inherit;\n  float: left;\n  color: #000;\n  cursor: help;\n  transition-duration: 0.2s;\n  transition-timing-function: ease-in-out;\n  transition-delay: 0s;\n}\n.post-sticky-flag:hover {\n  color: #07b39b;\n}\n.brand {\n  color: #ff6a6a;\n}\n.site-subtitle {\n  margin-top: 10px;\n  font-size: 13px;\n  color: #fff;\n}\n.busuanzi-value {\n  color: #1890ff;\n}\n* {\n  color: #35405b;\n}\n.site-meta {\n  margin: 0;\n  text-align: $site-meta-text-align;\nmobile()\n}\n.brand {\n  position: relative;\n  display: inline-block;\n  padding: 0 40px;\n  color: #ff6a6a;\n  background: $brand-bg;\n  border-bottom: none;\n}\n.brand:hover {\n  color: $brand-hover-color;\n}\n"}],"Page":[{"title":"about","date":"2019-10-27T20:36:06.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-10-28 04:36:06\ntype: \"about\"\nlayout: \"about\"\n\n---\n","updated":"2019-10-27T20:36:06.000Z","path":"about/index.html","comments":1,"_id":"ckqs0rf7500000mwl3a2yecqg","content":"","site":{"data":{"styles":"body {\n  position: relative;\n  font-family: 'Lato', \"PingFang SC\", \"Microsoft YaHei\", sans-serif;\n  font-size: 14px;\n  line-height: 2;\n  color: #555;\n  background: #a5b8cc;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n/*更好的侧边滚动条*/\n::-webkit-scrollbar {\n  width: 10px;\n  height: 10px;\n}\n::-webkit-scrollbar-button {\n  width: 0;\n  height: 0;\n}\n::-webkit-scrollbar-button:start:increment,\n::-webkit-scrollbar-button:end:decrement {\n  display: none;\n}\n::-webkit-scrollbar-corner {\n  display: block;\n}\n::-webkit-scrollbar-thumb {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.2);\n}\n::-webkit-scrollbar-thumb:hover {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.5);\n}\n::-webkit-scrollbar-track,\n::-webkit-scrollbar-thumb {\n  border-right: 1px solid transparent;\n  border-left: 1px solid transparent;\n}\n::-webkit-scrollbar-track:hover {\n  background-color: rgba(0,0,0,0.15);\n}\n::-webkit-scrollbar-button:start {\n  width: 10px;\n  height: 10px;\n/*background: url(../images/scrollbar_arrow.png) no-repeat 0 0;*/\n/*可以添加滚动条样式*/\n}\n.post-sticky-flag {\n  font-size: inherit;\n  float: left;\n  color: #000;\n  cursor: help;\n  transition-duration: 0.2s;\n  transition-timing-function: ease-in-out;\n  transition-delay: 0s;\n}\n.post-sticky-flag:hover {\n  color: #07b39b;\n}\n.brand {\n  color: #ff6a6a;\n}\n.site-subtitle {\n  margin-top: 10px;\n  font-size: 13px;\n  color: #fff;\n}\n.busuanzi-value {\n  color: #1890ff;\n}\n* {\n  color: #35405b;\n}\n.site-meta {\n  margin: 0;\n  text-align: $site-meta-text-align;\nmobile()\n}\n.brand {\n  position: relative;\n  display: inline-block;\n  padding: 0 40px;\n  color: #ff6a6a;\n  background: $brand-bg;\n  border-bottom: none;\n}\n.brand:hover {\n  color: $brand-hover-color;\n}\n"}},"excerpt":"","more":""},{"title":"categories","date":"2019-10-27T20:33:33.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-10-28 04:33:33\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2019-10-27T20:33:33.000Z","path":"categories/index.html","comments":1,"_id":"ckqs0rf7b00020mwl9k7za1yl","content":"","site":{"data":{"styles":"body {\n  position: relative;\n  font-family: 'Lato', \"PingFang SC\", \"Microsoft YaHei\", sans-serif;\n  font-size: 14px;\n  line-height: 2;\n  color: #555;\n  background: #a5b8cc;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n/*更好的侧边滚动条*/\n::-webkit-scrollbar {\n  width: 10px;\n  height: 10px;\n}\n::-webkit-scrollbar-button {\n  width: 0;\n  height: 0;\n}\n::-webkit-scrollbar-button:start:increment,\n::-webkit-scrollbar-button:end:decrement {\n  display: none;\n}\n::-webkit-scrollbar-corner {\n  display: block;\n}\n::-webkit-scrollbar-thumb {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.2);\n}\n::-webkit-scrollbar-thumb:hover {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.5);\n}\n::-webkit-scrollbar-track,\n::-webkit-scrollbar-thumb {\n  border-right: 1px solid transparent;\n  border-left: 1px solid transparent;\n}\n::-webkit-scrollbar-track:hover {\n  background-color: rgba(0,0,0,0.15);\n}\n::-webkit-scrollbar-button:start {\n  width: 10px;\n  height: 10px;\n/*background: url(../images/scrollbar_arrow.png) no-repeat 0 0;*/\n/*可以添加滚动条样式*/\n}\n.post-sticky-flag {\n  font-size: inherit;\n  float: left;\n  color: #000;\n  cursor: help;\n  transition-duration: 0.2s;\n  transition-timing-function: ease-in-out;\n  transition-delay: 0s;\n}\n.post-sticky-flag:hover {\n  color: #07b39b;\n}\n.brand {\n  color: #ff6a6a;\n}\n.site-subtitle {\n  margin-top: 10px;\n  font-size: 13px;\n  color: #fff;\n}\n.busuanzi-value {\n  color: #1890ff;\n}\n* {\n  color: #35405b;\n}\n.site-meta {\n  margin: 0;\n  text-align: $site-meta-text-align;\nmobile()\n}\n.brand {\n  position: relative;\n  display: inline-block;\n  padding: 0 40px;\n  color: #ff6a6a;\n  background: $brand-bg;\n  border-bottom: none;\n}\n.brand:hover {\n  color: $brand-hover-color;\n}\n"}},"excerpt":"","more":""},{"title":"tags","date":"2019-10-29T07:27:11.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-10-29 15:27:11\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2019-10-29T07:27:11.000Z","path":"tags/index.html","comments":1,"_id":"ckqs0rf7f00060mwl7h6t6pxf","content":"","site":{"data":{"styles":"body {\n  position: relative;\n  font-family: 'Lato', \"PingFang SC\", \"Microsoft YaHei\", sans-serif;\n  font-size: 14px;\n  line-height: 2;\n  color: #555;\n  background: #a5b8cc;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n/*更好的侧边滚动条*/\n::-webkit-scrollbar {\n  width: 10px;\n  height: 10px;\n}\n::-webkit-scrollbar-button {\n  width: 0;\n  height: 0;\n}\n::-webkit-scrollbar-button:start:increment,\n::-webkit-scrollbar-button:end:decrement {\n  display: none;\n}\n::-webkit-scrollbar-corner {\n  display: block;\n}\n::-webkit-scrollbar-thumb {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.2);\n}\n::-webkit-scrollbar-thumb:hover {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.5);\n}\n::-webkit-scrollbar-track,\n::-webkit-scrollbar-thumb {\n  border-right: 1px solid transparent;\n  border-left: 1px solid transparent;\n}\n::-webkit-scrollbar-track:hover {\n  background-color: rgba(0,0,0,0.15);\n}\n::-webkit-scrollbar-button:start {\n  width: 10px;\n  height: 10px;\n/*background: url(../images/scrollbar_arrow.png) no-repeat 0 0;*/\n/*可以添加滚动条样式*/\n}\n.post-sticky-flag {\n  font-size: inherit;\n  float: left;\n  color: #000;\n  cursor: help;\n  transition-duration: 0.2s;\n  transition-timing-function: ease-in-out;\n  transition-delay: 0s;\n}\n.post-sticky-flag:hover {\n  color: #07b39b;\n}\n.brand {\n  color: #ff6a6a;\n}\n.site-subtitle {\n  margin-top: 10px;\n  font-size: 13px;\n  color: #fff;\n}\n.busuanzi-value {\n  color: #1890ff;\n}\n* {\n  color: #35405b;\n}\n.site-meta {\n  margin: 0;\n  text-align: $site-meta-text-align;\nmobile()\n}\n.brand {\n  position: relative;\n  display: inline-block;\n  padding: 0 40px;\n  color: #ff6a6a;\n  background: $brand-bg;\n  border-bottom: none;\n}\n.brand:hover {\n  color: $brand-hover-color;\n}\n"}},"excerpt":"","more":""}],"Post":[{"title":"Arduino与Assembly","date":"2019-11-01T08:22:08.000Z","password":"password","top":1000,"_content":"\n\n\n## Lab--汇编语言初识&语法结构\n<!--more-->\n### 第一个程序的理解\n 1. .equ SREG,0x3f     :treat the label SREG as 0x3f\n 2. .org 0     :the start address\n 3. r16\\-\\-r31,PPRB,PORTC等等在microprocessor's CPU也就是Atmega328p里\n\n\n\n## lab2 portb 连led\n### 缩写\n1. #### SREG : status register\n2. #### Rd : Destination register in the register file\n\n### arduino里几个概念\n1. #### ATmega是Arduino里面的正方形芯片,microcontroller\n2. #### PORTB \n        : an 8-bit I/O port with internal pull-up resistors, 位于: 正方形芯片的周边小点(8个:PB7:0)\n        它们 连接着the external digital pins\n| Atemega pin  |  Nano digital pin |\n| -----------  |  --------------   |\n|     PB0(在芯片的四周))      |      D8(在nano的两周,可连接面包板的线)           |\n|     PB1      |      D9           |\n| ....         |     ....          |\n3. #### digital pin:\n        位于nona两周: I/O interface(HIGH/LOW)\n4. CPU怎么链接PORTB: databus\n5. DDRB跟PORTB,PORTC等等地位相等,都在register里,都是一个一个的寄存器,都是8bit.(each port on Atmega328 has a **Data Direction Register**)\n6. DDRB和PORTB的**关系**:\n     each bit of in PORTB has a corresponding input or output mode bit in DDRB.\n## Lab3 portc 很好理解 读value\n\n## 疑问疑惑\n### 程序内的语法: \n1. main,mainloop的意思\n2. rjmp?\n3. brlo **lessthan**? 为什么是lessthan,brlo本身不就是当lower时吗\n4. .org 0,地址0 是跟0x06等等同一地位吗,那我在.equ里面最小的那个地址开始可以吗 \\-\\-11.3\n### led_on.s:\n1. SREG的作用是什么,设置为0要干什么\n### 第三个程序:portc(lab3)\n1. 从PINC中读取数据到PORTC,那pinc的数据从何而来?\n","source":"_posts/Arduino.md","raw":"---\ntitle: Arduino与Assembly\ndate: 2019-11-01 16:22:08\ntags: \n- 单片机\ncategories: \n- 2019\n- KCL\n- Arduino\npassword: password\ntop: 1000\n---\n\n\n\n## Lab--汇编语言初识&语法结构\n<!--more-->\n### 第一个程序的理解\n 1. .equ SREG,0x3f     :treat the label SREG as 0x3f\n 2. .org 0     :the start address\n 3. r16\\-\\-r31,PPRB,PORTC等等在microprocessor's CPU也就是Atmega328p里\n\n\n\n## lab2 portb 连led\n### 缩写\n1. #### SREG : status register\n2. #### Rd : Destination register in the register file\n\n### arduino里几个概念\n1. #### ATmega是Arduino里面的正方形芯片,microcontroller\n2. #### PORTB \n        : an 8-bit I/O port with internal pull-up resistors, 位于: 正方形芯片的周边小点(8个:PB7:0)\n        它们 连接着the external digital pins\n| Atemega pin  |  Nano digital pin |\n| -----------  |  --------------   |\n|     PB0(在芯片的四周))      |      D8(在nano的两周,可连接面包板的线)           |\n|     PB1      |      D9           |\n| ....         |     ....          |\n3. #### digital pin:\n        位于nona两周: I/O interface(HIGH/LOW)\n4. CPU怎么链接PORTB: databus\n5. DDRB跟PORTB,PORTC等等地位相等,都在register里,都是一个一个的寄存器,都是8bit.(each port on Atmega328 has a **Data Direction Register**)\n6. DDRB和PORTB的**关系**:\n     each bit of in PORTB has a corresponding input or output mode bit in DDRB.\n## Lab3 portc 很好理解 读value\n\n## 疑问疑惑\n### 程序内的语法: \n1. main,mainloop的意思\n2. rjmp?\n3. brlo **lessthan**? 为什么是lessthan,brlo本身不就是当lower时吗\n4. .org 0,地址0 是跟0x06等等同一地位吗,那我在.equ里面最小的那个地址开始可以吗 \\-\\-11.3\n### led_on.s:\n1. SREG的作用是什么,设置为0要干什么\n### 第三个程序:portc(lab3)\n1. 从PINC中读取数据到PORTC,那pinc的数据从何而来?\n","slug":"Arduino","published":1,"updated":"2019-11-01T08:22:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqs0rf7800010mwl9lxihhbd","content":"<h2 id=\"Lab–汇编语言初识-amp-语法结构\"><a href=\"#Lab–汇编语言初识-amp-语法结构\" class=\"headerlink\" title=\"Lab–汇编语言初识&amp;语法结构\"></a>Lab–汇编语言初识&amp;语法结构</h2><span id=\"more\"></span>\n<h3 id=\"第一个程序的理解\"><a href=\"#第一个程序的理解\" class=\"headerlink\" title=\"第一个程序的理解\"></a>第一个程序的理解</h3><ol>\n<li>.equ SREG,0x3f     :treat the label SREG as 0x3f</li>\n<li>.org 0     :the start address</li>\n<li>r16--r31,PPRB,PORTC等等在microprocessor’s CPU也就是Atmega328p里</li>\n</ol>\n<h2 id=\"lab2-portb-连led\"><a href=\"#lab2-portb-连led\" class=\"headerlink\" title=\"lab2 portb 连led\"></a>lab2 portb 连led</h2><h3 id=\"缩写\"><a href=\"#缩写\" class=\"headerlink\" title=\"缩写\"></a>缩写</h3><ol>\n<li><h4 id=\"SREG-status-register\"><a href=\"#SREG-status-register\" class=\"headerlink\" title=\"SREG : status register\"></a>SREG : status register</h4></li>\n<li><h4 id=\"Rd-Destination-register-in-the-register-file\"><a href=\"#Rd-Destination-register-in-the-register-file\" class=\"headerlink\" title=\"Rd : Destination register in the register file\"></a>Rd : Destination register in the register file</h4></li>\n</ol>\n<h3 id=\"arduino里几个概念\"><a href=\"#arduino里几个概念\" class=\"headerlink\" title=\"arduino里几个概念\"></a>arduino里几个概念</h3><ol>\n<li><h4 id=\"ATmega是Arduino里面的正方形芯片-microcontroller\"><a href=\"#ATmega是Arduino里面的正方形芯片-microcontroller\" class=\"headerlink\" title=\"ATmega是Arduino里面的正方形芯片,microcontroller\"></a>ATmega是Arduino里面的正方形芯片,microcontroller</h4></li>\n<li><h4 id=\"PORTB\"><a href=\"#PORTB\" class=\"headerlink\" title=\"PORTB\"></a>PORTB</h4><pre><code> : an 8-bit I/O port with internal pull-up resistors, 位于: 正方形芯片的周边小点(8个:PB7:0)\n 它们 连接着the external digital pins\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Atemega pin</th>\n<th>Nano digital pin</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PB0(在芯片的四周))</td>\n<td>D8(在nano的两周,可连接面包板的线)</td>\n</tr>\n<tr>\n<td>PB1</td>\n<td>D9</td>\n</tr>\n<tr>\n<td>….</td>\n<td>….</td>\n</tr>\n</tbody></table>\n</li>\n<li><h4 id=\"digital-pin\"><a href=\"#digital-pin\" class=\"headerlink\" title=\"digital pin:\"></a>digital pin:</h4><pre><code> 位于nona两周: I/O interface(HIGH/LOW)\n</code></pre>\n</li>\n<li>CPU怎么链接PORTB: databus</li>\n<li>DDRB跟PORTB,PORTC等等地位相等,都在register里,都是一个一个的寄存器,都是8bit.(each port on Atmega328 has a <strong>Data Direction Register</strong>)</li>\n<li>DDRB和PORTB的<strong>关系</strong>:<br>  each bit of in PORTB has a corresponding input or output mode bit in DDRB.<h2 id=\"Lab3-portc-很好理解-读value\"><a href=\"#Lab3-portc-很好理解-读value\" class=\"headerlink\" title=\"Lab3 portc 很好理解 读value\"></a>Lab3 portc 很好理解 读value</h2></li>\n</ol>\n<h2 id=\"疑问疑惑\"><a href=\"#疑问疑惑\" class=\"headerlink\" title=\"疑问疑惑\"></a>疑问疑惑</h2><h3 id=\"程序内的语法\"><a href=\"#程序内的语法\" class=\"headerlink\" title=\"程序内的语法:\"></a>程序内的语法:</h3><ol>\n<li>main,mainloop的意思</li>\n<li>rjmp?</li>\n<li>brlo <strong>lessthan</strong>? 为什么是lessthan,brlo本身不就是当lower时吗</li>\n<li>.org 0,地址0 是跟0x06等等同一地位吗,那我在.equ里面最小的那个地址开始可以吗 --11.3<h3 id=\"led-on-s\"><a href=\"#led-on-s\" class=\"headerlink\" title=\"led_on.s:\"></a>led_on.s:</h3></li>\n<li>SREG的作用是什么,设置为0要干什么<h3 id=\"第三个程序-portc-lab3\"><a href=\"#第三个程序-portc-lab3\" class=\"headerlink\" title=\"第三个程序:portc(lab3)\"></a>第三个程序:portc(lab3)</h3></li>\n<li>从PINC中读取数据到PORTC,那pinc的数据从何而来?</li>\n</ol>\n","site":{"data":{"styles":"body {\n  position: relative;\n  font-family: 'Lato', \"PingFang SC\", \"Microsoft YaHei\", sans-serif;\n  font-size: 14px;\n  line-height: 2;\n  color: #555;\n  background: #a5b8cc;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n/*更好的侧边滚动条*/\n::-webkit-scrollbar {\n  width: 10px;\n  height: 10px;\n}\n::-webkit-scrollbar-button {\n  width: 0;\n  height: 0;\n}\n::-webkit-scrollbar-button:start:increment,\n::-webkit-scrollbar-button:end:decrement {\n  display: none;\n}\n::-webkit-scrollbar-corner {\n  display: block;\n}\n::-webkit-scrollbar-thumb {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.2);\n}\n::-webkit-scrollbar-thumb:hover {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.5);\n}\n::-webkit-scrollbar-track,\n::-webkit-scrollbar-thumb {\n  border-right: 1px solid transparent;\n  border-left: 1px solid transparent;\n}\n::-webkit-scrollbar-track:hover {\n  background-color: rgba(0,0,0,0.15);\n}\n::-webkit-scrollbar-button:start {\n  width: 10px;\n  height: 10px;\n/*background: url(../images/scrollbar_arrow.png) no-repeat 0 0;*/\n/*可以添加滚动条样式*/\n}\n.post-sticky-flag {\n  font-size: inherit;\n  float: left;\n  color: #000;\n  cursor: help;\n  transition-duration: 0.2s;\n  transition-timing-function: ease-in-out;\n  transition-delay: 0s;\n}\n.post-sticky-flag:hover {\n  color: #07b39b;\n}\n.brand {\n  color: #ff6a6a;\n}\n.site-subtitle {\n  margin-top: 10px;\n  font-size: 13px;\n  color: #fff;\n}\n.busuanzi-value {\n  color: #1890ff;\n}\n* {\n  color: #35405b;\n}\n.site-meta {\n  margin: 0;\n  text-align: $site-meta-text-align;\nmobile()\n}\n.brand {\n  position: relative;\n  display: inline-block;\n  padding: 0 40px;\n  color: #ff6a6a;\n  background: $brand-bg;\n  border-bottom: none;\n}\n.brand:hover {\n  color: $brand-hover-color;\n}\n"}},"excerpt":"<h2 id=\"Lab–汇编语言初识-amp-语法结构\"><a href=\"#Lab–汇编语言初识-amp-语法结构\" class=\"headerlink\" title=\"Lab–汇编语言初识&amp;语法结构\"></a>Lab–汇编语言初识&amp;语法结构</h2>","more":"<h3 id=\"第一个程序的理解\"><a href=\"#第一个程序的理解\" class=\"headerlink\" title=\"第一个程序的理解\"></a>第一个程序的理解</h3><ol>\n<li>.equ SREG,0x3f     :treat the label SREG as 0x3f</li>\n<li>.org 0     :the start address</li>\n<li>r16--r31,PPRB,PORTC等等在microprocessor’s CPU也就是Atmega328p里</li>\n</ol>\n<h2 id=\"lab2-portb-连led\"><a href=\"#lab2-portb-连led\" class=\"headerlink\" title=\"lab2 portb 连led\"></a>lab2 portb 连led</h2><h3 id=\"缩写\"><a href=\"#缩写\" class=\"headerlink\" title=\"缩写\"></a>缩写</h3><ol>\n<li><h4 id=\"SREG-status-register\"><a href=\"#SREG-status-register\" class=\"headerlink\" title=\"SREG : status register\"></a>SREG : status register</h4></li>\n<li><h4 id=\"Rd-Destination-register-in-the-register-file\"><a href=\"#Rd-Destination-register-in-the-register-file\" class=\"headerlink\" title=\"Rd : Destination register in the register file\"></a>Rd : Destination register in the register file</h4></li>\n</ol>\n<h3 id=\"arduino里几个概念\"><a href=\"#arduino里几个概念\" class=\"headerlink\" title=\"arduino里几个概念\"></a>arduino里几个概念</h3><ol>\n<li><h4 id=\"ATmega是Arduino里面的正方形芯片-microcontroller\"><a href=\"#ATmega是Arduino里面的正方形芯片-microcontroller\" class=\"headerlink\" title=\"ATmega是Arduino里面的正方形芯片,microcontroller\"></a>ATmega是Arduino里面的正方形芯片,microcontroller</h4></li>\n<li><h4 id=\"PORTB\"><a href=\"#PORTB\" class=\"headerlink\" title=\"PORTB\"></a>PORTB</h4><pre><code> : an 8-bit I/O port with internal pull-up resistors, 位于: 正方形芯片的周边小点(8个:PB7:0)\n 它们 连接着the external digital pins\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Atemega pin</th>\n<th>Nano digital pin</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PB0(在芯片的四周))</td>\n<td>D8(在nano的两周,可连接面包板的线)</td>\n</tr>\n<tr>\n<td>PB1</td>\n<td>D9</td>\n</tr>\n<tr>\n<td>….</td>\n<td>….</td>\n</tr>\n</tbody></table>\n</li>\n<li><h4 id=\"digital-pin\"><a href=\"#digital-pin\" class=\"headerlink\" title=\"digital pin:\"></a>digital pin:</h4><pre><code> 位于nona两周: I/O interface(HIGH/LOW)\n</code></pre>\n</li>\n<li>CPU怎么链接PORTB: databus</li>\n<li>DDRB跟PORTB,PORTC等等地位相等,都在register里,都是一个一个的寄存器,都是8bit.(each port on Atmega328 has a <strong>Data Direction Register</strong>)</li>\n<li>DDRB和PORTB的<strong>关系</strong>:<br>  each bit of in PORTB has a corresponding input or output mode bit in DDRB.<h2 id=\"Lab3-portc-很好理解-读value\"><a href=\"#Lab3-portc-很好理解-读value\" class=\"headerlink\" title=\"Lab3 portc 很好理解 读value\"></a>Lab3 portc 很好理解 读value</h2></li>\n</ol>\n<h2 id=\"疑问疑惑\"><a href=\"#疑问疑惑\" class=\"headerlink\" title=\"疑问疑惑\"></a>疑问疑惑</h2><h3 id=\"程序内的语法\"><a href=\"#程序内的语法\" class=\"headerlink\" title=\"程序内的语法:\"></a>程序内的语法:</h3><ol>\n<li>main,mainloop的意思</li>\n<li>rjmp?</li>\n<li>brlo <strong>lessthan</strong>? 为什么是lessthan,brlo本身不就是当lower时吗</li>\n<li>.org 0,地址0 是跟0x06等等同一地位吗,那我在.equ里面最小的那个地址开始可以吗 --11.3<h3 id=\"led-on-s\"><a href=\"#led-on-s\" class=\"headerlink\" title=\"led_on.s:\"></a>led_on.s:</h3></li>\n<li>SREG的作用是什么,设置为0要干什么<h3 id=\"第三个程序-portc-lab3\"><a href=\"#第三个程序-portc-lab3\" class=\"headerlink\" title=\"第三个程序:portc(lab3)\"></a>第三个程序:portc(lab3)</h3></li>\n<li>从PINC中读取数据到PORTC,那pinc的数据从何而来?</li>\n</ol>"},{"title":"CMTE_note","date":"2019-10-30T11:20:08.000Z","password":"password","top":100,"_content":"\n\n\n# 四 Vector  Algebra\n## 空间直线,空间平面\n<!--more-->\n### 空间直线几个形式的方程,空间平面的方程.\n\nAx +By +Cz + D = 0\n\n其中n = (A, B, C)是平面的法向量，D是将平面平移到坐标原点所需距离（所以D=0时，平面过原点）\n\n### 空间两直线的距离,点到平面以及到直线的距离 公式\n\n(联立方程)\n![点到平面](https://pic002.cnblogs.com/img/zdd/201007/2010071013450338.jpg \"公式\")\n\n## 已知两平面方程求交点坐标\n\n\n## 物理学中的力矩和功\n机械功:work\n力矩:moment of force\n     the tendency of a force to make an object **rotate** .\n两个物理意义不同,符号相同.牛顿-米.\n力矩*t=rXF*, 这个r不是功里面那样的在F方向的位移,而是从转轴到施力点的位移矢量.\n\n\n\n# 五 Matrix Algebra\n## 3阶矩阵运算易错的是:\n第二列的余子式中两列的顺序: 是从左到右 不是从右到左!\n## 课件提纲&概念\n1. 矩阵\\-\\-\\-多元方程组\n2. changes of  axes 旋转\\-\\-\\-\\-结合预科课件: 逆时针顺时针\n3. ### 几个矩阵和概念\n   - square m,column/row vector,diagonal m,unit/identity ma,symmetric m,upper\\-/lower\\-triangular m,diagonal对角矩阵,scalar数量矩阵(主对角元全相等)\n   - singular:奇异(行列式为0)\n   - trace: 迹sum of **leading diagonal**主对角线(左上右下)\n   - A<sup>T</sup>: 手心手背 转置矩阵\n            行列式和转置行列式**相等**\n   - minor:余子式,cofactor 代数余子式多一个-1的次方\n   - adjoint:伴随矩阵 ***注意特性和公式*** 代数余子式组成\n   - #### inverse matrix: 逆矩阵\n   - #### Cramer's rule卡姆拉法则 :\n   - #### Gaussian elimination: 见矩阵运算板块*高斯消元法*\n   - #### ref<br>\n         row echelon form阶梯型矩阵: 下阶梯,leadingentry是1.\n         rref行简化阶梯形矩阵:在ref基上<p>非零首元所在的列/p<>除了非零首元外，其余元素全为0.每个首项是1.\n         每个矩阵,ref不唯一,**rref唯一**.\n   - independent & dependent vectors线性相关无关\n         linear combination of vectors线性组合(是一个向量而不是关系)\n         注意根据定义,线性相关是n个向量组成的组,至少其余n-个可以表示一个\n\n   - Rank 秩 :最大线性无关的向量的个数  在ref形势下含非0的行数\n   - **eigenvalue**特征值\n          - characteristic polynomial(PPT72页),特征多项式characteristic equation of A特征方程\n          - eigenvector特征向量\n          -\n4.  注意**矩阵×标量**与行列式×标量的区别: 矩阵式乘每个元素,行列式乘一行.\n5.  ### 公式总结:\n    - (AB)<sup>T</sup> = B<sup>T</sup>A<sup>T</sup> & adj(AB) = adj(B)adj(A)\n    - eigenvalue的性质(PPT末尾)\n    - `AA*=A*A=|A|E`  (*伴随矩阵)\n    -       A<sup>-1</sup>=(1/|A|)*A*(可轻易有上一行结合AA<sup>-1</sup>=E推出)\n    -  |A*|=|A|<sup>n-1</sup>  (可轻易有上上一行推出)\n6. ### 矩阵运算,化简得基本步骤\n   - Gaussian elimination*高斯消元法*:\n        1. 最左上角变为1,依次用第一行的减\\-把剩下行的第一个数变0,这是第一遍,\n        2. 第二遍从第二行开始,把第二行第二列变1,依次用第二行减\\-使下面的行的第二个数变0,\n        3. 直到成为上三角.\n               补充:线性方程组的**初等变换**:\n                     1. 交换两个方程的位置(就好比与换矩阵的行!理解了)\n                     2. 一个方程两端同乘不为0的数\n                     3. 同乘不为0的数后加到另一方程去\n   - 转化成ref(下阶梯):PPT第58页\n         1. pivot:第一个第一列不为0的行,提到第一行\n         2. 依次把下面行的第一列第一行变为0\n         3. 去掉第一列,从新开始找pivot\n         4. 在此基础上转化成**rref**: 找到非0首元,把其上的全变为0\n   - find matrix **rank**:\n         1. 矩阵的ref形式里含有非0行的数量 = 矩阵中independent vector(每一行就是一个vector)\n   - eigenvalue: AX = aX\n          - 已知A可求a\n          - 已知A和a可求X(eigenvector)\n   - 矩阵加减:要同规模(与行列式不同,矩阵是每排,行列式不同的那一排(其余的每一排要对应相等))\n   - 矩阵乘法:好比说AB,要求是A的列数等于B的行数, 那么得到的矩阵规模是A的行数B的列数\n## 二级结论\n   - ###  上三角行列式\n             的值D = 对角线元素乘积\n   - ###   n阶行列式的性质\n             1. 行列式等于它的转置行列式\n             2. 互换行列式中的两行/列,行列式变号(**行列式是一个值数,与矩阵不同**),那矩阵换行呢**??**\n             3. 行列式有两行/列对应相等或者对应成比例,行列式 = 0或者行列式有一行全为0,行列式也为0\n             4. 行列式乘一个数,就乘一行,跟矩阵一样??\n             5. 最重要的来了: 把某一行/列元素的k倍加到另一行/列,行列式的值不变不变不变!\n             6. 可以用上述这些进行行列式的计算\n   - ###   行列式\n             1. 一个特殊行列式: 范德蒙Vandermonde\n   -       可交换矩阵commutable: 数量矩阵与同阶任何矩阵,A与单位阵,对角阵与对角阵\n   -       方阵的幂\n   - 矩阵的初等变换: 极其类似行列式的初等变换\n\n\n\n\n\n\n## 疑问疑惑不理解\n 1. 矩阵这么乘啊加啊,它行列式的值不会变吗,为什么可以这样\n 2. 转化成ref\n 3. 怎么用矩阵解三元一次方程(就像解eigenvector)\n 4. 我记得我总结过行列式与矩阵的不同??\n 5. 记得PPT最后的几个性质 PPT的例题\\-\\-\\-\\-可以lab时候做\\-\\-\\-*于10.31*\n\n\n## 难点和做题总结\n  1. 求特征向量的时候,就设xyz根据向量积的基本法则求,它们积是0.\n  2.\n\n\n\n# 七 函数的极限\n## PPT中的基本英文的概念:\n1. 夹逼定理:sandwich theorem\n2. precose(formal) definition of Limit\n3. one-side limut\n4. continuity at a point\n\n\n# 八 导数 \\-\\-\\-11.14上课\n## ppt与课本\n1. 课本书签中左右导数的具体计算过程\n2. 注意题型大部分有可能是物理应用\n3. 复习去年学的导数那一章，注意肯定有很多题型（比如说微分什么的计算我记得）\n4. \\-\\-\\-\\-11.18上matlab: 搞清楚几种极值,什么**local maximum,absolute minimum**对应的中文概念和此时函数的导数二次导数等等的特性.总结出来!\n5. 在本周quiz中,出现了一个我竟然忘记的东西!! 那就是 函数此点可导的条件有两个,**1此点连续,2左导数=右导数!!!!**\n\n# 九 微分方程\n## ppt提纲\n1. first-order initial value problem\n2. slope fields\n3. **\\[Euler's method\\]**(https://zh.wikipedia.org/wiki/欧拉方法 \"欧拉法\")\n4. linear equation\n5. autonomous equation\n  - equilibrium values or rest points\n6. phase line\n7. systems of equations\n  - autonomous\n8. phase planes\n  - trajectory\n","source":"_posts/CMTE-s-note.md","raw":"---\ntitle: CMTE_note\ndate: 2019-10-30 19:20:08\ntag:\n- 空间向量\ncategories:\n- 2019\n- KCL\n- CMTE\npassword: password\ntop: 100\n---\n\n\n\n# 四 Vector  Algebra\n## 空间直线,空间平面\n<!--more-->\n### 空间直线几个形式的方程,空间平面的方程.\n\nAx +By +Cz + D = 0\n\n其中n = (A, B, C)是平面的法向量，D是将平面平移到坐标原点所需距离（所以D=0时，平面过原点）\n\n### 空间两直线的距离,点到平面以及到直线的距离 公式\n\n(联立方程)\n![点到平面](https://pic002.cnblogs.com/img/zdd/201007/2010071013450338.jpg \"公式\")\n\n## 已知两平面方程求交点坐标\n\n\n## 物理学中的力矩和功\n机械功:work\n力矩:moment of force\n     the tendency of a force to make an object **rotate** .\n两个物理意义不同,符号相同.牛顿-米.\n力矩*t=rXF*, 这个r不是功里面那样的在F方向的位移,而是从转轴到施力点的位移矢量.\n\n\n\n# 五 Matrix Algebra\n## 3阶矩阵运算易错的是:\n第二列的余子式中两列的顺序: 是从左到右 不是从右到左!\n## 课件提纲&概念\n1. 矩阵\\-\\-\\-多元方程组\n2. changes of  axes 旋转\\-\\-\\-\\-结合预科课件: 逆时针顺时针\n3. ### 几个矩阵和概念\n   - square m,column/row vector,diagonal m,unit/identity ma,symmetric m,upper\\-/lower\\-triangular m,diagonal对角矩阵,scalar数量矩阵(主对角元全相等)\n   - singular:奇异(行列式为0)\n   - trace: 迹sum of **leading diagonal**主对角线(左上右下)\n   - A<sup>T</sup>: 手心手背 转置矩阵\n            行列式和转置行列式**相等**\n   - minor:余子式,cofactor 代数余子式多一个-1的次方\n   - adjoint:伴随矩阵 ***注意特性和公式*** 代数余子式组成\n   - #### inverse matrix: 逆矩阵\n   - #### Cramer's rule卡姆拉法则 :\n   - #### Gaussian elimination: 见矩阵运算板块*高斯消元法*\n   - #### ref<br>\n         row echelon form阶梯型矩阵: 下阶梯,leadingentry是1.\n         rref行简化阶梯形矩阵:在ref基上<p>非零首元所在的列/p<>除了非零首元外，其余元素全为0.每个首项是1.\n         每个矩阵,ref不唯一,**rref唯一**.\n   - independent & dependent vectors线性相关无关\n         linear combination of vectors线性组合(是一个向量而不是关系)\n         注意根据定义,线性相关是n个向量组成的组,至少其余n-个可以表示一个\n\n   - Rank 秩 :最大线性无关的向量的个数  在ref形势下含非0的行数\n   - **eigenvalue**特征值\n          - characteristic polynomial(PPT72页),特征多项式characteristic equation of A特征方程\n          - eigenvector特征向量\n          -\n4.  注意**矩阵×标量**与行列式×标量的区别: 矩阵式乘每个元素,行列式乘一行.\n5.  ### 公式总结:\n    - (AB)<sup>T</sup> = B<sup>T</sup>A<sup>T</sup> & adj(AB) = adj(B)adj(A)\n    - eigenvalue的性质(PPT末尾)\n    - `AA*=A*A=|A|E`  (*伴随矩阵)\n    -       A<sup>-1</sup>=(1/|A|)*A*(可轻易有上一行结合AA<sup>-1</sup>=E推出)\n    -  |A*|=|A|<sup>n-1</sup>  (可轻易有上上一行推出)\n6. ### 矩阵运算,化简得基本步骤\n   - Gaussian elimination*高斯消元法*:\n        1. 最左上角变为1,依次用第一行的减\\-把剩下行的第一个数变0,这是第一遍,\n        2. 第二遍从第二行开始,把第二行第二列变1,依次用第二行减\\-使下面的行的第二个数变0,\n        3. 直到成为上三角.\n               补充:线性方程组的**初等变换**:\n                     1. 交换两个方程的位置(就好比与换矩阵的行!理解了)\n                     2. 一个方程两端同乘不为0的数\n                     3. 同乘不为0的数后加到另一方程去\n   - 转化成ref(下阶梯):PPT第58页\n         1. pivot:第一个第一列不为0的行,提到第一行\n         2. 依次把下面行的第一列第一行变为0\n         3. 去掉第一列,从新开始找pivot\n         4. 在此基础上转化成**rref**: 找到非0首元,把其上的全变为0\n   - find matrix **rank**:\n         1. 矩阵的ref形式里含有非0行的数量 = 矩阵中independent vector(每一行就是一个vector)\n   - eigenvalue: AX = aX\n          - 已知A可求a\n          - 已知A和a可求X(eigenvector)\n   - 矩阵加减:要同规模(与行列式不同,矩阵是每排,行列式不同的那一排(其余的每一排要对应相等))\n   - 矩阵乘法:好比说AB,要求是A的列数等于B的行数, 那么得到的矩阵规模是A的行数B的列数\n## 二级结论\n   - ###  上三角行列式\n             的值D = 对角线元素乘积\n   - ###   n阶行列式的性质\n             1. 行列式等于它的转置行列式\n             2. 互换行列式中的两行/列,行列式变号(**行列式是一个值数,与矩阵不同**),那矩阵换行呢**??**\n             3. 行列式有两行/列对应相等或者对应成比例,行列式 = 0或者行列式有一行全为0,行列式也为0\n             4. 行列式乘一个数,就乘一行,跟矩阵一样??\n             5. 最重要的来了: 把某一行/列元素的k倍加到另一行/列,行列式的值不变不变不变!\n             6. 可以用上述这些进行行列式的计算\n   - ###   行列式\n             1. 一个特殊行列式: 范德蒙Vandermonde\n   -       可交换矩阵commutable: 数量矩阵与同阶任何矩阵,A与单位阵,对角阵与对角阵\n   -       方阵的幂\n   - 矩阵的初等变换: 极其类似行列式的初等变换\n\n\n\n\n\n\n## 疑问疑惑不理解\n 1. 矩阵这么乘啊加啊,它行列式的值不会变吗,为什么可以这样\n 2. 转化成ref\n 3. 怎么用矩阵解三元一次方程(就像解eigenvector)\n 4. 我记得我总结过行列式与矩阵的不同??\n 5. 记得PPT最后的几个性质 PPT的例题\\-\\-\\-\\-可以lab时候做\\-\\-\\-*于10.31*\n\n\n## 难点和做题总结\n  1. 求特征向量的时候,就设xyz根据向量积的基本法则求,它们积是0.\n  2.\n\n\n\n# 七 函数的极限\n## PPT中的基本英文的概念:\n1. 夹逼定理:sandwich theorem\n2. precose(formal) definition of Limit\n3. one-side limut\n4. continuity at a point\n\n\n# 八 导数 \\-\\-\\-11.14上课\n## ppt与课本\n1. 课本书签中左右导数的具体计算过程\n2. 注意题型大部分有可能是物理应用\n3. 复习去年学的导数那一章，注意肯定有很多题型（比如说微分什么的计算我记得）\n4. \\-\\-\\-\\-11.18上matlab: 搞清楚几种极值,什么**local maximum,absolute minimum**对应的中文概念和此时函数的导数二次导数等等的特性.总结出来!\n5. 在本周quiz中,出现了一个我竟然忘记的东西!! 那就是 函数此点可导的条件有两个,**1此点连续,2左导数=右导数!!!!**\n\n# 九 微分方程\n## ppt提纲\n1. first-order initial value problem\n2. slope fields\n3. **\\[Euler's method\\]**(https://zh.wikipedia.org/wiki/欧拉方法 \"欧拉法\")\n4. linear equation\n5. autonomous equation\n  - equilibrium values or rest points\n6. phase line\n7. systems of equations\n  - autonomous\n8. phase planes\n  - trajectory\n","slug":"CMTE-s-note","published":1,"updated":"2019-10-30T11:20:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqs0rf7b00030mwlcq4y635o","content":"<h1 id=\"四-Vector-Algebra\"><a href=\"#四-Vector-Algebra\" class=\"headerlink\" title=\"四 Vector  Algebra\"></a>四 Vector  Algebra</h1><h2 id=\"空间直线-空间平面\"><a href=\"#空间直线-空间平面\" class=\"headerlink\" title=\"空间直线,空间平面\"></a>空间直线,空间平面</h2><span id=\"more\"></span>\n<h3 id=\"空间直线几个形式的方程-空间平面的方程\"><a href=\"#空间直线几个形式的方程-空间平面的方程\" class=\"headerlink\" title=\"空间直线几个形式的方程,空间平面的方程.\"></a>空间直线几个形式的方程,空间平面的方程.</h3><p>Ax +By +Cz + D = 0</p>\n<p>其中n = (A, B, C)是平面的法向量，D是将平面平移到坐标原点所需距离（所以D=0时，平面过原点）</p>\n<h3 id=\"空间两直线的距离-点到平面以及到直线的距离-公式\"><a href=\"#空间两直线的距离-点到平面以及到直线的距离-公式\" class=\"headerlink\" title=\"空间两直线的距离,点到平面以及到直线的距离 公式\"></a>空间两直线的距离,点到平面以及到直线的距离 公式</h3><p>(联立方程)<br><img src=\"https://pic002.cnblogs.com/img/zdd/201007/2010071013450338.jpg\" alt=\"点到平面\" title=\"公式\"></p>\n<h2 id=\"已知两平面方程求交点坐标\"><a href=\"#已知两平面方程求交点坐标\" class=\"headerlink\" title=\"已知两平面方程求交点坐标\"></a>已知两平面方程求交点坐标</h2><h2 id=\"物理学中的力矩和功\"><a href=\"#物理学中的力矩和功\" class=\"headerlink\" title=\"物理学中的力矩和功\"></a>物理学中的力矩和功</h2><p>机械功:work<br>力矩:moment of force<br>     the tendency of a force to make an object <strong>rotate</strong> .<br>两个物理意义不同,符号相同.牛顿-米.<br>力矩<em>t=rXF</em>, 这个r不是功里面那样的在F方向的位移,而是从转轴到施力点的位移矢量.</p>\n<h1 id=\"五-Matrix-Algebra\"><a href=\"#五-Matrix-Algebra\" class=\"headerlink\" title=\"五 Matrix Algebra\"></a>五 Matrix Algebra</h1><h2 id=\"3阶矩阵运算易错的是\"><a href=\"#3阶矩阵运算易错的是\" class=\"headerlink\" title=\"3阶矩阵运算易错的是:\"></a>3阶矩阵运算易错的是:</h2><p>第二列的余子式中两列的顺序: 是从左到右 不是从右到左!</p>\n<h2 id=\"课件提纲-amp-概念\"><a href=\"#课件提纲-amp-概念\" class=\"headerlink\" title=\"课件提纲&amp;概念\"></a>课件提纲&amp;概念</h2><ol>\n<li><p>矩阵---多元方程组</p>\n</li>\n<li><p>changes of  axes 旋转----结合预科课件: 逆时针顺时针</p>\n</li>\n<li><h3 id=\"几个矩阵和概念\"><a href=\"#几个矩阵和概念\" class=\"headerlink\" title=\"几个矩阵和概念\"></a>几个矩阵和概念</h3><ul>\n<li><p>square m,column/row vector,diagonal m,unit/identity ma,symmetric m,upper-/lower-triangular m,diagonal对角矩阵,scalar数量矩阵(主对角元全相等)</p>\n</li>\n<li><p>singular:奇异(行列式为0)</p>\n</li>\n<li><p>trace: 迹sum of <strong>leading diagonal</strong>主对角线(左上右下)</p>\n</li>\n<li><p>A<sup>T</sup>: 手心手背 转置矩阵</p>\n<pre><code>   行列式和转置行列式**相等**\n</code></pre>\n</li>\n<li><p>minor:余子式,cofactor 代数余子式多一个-1的次方</p>\n</li>\n<li><p>adjoint:伴随矩阵 <em><strong>注意特性和公式</strong></em> 代数余子式组成</p>\n</li>\n<li><h4 id=\"inverse-matrix-逆矩阵\"><a href=\"#inverse-matrix-逆矩阵\" class=\"headerlink\" title=\"inverse matrix: 逆矩阵\"></a>inverse matrix: 逆矩阵</h4></li>\n<li><h4 id=\"Cramer’s-rule卡姆拉法则\"><a href=\"#Cramer’s-rule卡姆拉法则\" class=\"headerlink\" title=\"Cramer’s rule卡姆拉法则 :\"></a>Cramer’s rule卡姆拉法则 :</h4></li>\n<li><h4 id=\"Gaussian-elimination-见矩阵运算板块高斯消元法\"><a href=\"#Gaussian-elimination-见矩阵运算板块高斯消元法\" class=\"headerlink\" title=\"Gaussian elimination: 见矩阵运算板块高斯消元法\"></a>Gaussian elimination: 见矩阵运算板块<em>高斯消元法</em></h4></li>\n<li><h4 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref<br></h4><pre><code>row echelon form阶梯型矩阵: 下阶梯,leadingentry是1.\nrref行简化阶梯形矩阵:在ref基上&lt;p&gt;非零首元所在的列/p&lt;&gt;除了非零首元外，其余元素全为0.每个首项是1.\n每个矩阵,ref不唯一,**rref唯一**.\n</code></pre>\n</li>\n<li><p>independent &amp; dependent vectors线性相关无关</p>\n<pre><code>linear combination of vectors线性组合(是一个向量而不是关系)\n注意根据定义,线性相关是n个向量组成的组,至少其余n-个可以表示一个\n</code></pre>\n</li>\n<li><p>Rank 秩 :最大线性无关的向量的个数  在ref形势下含非0的行数</p>\n</li>\n<li><p><strong>eigenvalue</strong>特征值</p>\n<pre><code> - characteristic polynomial(PPT72页),特征多项式characteristic equation of A特征方程\n - eigenvector特征向量\n -\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p> 注意<strong>矩阵×标量</strong>与行列式×标量的区别: 矩阵式乘每个元素,行列式乘一行.</p>\n</li>\n<li><h3 id=\"公式总结\"><a href=\"#公式总结\" class=\"headerlink\" title=\"公式总结:\"></a>公式总结:</h3><ul>\n<li>(AB)<sup>T</sup> = B<sup>T</sup>A<sup>T</sup> &amp; adj(AB) = adj(B)adj(A)</li>\n<li>eigenvalue的性质(PPT末尾)</li>\n<li><code>AA*=A*A=|A|E</code>  (*伴随矩阵)</li>\n<li><pre><code>  A&lt;sup&gt;-1&lt;/sup&gt;=(1/|A|)*A*(可轻易有上一行结合AA&lt;sup&gt;-1&lt;/sup&gt;=E推出)\n</code></pre>\n</li>\n<li> |A*|=|A|<sup>n-1</sup>  (可轻易有上上一行推出)</li>\n</ul>\n</li>\n<li><h3 id=\"矩阵运算-化简得基本步骤\"><a href=\"#矩阵运算-化简得基本步骤\" class=\"headerlink\" title=\"矩阵运算,化简得基本步骤\"></a>矩阵运算,化简得基本步骤</h3><ul>\n<li>Gaussian elimination<em>高斯消元法</em>:<ol>\n<li>最左上角变为1,依次用第一行的减-把剩下行的第一个数变0,这是第一遍,</li>\n<li>第二遍从第二行开始,把第二行第二列变1,依次用第二行减-使下面的行的第二个数变0,</li>\n<li>直到成为上三角.<pre><code>补充:线性方程组的**初等变换**:\n      1. 交换两个方程的位置(就好比与换矩阵的行!理解了)\n      2. 一个方程两端同乘不为0的数\n      3. 同乘不为0的数后加到另一方程去\n</code></pre>\n</li>\n</ol>\n</li>\n<li>转化成ref(下阶梯):PPT第58页<pre><code>1. pivot:第一个第一列不为0的行,提到第一行\n2. 依次把下面行的第一列第一行变为0\n3. 去掉第一列,从新开始找pivot\n4. 在此基础上转化成**rref**: 找到非0首元,把其上的全变为0\n</code></pre>\n</li>\n<li>find matrix <strong>rank</strong>:<pre><code>1. 矩阵的ref形式里含有非0行的数量 = 矩阵中independent vector(每一行就是一个vector)\n</code></pre>\n</li>\n<li>eigenvalue: AX = aX<pre><code> - 已知A可求a\n - 已知A和a可求X(eigenvector)\n</code></pre>\n</li>\n<li>矩阵加减:要同规模(与行列式不同,矩阵是每排,行列式不同的那一排(其余的每一排要对应相等))</li>\n<li>矩阵乘法:好比说AB,要求是A的列数等于B的行数, 那么得到的矩阵规模是A的行数B的列数<h2 id=\"二级结论\"><a href=\"#二级结论\" class=\"headerlink\" title=\"二级结论\"></a>二级结论</h2></li>\n<li><h3 id=\"上三角行列式\"><a href=\"#上三角行列式\" class=\"headerlink\" title=\"上三角行列式\"></a>上三角行列式</h3><pre><code>    的值D = 对角线元素乘积\n</code></pre>\n</li>\n<li><h3 id=\"n阶行列式的性质\"><a href=\"#n阶行列式的性质\" class=\"headerlink\" title=\"n阶行列式的性质\"></a>n阶行列式的性质</h3><pre><code>    1. 行列式等于它的转置行列式\n    2. 互换行列式中的两行/列,行列式变号(**行列式是一个值数,与矩阵不同**),那矩阵换行呢**??**\n    3. 行列式有两行/列对应相等或者对应成比例,行列式 = 0或者行列式有一行全为0,行列式也为0\n    4. 行列式乘一个数,就乘一行,跟矩阵一样??\n    5. 最重要的来了: 把某一行/列元素的k倍加到另一行/列,行列式的值不变不变不变!\n    6. 可以用上述这些进行行列式的计算\n</code></pre>\n</li>\n<li><h3 id=\"行列式\"><a href=\"#行列式\" class=\"headerlink\" title=\"行列式\"></a>行列式</h3><pre><code>    1. 一个特殊行列式: 范德蒙Vandermonde\n</code></pre>\n</li>\n<li><pre><code>  可交换矩阵commutable: 数量矩阵与同阶任何矩阵,A与单位阵,对角阵与对角阵\n</code></pre>\n</li>\n<li><pre><code>  方阵的幂\n</code></pre>\n</li>\n<li>矩阵的初等变换: 极其类似行列式的初等变换</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"疑问疑惑不理解\"><a href=\"#疑问疑惑不理解\" class=\"headerlink\" title=\"疑问疑惑不理解\"></a>疑问疑惑不理解</h2><ol>\n<li>矩阵这么乘啊加啊,它行列式的值不会变吗,为什么可以这样</li>\n<li>转化成ref</li>\n<li>怎么用矩阵解三元一次方程(就像解eigenvector)</li>\n<li>我记得我总结过行列式与矩阵的不同??</li>\n<li>记得PPT最后的几个性质 PPT的例题----可以lab时候做---<em>于10.31</em></li>\n</ol>\n<h2 id=\"难点和做题总结\"><a href=\"#难点和做题总结\" class=\"headerlink\" title=\"难点和做题总结\"></a>难点和做题总结</h2><ol>\n<li>求特征向量的时候,就设xyz根据向量积的基本法则求,它们积是0.</li>\n<li></li>\n</ol>\n<h1 id=\"七-函数的极限\"><a href=\"#七-函数的极限\" class=\"headerlink\" title=\"七 函数的极限\"></a>七 函数的极限</h1><h2 id=\"PPT中的基本英文的概念\"><a href=\"#PPT中的基本英文的概念\" class=\"headerlink\" title=\"PPT中的基本英文的概念:\"></a>PPT中的基本英文的概念:</h2><ol>\n<li>夹逼定理:sandwich theorem</li>\n<li>precose(formal) definition of Limit</li>\n<li>one-side limut</li>\n<li>continuity at a point</li>\n</ol>\n<h1 id=\"八-导数-11-14上课\"><a href=\"#八-导数-11-14上课\" class=\"headerlink\" title=\"八 导数 ---11.14上课\"></a>八 导数 ---11.14上课</h1><h2 id=\"ppt与课本\"><a href=\"#ppt与课本\" class=\"headerlink\" title=\"ppt与课本\"></a>ppt与课本</h2><ol>\n<li>课本书签中左右导数的具体计算过程</li>\n<li>注意题型大部分有可能是物理应用</li>\n<li>复习去年学的导数那一章，注意肯定有很多题型（比如说微分什么的计算我记得）</li>\n<li>----11.18上matlab: 搞清楚几种极值,什么<strong>local maximum,absolute minimum</strong>对应的中文概念和此时函数的导数二次导数等等的特性.总结出来!</li>\n<li>在本周quiz中,出现了一个我竟然忘记的东西!! 那就是 函数此点可导的条件有两个,<strong>1此点连续,2左导数=右导数!!!!</strong></li>\n</ol>\n<h1 id=\"九-微分方程\"><a href=\"#九-微分方程\" class=\"headerlink\" title=\"九 微分方程\"></a>九 微分方程</h1><h2 id=\"ppt提纲\"><a href=\"#ppt提纲\" class=\"headerlink\" title=\"ppt提纲\"></a>ppt提纲</h2><ol>\n<li>first-order initial value problem</li>\n<li>slope fields</li>\n<li><strong>[Euler’s method]</strong>(<a href=\"https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E6%96%B9%E6%B3%95\">https://zh.wikipedia.org/wiki/欧拉方法</a> “欧拉法”)</li>\n<li>linear equation</li>\n<li>autonomous equation</li>\n</ol>\n<ul>\n<li>equilibrium values or rest points</li>\n</ul>\n<ol start=\"6\">\n<li>phase line</li>\n<li>systems of equations</li>\n</ol>\n<ul>\n<li>autonomous</li>\n</ul>\n<ol start=\"8\">\n<li>phase planes</li>\n</ol>\n<ul>\n<li>trajectory</li>\n</ul>\n","site":{"data":{"styles":"body {\n  position: relative;\n  font-family: 'Lato', \"PingFang SC\", \"Microsoft YaHei\", sans-serif;\n  font-size: 14px;\n  line-height: 2;\n  color: #555;\n  background: #a5b8cc;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n/*更好的侧边滚动条*/\n::-webkit-scrollbar {\n  width: 10px;\n  height: 10px;\n}\n::-webkit-scrollbar-button {\n  width: 0;\n  height: 0;\n}\n::-webkit-scrollbar-button:start:increment,\n::-webkit-scrollbar-button:end:decrement {\n  display: none;\n}\n::-webkit-scrollbar-corner {\n  display: block;\n}\n::-webkit-scrollbar-thumb {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.2);\n}\n::-webkit-scrollbar-thumb:hover {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.5);\n}\n::-webkit-scrollbar-track,\n::-webkit-scrollbar-thumb {\n  border-right: 1px solid transparent;\n  border-left: 1px solid transparent;\n}\n::-webkit-scrollbar-track:hover {\n  background-color: rgba(0,0,0,0.15);\n}\n::-webkit-scrollbar-button:start {\n  width: 10px;\n  height: 10px;\n/*background: url(../images/scrollbar_arrow.png) no-repeat 0 0;*/\n/*可以添加滚动条样式*/\n}\n.post-sticky-flag {\n  font-size: inherit;\n  float: left;\n  color: #000;\n  cursor: help;\n  transition-duration: 0.2s;\n  transition-timing-function: ease-in-out;\n  transition-delay: 0s;\n}\n.post-sticky-flag:hover {\n  color: #07b39b;\n}\n.brand {\n  color: #ff6a6a;\n}\n.site-subtitle {\n  margin-top: 10px;\n  font-size: 13px;\n  color: #fff;\n}\n.busuanzi-value {\n  color: #1890ff;\n}\n* {\n  color: #35405b;\n}\n.site-meta {\n  margin: 0;\n  text-align: $site-meta-text-align;\nmobile()\n}\n.brand {\n  position: relative;\n  display: inline-block;\n  padding: 0 40px;\n  color: #ff6a6a;\n  background: $brand-bg;\n  border-bottom: none;\n}\n.brand:hover {\n  color: $brand-hover-color;\n}\n"}},"excerpt":"<h1 id=\"四-Vector-Algebra\"><a href=\"#四-Vector-Algebra\" class=\"headerlink\" title=\"四 Vector  Algebra\"></a>四 Vector  Algebra</h1><h2 id=\"空间直线-空间平面\"><a href=\"#空间直线-空间平面\" class=\"headerlink\" title=\"空间直线,空间平面\"></a>空间直线,空间平面</h2>","more":"<h3 id=\"空间直线几个形式的方程-空间平面的方程\"><a href=\"#空间直线几个形式的方程-空间平面的方程\" class=\"headerlink\" title=\"空间直线几个形式的方程,空间平面的方程.\"></a>空间直线几个形式的方程,空间平面的方程.</h3><p>Ax +By +Cz + D = 0</p>\n<p>其中n = (A, B, C)是平面的法向量，D是将平面平移到坐标原点所需距离（所以D=0时，平面过原点）</p>\n<h3 id=\"空间两直线的距离-点到平面以及到直线的距离-公式\"><a href=\"#空间两直线的距离-点到平面以及到直线的距离-公式\" class=\"headerlink\" title=\"空间两直线的距离,点到平面以及到直线的距离 公式\"></a>空间两直线的距离,点到平面以及到直线的距离 公式</h3><p>(联立方程)<br><img src=\"https://pic002.cnblogs.com/img/zdd/201007/2010071013450338.jpg\" alt=\"点到平面\" title=\"公式\"></p>\n<h2 id=\"已知两平面方程求交点坐标\"><a href=\"#已知两平面方程求交点坐标\" class=\"headerlink\" title=\"已知两平面方程求交点坐标\"></a>已知两平面方程求交点坐标</h2><h2 id=\"物理学中的力矩和功\"><a href=\"#物理学中的力矩和功\" class=\"headerlink\" title=\"物理学中的力矩和功\"></a>物理学中的力矩和功</h2><p>机械功:work<br>力矩:moment of force<br>     the tendency of a force to make an object <strong>rotate</strong> .<br>两个物理意义不同,符号相同.牛顿-米.<br>力矩<em>t=rXF</em>, 这个r不是功里面那样的在F方向的位移,而是从转轴到施力点的位移矢量.</p>\n<h1 id=\"五-Matrix-Algebra\"><a href=\"#五-Matrix-Algebra\" class=\"headerlink\" title=\"五 Matrix Algebra\"></a>五 Matrix Algebra</h1><h2 id=\"3阶矩阵运算易错的是\"><a href=\"#3阶矩阵运算易错的是\" class=\"headerlink\" title=\"3阶矩阵运算易错的是:\"></a>3阶矩阵运算易错的是:</h2><p>第二列的余子式中两列的顺序: 是从左到右 不是从右到左!</p>\n<h2 id=\"课件提纲-amp-概念\"><a href=\"#课件提纲-amp-概念\" class=\"headerlink\" title=\"课件提纲&amp;概念\"></a>课件提纲&amp;概念</h2><ol>\n<li><p>矩阵---多元方程组</p>\n</li>\n<li><p>changes of  axes 旋转----结合预科课件: 逆时针顺时针</p>\n</li>\n<li><h3 id=\"几个矩阵和概念\"><a href=\"#几个矩阵和概念\" class=\"headerlink\" title=\"几个矩阵和概念\"></a>几个矩阵和概念</h3><ul>\n<li><p>square m,column/row vector,diagonal m,unit/identity ma,symmetric m,upper-/lower-triangular m,diagonal对角矩阵,scalar数量矩阵(主对角元全相等)</p>\n</li>\n<li><p>singular:奇异(行列式为0)</p>\n</li>\n<li><p>trace: 迹sum of <strong>leading diagonal</strong>主对角线(左上右下)</p>\n</li>\n<li><p>A<sup>T</sup>: 手心手背 转置矩阵</p>\n<pre><code>   行列式和转置行列式**相等**\n</code></pre>\n</li>\n<li><p>minor:余子式,cofactor 代数余子式多一个-1的次方</p>\n</li>\n<li><p>adjoint:伴随矩阵 <em><strong>注意特性和公式</strong></em> 代数余子式组成</p>\n</li>\n<li><h4 id=\"inverse-matrix-逆矩阵\"><a href=\"#inverse-matrix-逆矩阵\" class=\"headerlink\" title=\"inverse matrix: 逆矩阵\"></a>inverse matrix: 逆矩阵</h4></li>\n<li><h4 id=\"Cramer’s-rule卡姆拉法则\"><a href=\"#Cramer’s-rule卡姆拉法则\" class=\"headerlink\" title=\"Cramer’s rule卡姆拉法则 :\"></a>Cramer’s rule卡姆拉法则 :</h4></li>\n<li><h4 id=\"Gaussian-elimination-见矩阵运算板块高斯消元法\"><a href=\"#Gaussian-elimination-见矩阵运算板块高斯消元法\" class=\"headerlink\" title=\"Gaussian elimination: 见矩阵运算板块高斯消元法\"></a>Gaussian elimination: 见矩阵运算板块<em>高斯消元法</em></h4></li>\n<li><h4 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref<br></h4><pre><code>row echelon form阶梯型矩阵: 下阶梯,leadingentry是1.\nrref行简化阶梯形矩阵:在ref基上&lt;p&gt;非零首元所在的列/p&lt;&gt;除了非零首元外，其余元素全为0.每个首项是1.\n每个矩阵,ref不唯一,**rref唯一**.\n</code></pre>\n</li>\n<li><p>independent &amp; dependent vectors线性相关无关</p>\n<pre><code>linear combination of vectors线性组合(是一个向量而不是关系)\n注意根据定义,线性相关是n个向量组成的组,至少其余n-个可以表示一个\n</code></pre>\n</li>\n<li><p>Rank 秩 :最大线性无关的向量的个数  在ref形势下含非0的行数</p>\n</li>\n<li><p><strong>eigenvalue</strong>特征值</p>\n<pre><code> - characteristic polynomial(PPT72页),特征多项式characteristic equation of A特征方程\n - eigenvector特征向量\n -\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p> 注意<strong>矩阵×标量</strong>与行列式×标量的区别: 矩阵式乘每个元素,行列式乘一行.</p>\n</li>\n<li><h3 id=\"公式总结\"><a href=\"#公式总结\" class=\"headerlink\" title=\"公式总结:\"></a>公式总结:</h3><ul>\n<li>(AB)<sup>T</sup> = B<sup>T</sup>A<sup>T</sup> &amp; adj(AB) = adj(B)adj(A)</li>\n<li>eigenvalue的性质(PPT末尾)</li>\n<li><code>AA*=A*A=|A|E</code>  (*伴随矩阵)</li>\n<li><pre><code>  A&lt;sup&gt;-1&lt;/sup&gt;=(1/|A|)*A*(可轻易有上一行结合AA&lt;sup&gt;-1&lt;/sup&gt;=E推出)\n</code></pre>\n</li>\n<li> |A*|=|A|<sup>n-1</sup>  (可轻易有上上一行推出)</li>\n</ul>\n</li>\n<li><h3 id=\"矩阵运算-化简得基本步骤\"><a href=\"#矩阵运算-化简得基本步骤\" class=\"headerlink\" title=\"矩阵运算,化简得基本步骤\"></a>矩阵运算,化简得基本步骤</h3><ul>\n<li>Gaussian elimination<em>高斯消元法</em>:<ol>\n<li>最左上角变为1,依次用第一行的减-把剩下行的第一个数变0,这是第一遍,</li>\n<li>第二遍从第二行开始,把第二行第二列变1,依次用第二行减-使下面的行的第二个数变0,</li>\n<li>直到成为上三角.<pre><code>补充:线性方程组的**初等变换**:\n      1. 交换两个方程的位置(就好比与换矩阵的行!理解了)\n      2. 一个方程两端同乘不为0的数\n      3. 同乘不为0的数后加到另一方程去\n</code></pre>\n</li>\n</ol>\n</li>\n<li>转化成ref(下阶梯):PPT第58页<pre><code>1. pivot:第一个第一列不为0的行,提到第一行\n2. 依次把下面行的第一列第一行变为0\n3. 去掉第一列,从新开始找pivot\n4. 在此基础上转化成**rref**: 找到非0首元,把其上的全变为0\n</code></pre>\n</li>\n<li>find matrix <strong>rank</strong>:<pre><code>1. 矩阵的ref形式里含有非0行的数量 = 矩阵中independent vector(每一行就是一个vector)\n</code></pre>\n</li>\n<li>eigenvalue: AX = aX<pre><code> - 已知A可求a\n - 已知A和a可求X(eigenvector)\n</code></pre>\n</li>\n<li>矩阵加减:要同规模(与行列式不同,矩阵是每排,行列式不同的那一排(其余的每一排要对应相等))</li>\n<li>矩阵乘法:好比说AB,要求是A的列数等于B的行数, 那么得到的矩阵规模是A的行数B的列数<h2 id=\"二级结论\"><a href=\"#二级结论\" class=\"headerlink\" title=\"二级结论\"></a>二级结论</h2></li>\n<li><h3 id=\"上三角行列式\"><a href=\"#上三角行列式\" class=\"headerlink\" title=\"上三角行列式\"></a>上三角行列式</h3><pre><code>    的值D = 对角线元素乘积\n</code></pre>\n</li>\n<li><h3 id=\"n阶行列式的性质\"><a href=\"#n阶行列式的性质\" class=\"headerlink\" title=\"n阶行列式的性质\"></a>n阶行列式的性质</h3><pre><code>    1. 行列式等于它的转置行列式\n    2. 互换行列式中的两行/列,行列式变号(**行列式是一个值数,与矩阵不同**),那矩阵换行呢**??**\n    3. 行列式有两行/列对应相等或者对应成比例,行列式 = 0或者行列式有一行全为0,行列式也为0\n    4. 行列式乘一个数,就乘一行,跟矩阵一样??\n    5. 最重要的来了: 把某一行/列元素的k倍加到另一行/列,行列式的值不变不变不变!\n    6. 可以用上述这些进行行列式的计算\n</code></pre>\n</li>\n<li><h3 id=\"行列式\"><a href=\"#行列式\" class=\"headerlink\" title=\"行列式\"></a>行列式</h3><pre><code>    1. 一个特殊行列式: 范德蒙Vandermonde\n</code></pre>\n</li>\n<li><pre><code>  可交换矩阵commutable: 数量矩阵与同阶任何矩阵,A与单位阵,对角阵与对角阵\n</code></pre>\n</li>\n<li><pre><code>  方阵的幂\n</code></pre>\n</li>\n<li>矩阵的初等变换: 极其类似行列式的初等变换</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"疑问疑惑不理解\"><a href=\"#疑问疑惑不理解\" class=\"headerlink\" title=\"疑问疑惑不理解\"></a>疑问疑惑不理解</h2><ol>\n<li>矩阵这么乘啊加啊,它行列式的值不会变吗,为什么可以这样</li>\n<li>转化成ref</li>\n<li>怎么用矩阵解三元一次方程(就像解eigenvector)</li>\n<li>我记得我总结过行列式与矩阵的不同??</li>\n<li>记得PPT最后的几个性质 PPT的例题----可以lab时候做---<em>于10.31</em></li>\n</ol>\n<h2 id=\"难点和做题总结\"><a href=\"#难点和做题总结\" class=\"headerlink\" title=\"难点和做题总结\"></a>难点和做题总结</h2><ol>\n<li>求特征向量的时候,就设xyz根据向量积的基本法则求,它们积是0.</li>\n<li></li>\n</ol>\n<h1 id=\"七-函数的极限\"><a href=\"#七-函数的极限\" class=\"headerlink\" title=\"七 函数的极限\"></a>七 函数的极限</h1><h2 id=\"PPT中的基本英文的概念\"><a href=\"#PPT中的基本英文的概念\" class=\"headerlink\" title=\"PPT中的基本英文的概念:\"></a>PPT中的基本英文的概念:</h2><ol>\n<li>夹逼定理:sandwich theorem</li>\n<li>precose(formal) definition of Limit</li>\n<li>one-side limut</li>\n<li>continuity at a point</li>\n</ol>\n<h1 id=\"八-导数-11-14上课\"><a href=\"#八-导数-11-14上课\" class=\"headerlink\" title=\"八 导数 ---11.14上课\"></a>八 导数 ---11.14上课</h1><h2 id=\"ppt与课本\"><a href=\"#ppt与课本\" class=\"headerlink\" title=\"ppt与课本\"></a>ppt与课本</h2><ol>\n<li>课本书签中左右导数的具体计算过程</li>\n<li>注意题型大部分有可能是物理应用</li>\n<li>复习去年学的导数那一章，注意肯定有很多题型（比如说微分什么的计算我记得）</li>\n<li>----11.18上matlab: 搞清楚几种极值,什么<strong>local maximum,absolute minimum</strong>对应的中文概念和此时函数的导数二次导数等等的特性.总结出来!</li>\n<li>在本周quiz中,出现了一个我竟然忘记的东西!! 那就是 函数此点可导的条件有两个,<strong>1此点连续,2左导数=右导数!!!!</strong></li>\n</ol>\n<h1 id=\"九-微分方程\"><a href=\"#九-微分方程\" class=\"headerlink\" title=\"九 微分方程\"></a>九 微分方程</h1><h2 id=\"ppt提纲\"><a href=\"#ppt提纲\" class=\"headerlink\" title=\"ppt提纲\"></a>ppt提纲</h2><ol>\n<li>first-order initial value problem</li>\n<li>slope fields</li>\n<li><strong>[Euler’s method]</strong>(<a href=\"https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E6%96%B9%E6%B3%95\">https://zh.wikipedia.org/wiki/欧拉方法</a> “欧拉法”)</li>\n<li>linear equation</li>\n<li>autonomous equation</li>\n</ol>\n<ul>\n<li>equilibrium values or rest points</li>\n</ul>\n<ol start=\"6\">\n<li>phase line</li>\n<li>systems of equations</li>\n</ol>\n<ul>\n<li>autonomous</li>\n</ul>\n<ol start=\"8\">\n<li>phase planes</li>\n</ol>\n<ul>\n<li>trajectory</li>\n</ul>"},{"title":"CS_note","date":"2019-10-31T05:24:07.000Z","password":"password","top":200,"_content":"\n# 五 performance measurement and analysis\n<!--more-->\n  ##  PPT提纲\n  1. 性能equation : 1. CPU time 2. Amdahl's law\n  2. benchmarking: \n  3. 性能optimisation: \n   RISA&CISC(the two main kinds of ISA design)\n       **RISC**:reduced instruction set computers   **shorten time by reducing clock cycle**\n          simple instructions,few addressing mode\n       **CISC**:complex isc **reduce the number of instructions per program**\n          complex instructions,many addressing modes\n   Branch optimisation: pipeline hazards\n     delayed branching\n     Branch prediction\n  4. disk性能: 概念: utilisation U<sub>d</sub>=r<sub>req</sub> / r<sub>srv</sub>\n     FCFS: first-come,first served\n     SSTF:shortest seek time first(出现starvation的概念)\n     SCAN:not an acronym\n     C-SCAN:circular SCAN\n     LOOK/C-LOOK\n\n     注意比较各种情况下的好坏\n  ## 课上和课后总结理解难点\n   1. flushing the pipeline: conditional branck instructions\n   2. clock rate=machine cycles per second\n   3. \n   4. \n\n\n\n  ## 疑惑\n  1. CPU里clock cycle的理解\n  2. 对于RAM里的两种memory ports: 1. 32-bits for data/address 2. 8-bit for OPCODE, \n      是说每个横格长都是40bit吗,每一个data前面都有8bit的OPCODE吗,那怎么行得通呢\n  3. byte-addressable & word-addressable:\n          byte..:every byte has its own address. (word:every word) ","source":"_posts/Assembly.md","raw":"---\ntitle: CS_note\ndate: 2019-10-31 13:24:07\ntags: \n- CS\ncategories: \n- 2019\n- KCL\n- CS\npassword: password\ntop: 200\n---\n\n# 五 performance measurement and analysis\n<!--more-->\n  ##  PPT提纲\n  1. 性能equation : 1. CPU time 2. Amdahl's law\n  2. benchmarking: \n  3. 性能optimisation: \n   RISA&CISC(the two main kinds of ISA design)\n       **RISC**:reduced instruction set computers   **shorten time by reducing clock cycle**\n          simple instructions,few addressing mode\n       **CISC**:complex isc **reduce the number of instructions per program**\n          complex instructions,many addressing modes\n   Branch optimisation: pipeline hazards\n     delayed branching\n     Branch prediction\n  4. disk性能: 概念: utilisation U<sub>d</sub>=r<sub>req</sub> / r<sub>srv</sub>\n     FCFS: first-come,first served\n     SSTF:shortest seek time first(出现starvation的概念)\n     SCAN:not an acronym\n     C-SCAN:circular SCAN\n     LOOK/C-LOOK\n\n     注意比较各种情况下的好坏\n  ## 课上和课后总结理解难点\n   1. flushing the pipeline: conditional branck instructions\n   2. clock rate=machine cycles per second\n   3. \n   4. \n\n\n\n  ## 疑惑\n  1. CPU里clock cycle的理解\n  2. 对于RAM里的两种memory ports: 1. 32-bits for data/address 2. 8-bit for OPCODE, \n      是说每个横格长都是40bit吗,每一个data前面都有8bit的OPCODE吗,那怎么行得通呢\n  3. byte-addressable & word-addressable:\n          byte..:every byte has its own address. (word:every word) ","slug":"Assembly","published":1,"updated":"2019-10-31T05:24:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqs0rf7g00070mwl7g6o302f","content":"<h1 id=\"五-performance-measurement-and-analysis\"><a href=\"#五-performance-measurement-and-analysis\" class=\"headerlink\" title=\"五 performance measurement and analysis\"></a>五 performance measurement and analysis</h1><span id=\"more\"></span>\n<h2 id=\"PPT提纲\"><a href=\"#PPT提纲\" class=\"headerlink\" title=\"PPT提纲\"></a>PPT提纲</h2><ol>\n<li><p>性能equation : 1. CPU time 2. Amdahl’s law</p>\n</li>\n<li><p>benchmarking: </p>\n</li>\n<li><p>性能optimisation:<br>RISA&amp;CISC(the two main kinds of ISA design)<br>  <strong>RISC</strong>:reduced instruction set computers   <strong>shorten time by reducing clock cycle</strong></p>\n<pre><code> simple instructions,few addressing mode\n</code></pre>\n<p>  <strong>CISC</strong>:complex isc <strong>reduce the number of instructions per program</strong></p>\n<pre><code> complex instructions,many addressing modes\n</code></pre>\n<p>Branch optimisation: pipeline hazards<br>delayed branching<br>Branch prediction</p>\n</li>\n<li><p>disk性能: 概念: utilisation U<sub>d</sub>=r<sub>req</sub> / r<sub>srv</sub><br>FCFS: first-come,first served<br>SSTF:shortest seek time first(出现starvation的概念)<br>SCAN:not an acronym<br>C-SCAN:circular SCAN<br>LOOK/C-LOOK</p>\n<p>注意比较各种情况下的好坏</p>\n<h2 id=\"课上和课后总结理解难点\"><a href=\"#课上和课后总结理解难点\" class=\"headerlink\" title=\"课上和课后总结理解难点\"></a>课上和课后总结理解难点</h2></li>\n<li><p>flushing the pipeline: conditional branck instructions</p>\n</li>\n<li><p>clock rate=machine cycles per second</p>\n</li>\n<li></li>\n<li></li>\n</ol>\n<h2 id=\"疑惑\"><a href=\"#疑惑\" class=\"headerlink\" title=\"疑惑\"></a>疑惑</h2><ol>\n<li>CPU里clock cycle的理解</li>\n<li>对于RAM里的两种memory ports: 1. 32-bits for data/address 2. 8-bit for OPCODE,<br> 是说每个横格长都是40bit吗,每一个data前面都有8bit的OPCODE吗,那怎么行得通呢</li>\n<li>byte-addressable &amp; word-addressable:<pre><code> byte..:every byte has its own address. (word:every word) \n</code></pre>\n</li>\n</ol>\n","site":{"data":{"styles":"body {\n  position: relative;\n  font-family: 'Lato', \"PingFang SC\", \"Microsoft YaHei\", sans-serif;\n  font-size: 14px;\n  line-height: 2;\n  color: #555;\n  background: #a5b8cc;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n/*更好的侧边滚动条*/\n::-webkit-scrollbar {\n  width: 10px;\n  height: 10px;\n}\n::-webkit-scrollbar-button {\n  width: 0;\n  height: 0;\n}\n::-webkit-scrollbar-button:start:increment,\n::-webkit-scrollbar-button:end:decrement {\n  display: none;\n}\n::-webkit-scrollbar-corner {\n  display: block;\n}\n::-webkit-scrollbar-thumb {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.2);\n}\n::-webkit-scrollbar-thumb:hover {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.5);\n}\n::-webkit-scrollbar-track,\n::-webkit-scrollbar-thumb {\n  border-right: 1px solid transparent;\n  border-left: 1px solid transparent;\n}\n::-webkit-scrollbar-track:hover {\n  background-color: rgba(0,0,0,0.15);\n}\n::-webkit-scrollbar-button:start {\n  width: 10px;\n  height: 10px;\n/*background: url(../images/scrollbar_arrow.png) no-repeat 0 0;*/\n/*可以添加滚动条样式*/\n}\n.post-sticky-flag {\n  font-size: inherit;\n  float: left;\n  color: #000;\n  cursor: help;\n  transition-duration: 0.2s;\n  transition-timing-function: ease-in-out;\n  transition-delay: 0s;\n}\n.post-sticky-flag:hover {\n  color: #07b39b;\n}\n.brand {\n  color: #ff6a6a;\n}\n.site-subtitle {\n  margin-top: 10px;\n  font-size: 13px;\n  color: #fff;\n}\n.busuanzi-value {\n  color: #1890ff;\n}\n* {\n  color: #35405b;\n}\n.site-meta {\n  margin: 0;\n  text-align: $site-meta-text-align;\nmobile()\n}\n.brand {\n  position: relative;\n  display: inline-block;\n  padding: 0 40px;\n  color: #ff6a6a;\n  background: $brand-bg;\n  border-bottom: none;\n}\n.brand:hover {\n  color: $brand-hover-color;\n}\n"}},"excerpt":"<h1 id=\"五-performance-measurement-and-analysis\"><a href=\"#五-performance-measurement-and-analysis\" class=\"headerlink\" title=\"五 performance measurement and analysis\"></a>五 performance measurement and analysis</h1>","more":"<h2 id=\"PPT提纲\"><a href=\"#PPT提纲\" class=\"headerlink\" title=\"PPT提纲\"></a>PPT提纲</h2><ol>\n<li><p>性能equation : 1. CPU time 2. Amdahl’s law</p>\n</li>\n<li><p>benchmarking: </p>\n</li>\n<li><p>性能optimisation:<br>RISA&amp;CISC(the two main kinds of ISA design)<br>  <strong>RISC</strong>:reduced instruction set computers   <strong>shorten time by reducing clock cycle</strong></p>\n<pre><code> simple instructions,few addressing mode\n</code></pre>\n<p>  <strong>CISC</strong>:complex isc <strong>reduce the number of instructions per program</strong></p>\n<pre><code> complex instructions,many addressing modes\n</code></pre>\n<p>Branch optimisation: pipeline hazards<br>delayed branching<br>Branch prediction</p>\n</li>\n<li><p>disk性能: 概念: utilisation U<sub>d</sub>=r<sub>req</sub> / r<sub>srv</sub><br>FCFS: first-come,first served<br>SSTF:shortest seek time first(出现starvation的概念)<br>SCAN:not an acronym<br>C-SCAN:circular SCAN<br>LOOK/C-LOOK</p>\n<p>注意比较各种情况下的好坏</p>\n<h2 id=\"课上和课后总结理解难点\"><a href=\"#课上和课后总结理解难点\" class=\"headerlink\" title=\"课上和课后总结理解难点\"></a>课上和课后总结理解难点</h2></li>\n<li><p>flushing the pipeline: conditional branck instructions</p>\n</li>\n<li><p>clock rate=machine cycles per second</p>\n</li>\n<li></li>\n<li></li>\n</ol>\n<h2 id=\"疑惑\"><a href=\"#疑惑\" class=\"headerlink\" title=\"疑惑\"></a>疑惑</h2><ol>\n<li>CPU里clock cycle的理解</li>\n<li>对于RAM里的两种memory ports: 1. 32-bits for data/address 2. 8-bit for OPCODE,<br> 是说每个横格长都是40bit吗,每一个data前面都有8bit的OPCODE吗,那怎么行得通呢</li>\n<li>byte-addressable &amp; word-addressable:<pre><code> byte..:every byte has its own address. (word:every word) \n</code></pre>\n</li>\n</ol>"},{"title":"CS","date":"2019-10-31T05:24:07.000Z","password":"password","top":200,"_content":"\n# 一\n## 冯诺依曼结构\n<!--more-->\n# 二 Assembly 1\n1. CPU\n    registers\n    ALU\n    control unit\n    data bus\n2. memory organisation\n    byte-addressable/word-addressable\n    RAM chips:random access memory  lengthXwidth\n3. I/O\n4. Bus\n5. Clocks\n    clock cycles\n    clock frequency(互为倒数)\n    CPU time\n6. Interrupts\n7. MARIE ISA\n     - load: load contents of address x into AC\n     - store: store the contents of AC at address X\n     - add\n     - subt\n     - input/output\n     - halt: 暂停\n     - skipcond: skip next instruction on condition\n     - jump X: load the value of X into PC\n   那么load store jump好像没区别啊?\n8. RTL: register transfer language\n# 三 Assembly 2\n1. fetch-decode-execute cycle\n    PC\n    MAR\n    IR\n    PC\n    MAR\n    MBR\n2. Interrupt processing:PPT上有两个流程图\n     flags register\n     maskable\n     Nonmaskable interrupts\n3. 注意PPT里一个简单program在computer里运行的流程图!\n4. Assemblers汇编器的工作流程:PPT!\n     1st pass: symbol table\n     2nd pass: the instructions are completed using the value from the **symbol table**.\n     完成将汇编语言变成机器语言的过程\n5. 一个汇编语言程序:main和mainloop是address label.?? main&mainloop的理解\n```\n      .equ SREG,0x3F\n      .org\n      main:   ldi r16,0\n              out SREG,r16\n      mainloop: rjmp mainloop\n```\n6. indirect addressing mode时:\n7. JnS:operates by storing the current PC value in the first address of the routine itself,then continue with the instruction following that.    Jump-and-store.\n    JumpI:return from the subroutine.\n8. Clear\n9.  if\n10. for/while\n11. Procedure invocation:f()\n12. 两个samole constructs!!\n# 四 instruction set architectures/pipelines\n1. instruction formats\n      1. little endian\n      big endian:正常的\n      比较: ///\n      1. how the CPU store data(3种)CPU的特殊内部存储结构\n        ![三种结构](https://wkretype.bdimg.com/retype/zoom/6a64416127d3240c8447ef13?pn=7&o=jpg_6&md5sum=1830449c7405e4dd2a4f0bb2c1b9644e&sign=df6cd0909c&png=126611-139487&jpg=805027-909057)\n          1. stack: instructions and operands都从stack里拿,先进后出\n              stack机器用1/0operand instructions\n              Push X, Pop X\n              Add/Mult\n          2. accumulator: operand在memory中\n          3. general purpose register: 比accumulator快,instructions更长:\n              Memory-memory:\n              register-memory:至少1个operand在register.\n              load-store:无operand在memory.   \n      2. 注意0123address machimes 的code(作业中有) \n2. instruction types\n\n3. addressing: where the **operand** is located.(a constant, a register, memory location)\n     immediate\n     direct\n     indirect\n     indexed:final=base+index\n4. instruction level Pipelining\n    S = NKt<sub>p</sub> / (K+N-1)t<sub>p</sub>\n    =K\n    pipeline hazards隐患\n\n# 五 performance measurement and analysis\n\n  ##  PPT提纲\n  1. 性能equation : 1. CPU time 2. Amdahl's law\n  2. benchmarking: \n  3. 性能optimisation: \n   RISA&CISC(the two main kinds of ISA design)指令集类型\n       **RISC**:reduced instruction set computers   **shorten time by reducing clock cycle**\n          simple instructions,few addressing mode\n       **CISC**:complex isc **reduce the number of instructions per program**\n          complex instructions,many addressing modes\n   Branch optimisation: pipeline hazards\n     delayed branching\n     Branch prediction\n  4. disk性能: 概念: utilisation U<sub>d</sub>=r<sub>req</sub> / r<sub>srv</sub>\n     FCFS: first-come,first served\n     SSTF:shortest seek time first(出现starvation的概念)\n     SCAN:not an acronym\n     C-SCAN:circular SCAN\n     LOOK/C-LOOK\n\n     注意比较各种情况下的好坏\n  ## 课上和课后总结理解难点\n\n# 七 二进制① JoshM\n  ## PPT提纲\n  1. negative numbers in binary: 几个概念: unsighed binary\n      formats: \n    1. signed magnitude  : MSB(the most significant bit) is a sign bit\\-\\-\\-0+&1-  源码\n        0的源码有两种:00000000&10000000,0的补码只有:00000000.\n    2. One's complement. 反码\n    3. Two's complement  补码(对于正数补码相同)\n          [X]<sub>补</sub> = X + M\n          这个M是mod M,模数M根据机器数的位数而定,位数为81则M=2<sup>8</sup>    \n      对于负数:\n      1.真值:将各位变反,then最低位+1\n      2.源码: 符号位不变,其余各位变反then最低位+1\n        11111111是-1的补码,10000000是-128的补码.0的补码只有一个:00000000.\n\n    4. 注意优缺点!!!(PPT17)\n    5. 各方式表示的范围(8bits)\n        unsigned binary: 0 \\-\\-\\-255\n        源码:-127(11111111)\\-\\-\\-+127(01111111)\n        反码:-127(11111111)\\-\\-\\-+127(01111111)\n        补码:-128(10000000)\\-\\-\\-+127(01111111)\n\n\n  ## 二进制运算法则\n    1. 10转2:减权定位\n             除基取余(直到商为0):从最下面的余数开始!\n       小数10转2:减权定位\n                乘基取整:从最上面的余数开始\n    2. 2转10: 按权相加(小数2转10同)\n    3. 十转八:除基取余比较简单\n\n# 八 binary ②\n## 上课 PPT\n1. unsigned: \n   1. unsigned addtion\\-\\-\\-**overflow**\n      - 是一个圈,从111再加就是000了\n      - incrementinf by one **?!?!** 那几句话没理解PPT第5页\n   2. subtraction (注意借位,需要练习)\n       - first check the minus...???\n   3. multipication\n       - 感觉像分列式,分几个part乘,最后加一起.\n   4. division: 很像十进制的除法方式.\n2. signed magnitude arithmetric:\n    1. 加\n     1. check the **sign** firstly\n     2. 如果**符号不同**: 比较绝对值大小\\-\\-\\-\\-\\-\\-用大的减小的\\-\\-\\-\\-\\-\\-用绝对值大的数的sign.\n     3. overflow 那个圈没理解\n    2. 减\n     1. x-y: - y如果是`负`\\-\\-\\-\\-\\-\\-变成**x+(-y)**\n             - y是`正`且x是`负`\\-\\-\\-\\-变成*-(-x+y)**\n             - y是`正`且x是`正`\\-\\-\\-\\-变成**(-y)+x**\n             - 但我第一次做作业,全错...\n3. one's complement arithmetic\n     1. 反码,加完多一位,再加(多么神奇...需要记忆以及与其它区分)\n4. two's complement arithmetic\n     1. 忽略加完后的第一位.\n     2. **detecting overflow**\n         新概念:carry和borrow\n         carry-in = carry-out\\-\\-\\-\\-\\-\\-no overflow\n         but这个是怎么计算的???\n\n5. Error detection and correction:\n     1. hamming distance:不同的位数\n     2. parity bit :要sufficient才能correct error,\n     3. code word : 存在的必要是什么\n     4. 是在bus上传递数据用的吗?那学过的存储模式pocode+address跟这个是什么关系?\n\n\n## 重难点解析\n1. 三个overflow的图一定要好好理解.\n2. ~~真值,补码,反码,源码之间的变化!!~~\n3. 补码overflow detect\n4. sign的减法和乘除\n\n\n\n# 九 floating-point binary\n## 预习+回看\n1. \n\n# 疑惑\n1. Assembly 2 里 JnS \n2. 那么load store jump好像没区别啊? \\-\\-\\-11.6\n3. 对于Assembly1作业中的第3题.醍醐灌顶:\n    A 1-bit address can address two words (0, 1).\n    A 2-bit address can address four words (00, 01, 10, 11).\n    A 3-bit address can address eight words (000, 001, 010, 011, 100, 101, 110, 111).\n    but![答案不一样](https://www.coursehero.com/doc-asset/bg/d6bc39dcf48520faf6897593e05282dad7676ae0/splits/v9.frq.clean/split-1-page-1-html-bg.jpg)\n4. **八\\-\\-\\-二进制2**需要加强理解和动手去做的:1. ~~三种表示二进制数的转化自己去操作~~. 2. 进制直接每种情况的转化去运算.   \\-\\-\\-11.13\n5. ~~对于加了sign的源码,为什么不是额外加一位呢,不影响原本的真值吗?~~  \\-\\-\\-11.13八课上\n6. 对于补码的运算,手机里的照片 理解和解惑. \\-\\-\\-11.13八课上\n7. \\-\\-\\-11.13晚自习 二进制转八进制,万一位数除不尽3怎么办?\n\n# 作业tutorial 的总结\n1. \\-\\-\\-11.13晚,week7,binary1.\n   - 减权定位终于知道了怎么做\n   - 小数10转2,乘积取整还不会\n   - 4个表示方法的范围需要记住\n2. \\-\\-\\-11.13晚,week8,binary2.\n   - unsigned减法必须是正数,因为它无负数\n   - unsigned除法中除不尽就用reminder余数\n   - signed的减法中,1110111-0010001为何overflow呢\n   - 0010101-0110011算不对啊,按照(-y)+x的规则啊\n   - signed的乘除法,全错.(我原本的方法是忽略头一位,再在最后加上头一位)\n   - 反码的加:01101+00100 为何overflow\n   - 补码的加: carry-in和carry-out和overflow detected 是什么\n   - 一定要记住正数的反码和补码都是它,运算的时候一定要仔细1+1变为0\n     ","source":"_posts/CS.md","raw":"---\ntitle: CS\ndate: 2019-10-31 13:24:07\ntags: \n- CS\ncategories: \n- 2019\n- KCL\n- CS\npassword: password\ntop: 200\n---\n\n# 一\n## 冯诺依曼结构\n<!--more-->\n# 二 Assembly 1\n1. CPU\n    registers\n    ALU\n    control unit\n    data bus\n2. memory organisation\n    byte-addressable/word-addressable\n    RAM chips:random access memory  lengthXwidth\n3. I/O\n4. Bus\n5. Clocks\n    clock cycles\n    clock frequency(互为倒数)\n    CPU time\n6. Interrupts\n7. MARIE ISA\n     - load: load contents of address x into AC\n     - store: store the contents of AC at address X\n     - add\n     - subt\n     - input/output\n     - halt: 暂停\n     - skipcond: skip next instruction on condition\n     - jump X: load the value of X into PC\n   那么load store jump好像没区别啊?\n8. RTL: register transfer language\n# 三 Assembly 2\n1. fetch-decode-execute cycle\n    PC\n    MAR\n    IR\n    PC\n    MAR\n    MBR\n2. Interrupt processing:PPT上有两个流程图\n     flags register\n     maskable\n     Nonmaskable interrupts\n3. 注意PPT里一个简单program在computer里运行的流程图!\n4. Assemblers汇编器的工作流程:PPT!\n     1st pass: symbol table\n     2nd pass: the instructions are completed using the value from the **symbol table**.\n     完成将汇编语言变成机器语言的过程\n5. 一个汇编语言程序:main和mainloop是address label.?? main&mainloop的理解\n```\n      .equ SREG,0x3F\n      .org\n      main:   ldi r16,0\n              out SREG,r16\n      mainloop: rjmp mainloop\n```\n6. indirect addressing mode时:\n7. JnS:operates by storing the current PC value in the first address of the routine itself,then continue with the instruction following that.    Jump-and-store.\n    JumpI:return from the subroutine.\n8. Clear\n9.  if\n10. for/while\n11. Procedure invocation:f()\n12. 两个samole constructs!!\n# 四 instruction set architectures/pipelines\n1. instruction formats\n      1. little endian\n      big endian:正常的\n      比较: ///\n      1. how the CPU store data(3种)CPU的特殊内部存储结构\n        ![三种结构](https://wkretype.bdimg.com/retype/zoom/6a64416127d3240c8447ef13?pn=7&o=jpg_6&md5sum=1830449c7405e4dd2a4f0bb2c1b9644e&sign=df6cd0909c&png=126611-139487&jpg=805027-909057)\n          1. stack: instructions and operands都从stack里拿,先进后出\n              stack机器用1/0operand instructions\n              Push X, Pop X\n              Add/Mult\n          2. accumulator: operand在memory中\n          3. general purpose register: 比accumulator快,instructions更长:\n              Memory-memory:\n              register-memory:至少1个operand在register.\n              load-store:无operand在memory.   \n      2. 注意0123address machimes 的code(作业中有) \n2. instruction types\n\n3. addressing: where the **operand** is located.(a constant, a register, memory location)\n     immediate\n     direct\n     indirect\n     indexed:final=base+index\n4. instruction level Pipelining\n    S = NKt<sub>p</sub> / (K+N-1)t<sub>p</sub>\n    =K\n    pipeline hazards隐患\n\n# 五 performance measurement and analysis\n\n  ##  PPT提纲\n  1. 性能equation : 1. CPU time 2. Amdahl's law\n  2. benchmarking: \n  3. 性能optimisation: \n   RISA&CISC(the two main kinds of ISA design)指令集类型\n       **RISC**:reduced instruction set computers   **shorten time by reducing clock cycle**\n          simple instructions,few addressing mode\n       **CISC**:complex isc **reduce the number of instructions per program**\n          complex instructions,many addressing modes\n   Branch optimisation: pipeline hazards\n     delayed branching\n     Branch prediction\n  4. disk性能: 概念: utilisation U<sub>d</sub>=r<sub>req</sub> / r<sub>srv</sub>\n     FCFS: first-come,first served\n     SSTF:shortest seek time first(出现starvation的概念)\n     SCAN:not an acronym\n     C-SCAN:circular SCAN\n     LOOK/C-LOOK\n\n     注意比较各种情况下的好坏\n  ## 课上和课后总结理解难点\n\n# 七 二进制① JoshM\n  ## PPT提纲\n  1. negative numbers in binary: 几个概念: unsighed binary\n      formats: \n    1. signed magnitude  : MSB(the most significant bit) is a sign bit\\-\\-\\-0+&1-  源码\n        0的源码有两种:00000000&10000000,0的补码只有:00000000.\n    2. One's complement. 反码\n    3. Two's complement  补码(对于正数补码相同)\n          [X]<sub>补</sub> = X + M\n          这个M是mod M,模数M根据机器数的位数而定,位数为81则M=2<sup>8</sup>    \n      对于负数:\n      1.真值:将各位变反,then最低位+1\n      2.源码: 符号位不变,其余各位变反then最低位+1\n        11111111是-1的补码,10000000是-128的补码.0的补码只有一个:00000000.\n\n    4. 注意优缺点!!!(PPT17)\n    5. 各方式表示的范围(8bits)\n        unsigned binary: 0 \\-\\-\\-255\n        源码:-127(11111111)\\-\\-\\-+127(01111111)\n        反码:-127(11111111)\\-\\-\\-+127(01111111)\n        补码:-128(10000000)\\-\\-\\-+127(01111111)\n\n\n  ## 二进制运算法则\n    1. 10转2:减权定位\n             除基取余(直到商为0):从最下面的余数开始!\n       小数10转2:减权定位\n                乘基取整:从最上面的余数开始\n    2. 2转10: 按权相加(小数2转10同)\n    3. 十转八:除基取余比较简单\n\n# 八 binary ②\n## 上课 PPT\n1. unsigned: \n   1. unsigned addtion\\-\\-\\-**overflow**\n      - 是一个圈,从111再加就是000了\n      - incrementinf by one **?!?!** 那几句话没理解PPT第5页\n   2. subtraction (注意借位,需要练习)\n       - first check the minus...???\n   3. multipication\n       - 感觉像分列式,分几个part乘,最后加一起.\n   4. division: 很像十进制的除法方式.\n2. signed magnitude arithmetric:\n    1. 加\n     1. check the **sign** firstly\n     2. 如果**符号不同**: 比较绝对值大小\\-\\-\\-\\-\\-\\-用大的减小的\\-\\-\\-\\-\\-\\-用绝对值大的数的sign.\n     3. overflow 那个圈没理解\n    2. 减\n     1. x-y: - y如果是`负`\\-\\-\\-\\-\\-\\-变成**x+(-y)**\n             - y是`正`且x是`负`\\-\\-\\-\\-变成*-(-x+y)**\n             - y是`正`且x是`正`\\-\\-\\-\\-变成**(-y)+x**\n             - 但我第一次做作业,全错...\n3. one's complement arithmetic\n     1. 反码,加完多一位,再加(多么神奇...需要记忆以及与其它区分)\n4. two's complement arithmetic\n     1. 忽略加完后的第一位.\n     2. **detecting overflow**\n         新概念:carry和borrow\n         carry-in = carry-out\\-\\-\\-\\-\\-\\-no overflow\n         but这个是怎么计算的???\n\n5. Error detection and correction:\n     1. hamming distance:不同的位数\n     2. parity bit :要sufficient才能correct error,\n     3. code word : 存在的必要是什么\n     4. 是在bus上传递数据用的吗?那学过的存储模式pocode+address跟这个是什么关系?\n\n\n## 重难点解析\n1. 三个overflow的图一定要好好理解.\n2. ~~真值,补码,反码,源码之间的变化!!~~\n3. 补码overflow detect\n4. sign的减法和乘除\n\n\n\n# 九 floating-point binary\n## 预习+回看\n1. \n\n# 疑惑\n1. Assembly 2 里 JnS \n2. 那么load store jump好像没区别啊? \\-\\-\\-11.6\n3. 对于Assembly1作业中的第3题.醍醐灌顶:\n    A 1-bit address can address two words (0, 1).\n    A 2-bit address can address four words (00, 01, 10, 11).\n    A 3-bit address can address eight words (000, 001, 010, 011, 100, 101, 110, 111).\n    but![答案不一样](https://www.coursehero.com/doc-asset/bg/d6bc39dcf48520faf6897593e05282dad7676ae0/splits/v9.frq.clean/split-1-page-1-html-bg.jpg)\n4. **八\\-\\-\\-二进制2**需要加强理解和动手去做的:1. ~~三种表示二进制数的转化自己去操作~~. 2. 进制直接每种情况的转化去运算.   \\-\\-\\-11.13\n5. ~~对于加了sign的源码,为什么不是额外加一位呢,不影响原本的真值吗?~~  \\-\\-\\-11.13八课上\n6. 对于补码的运算,手机里的照片 理解和解惑. \\-\\-\\-11.13八课上\n7. \\-\\-\\-11.13晚自习 二进制转八进制,万一位数除不尽3怎么办?\n\n# 作业tutorial 的总结\n1. \\-\\-\\-11.13晚,week7,binary1.\n   - 减权定位终于知道了怎么做\n   - 小数10转2,乘积取整还不会\n   - 4个表示方法的范围需要记住\n2. \\-\\-\\-11.13晚,week8,binary2.\n   - unsigned减法必须是正数,因为它无负数\n   - unsigned除法中除不尽就用reminder余数\n   - signed的减法中,1110111-0010001为何overflow呢\n   - 0010101-0110011算不对啊,按照(-y)+x的规则啊\n   - signed的乘除法,全错.(我原本的方法是忽略头一位,再在最后加上头一位)\n   - 反码的加:01101+00100 为何overflow\n   - 补码的加: carry-in和carry-out和overflow detected 是什么\n   - 一定要记住正数的反码和补码都是它,运算的时候一定要仔细1+1变为0\n     ","slug":"CS","published":1,"updated":"2019-10-31T05:24:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqs0rf7h00080mwlax4m9ptj","content":"<h1 id=\"一\"><a href=\"#一\" class=\"headerlink\" title=\"一\"></a>一</h1><h2 id=\"冯诺依曼结构\"><a href=\"#冯诺依曼结构\" class=\"headerlink\" title=\"冯诺依曼结构\"></a>冯诺依曼结构</h2><span id=\"more\"></span>\n<h1 id=\"二-Assembly-1\"><a href=\"#二-Assembly-1\" class=\"headerlink\" title=\"二 Assembly 1\"></a>二 Assembly 1</h1><ol>\n<li><p>CPU<br> registers<br> ALU<br> control unit<br> data bus</p>\n</li>\n<li><p>memory organisation<br> byte-addressable/word-addressable<br> RAM chips:random access memory  lengthXwidth</p>\n</li>\n<li><p>I/O</p>\n</li>\n<li><p>Bus</p>\n</li>\n<li><p>Clocks<br> clock cycles<br> clock frequency(互为倒数)<br> CPU time</p>\n</li>\n<li><p>Interrupts</p>\n</li>\n<li><p>MARIE ISA</p>\n<ul>\n<li>load: load contents of address x into AC</li>\n<li>store: store the contents of AC at address X</li>\n<li>add</li>\n<li>subt</li>\n<li>input/output</li>\n<li>halt: 暂停</li>\n<li>skipcond: skip next instruction on condition</li>\n<li>jump X: load the value of X into PC<br>那么load store jump好像没区别啊?</li>\n</ul>\n</li>\n<li><p>RTL: register transfer language</p>\n<h1 id=\"三-Assembly-2\"><a href=\"#三-Assembly-2\" class=\"headerlink\" title=\"三 Assembly 2\"></a>三 Assembly 2</h1></li>\n<li><p>fetch-decode-execute cycle<br> PC<br> MAR<br> IR<br> PC<br> MAR<br> MBR</p>\n</li>\n<li><p>Interrupt processing:PPT上有两个流程图<br>  flags register<br>  maskable<br>  Nonmaskable interrupts</p>\n</li>\n<li><p>注意PPT里一个简单program在computer里运行的流程图!</p>\n</li>\n<li><p>Assemblers汇编器的工作流程:PPT!<br>  1st pass: symbol table<br>  2nd pass: the instructions are completed using the value from the <strong>symbol table</strong>.<br>  完成将汇编语言变成机器语言的过程</p>\n</li>\n<li><p>一个汇编语言程序:main和mainloop是address label.?? main&amp;mainloop的理解</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">.equ</span> <span class=\"built_in\">SREG</span>,<span class=\"number\">0x3F</span></span><br><span class=\"line\"><span class=\"meta\">.org</span></span><br><span class=\"line\"><span class=\"symbol\">main:</span>   <span class=\"keyword\">ldi</span> <span class=\"built_in\">r16</span>,<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">out</span> <span class=\"built_in\">SREG</span>,<span class=\"built_in\">r16</span></span><br><span class=\"line\"><span class=\"symbol\">mainloop:</span> <span class=\"keyword\">rjmp</span> mainloop</span><br></pre></td></tr></table></figure></li>\n<li><p>indirect addressing mode时:</p>\n</li>\n<li><p>JnS:operates by storing the current PC value in the first address of the routine itself,then continue with the instruction following that.    Jump-and-store.<br> JumpI:return from the subroutine.</p>\n</li>\n<li><p>Clear</p>\n</li>\n<li><p> if</p>\n</li>\n<li><p>for/while</p>\n</li>\n<li><p>Procedure invocation:f()</p>\n</li>\n<li><p>两个samole constructs!!</p>\n<h1 id=\"四-instruction-set-architectures-pipelines\"><a href=\"#四-instruction-set-architectures-pipelines\" class=\"headerlink\" title=\"四 instruction set architectures/pipelines\"></a>四 instruction set architectures/pipelines</h1></li>\n<li><p>instruction formats</p>\n<ol>\n<li>little endian<br>big endian:正常的<br>比较: ///</li>\n<li>how the CPU store data(3种)CPU的特殊内部存储结构<br><img src=\"https://wkretype.bdimg.com/retype/zoom/6a64416127d3240c8447ef13?pn=7&o=jpg_6&md5sum=1830449c7405e4dd2a4f0bb2c1b9644e&sign=df6cd0909c&png=126611-139487&jpg=805027-909057\" alt=\"三种结构\"><ol>\n<li>stack: instructions and operands都从stack里拿,先进后出<br> stack机器用1/0operand instructions<br> Push X, Pop X<br> Add/Mult</li>\n<li>accumulator: operand在memory中</li>\n<li>general purpose register: 比accumulator快,instructions更长:<br> Memory-memory:<br> register-memory:至少1个operand在register.<br> load-store:无operand在memory.   </li>\n</ol>\n</li>\n<li>注意0123address machimes 的code(作业中有) </li>\n</ol>\n</li>\n<li><p>instruction types</p>\n</li>\n<li><p>addressing: where the <strong>operand</strong> is located.(a constant, a register, memory location)<br>  immediate<br>  direct<br>  indirect<br>  indexed:final=base+index</p>\n</li>\n<li><p>instruction level Pipelining<br> S = NKt<sub>p</sub> / (K+N-1)t<sub>p</sub><br> =K<br> pipeline hazards隐患</p>\n</li>\n</ol>\n<h1 id=\"五-performance-measurement-and-analysis\"><a href=\"#五-performance-measurement-and-analysis\" class=\"headerlink\" title=\"五 performance measurement and analysis\"></a>五 performance measurement and analysis</h1><h2 id=\"PPT提纲\"><a href=\"#PPT提纲\" class=\"headerlink\" title=\"PPT提纲\"></a>PPT提纲</h2><ol>\n<li><p>性能equation : 1. CPU time 2. Amdahl’s law</p>\n</li>\n<li><p>benchmarking: </p>\n</li>\n<li><p>性能optimisation:<br>RISA&amp;CISC(the two main kinds of ISA design)指令集类型<br>  <strong>RISC</strong>:reduced instruction set computers   <strong>shorten time by reducing clock cycle</strong></p>\n<pre><code> simple instructions,few addressing mode\n</code></pre>\n<p>  <strong>CISC</strong>:complex isc <strong>reduce the number of instructions per program</strong></p>\n<pre><code> complex instructions,many addressing modes\n</code></pre>\n<p>Branch optimisation: pipeline hazards<br>delayed branching<br>Branch prediction</p>\n</li>\n<li><p>disk性能: 概念: utilisation U<sub>d</sub>=r<sub>req</sub> / r<sub>srv</sub><br>FCFS: first-come,first served<br>SSTF:shortest seek time first(出现starvation的概念)<br>SCAN:not an acronym<br>C-SCAN:circular SCAN<br>LOOK/C-LOOK</p>\n<p>注意比较各种情况下的好坏</p>\n<h2 id=\"课上和课后总结理解难点\"><a href=\"#课上和课后总结理解难点\" class=\"headerlink\" title=\"课上和课后总结理解难点\"></a>课上和课后总结理解难点</h2></li>\n</ol>\n<h1 id=\"七-二进制①-JoshM\"><a href=\"#七-二进制①-JoshM\" class=\"headerlink\" title=\"七 二进制① JoshM\"></a>七 二进制① JoshM</h1><h2 id=\"PPT提纲-1\"><a href=\"#PPT提纲-1\" class=\"headerlink\" title=\"PPT提纲\"></a>PPT提纲</h2><ol>\n<li>negative numbers in binary: 几个概念: unsighed binary<br> formats:     1. signed magnitude  : MSB(the most significant bit) is a sign bit---0+&amp;1-  源码<br>   0的源码有两种:00000000&amp;10000000,0的补码只有:00000000.    2. One’s complement. 反码    3. Two’s complement  补码(对于正数补码相同)<pre><code> [X]&lt;sub&gt;补&lt;/sub&gt; = X + M\n 这个M是mod M,模数M根据机器数的位数而定,位数为81则M=2&lt;sup&gt;8&lt;/sup&gt;    \n</code></pre>\n 对于负数:<br> 1.真值:将各位变反,then最低位+1<br> 2.源码: 符号位不变,其余各位变反then最低位+1<br>   11111111是-1的补码,10000000是-128的补码.0的补码只有一个:00000000.</li>\n</ol>\n<pre><code>4. 注意优缺点!!!(PPT17)\n5. 各方式表示的范围(8bits)\n    unsigned binary: 0 \\-\\-\\-255\n    源码:-127(11111111)\\-\\-\\-+127(01111111)\n    反码:-127(11111111)\\-\\-\\-+127(01111111)\n    补码:-128(10000000)\\-\\-\\-+127(01111111)\n</code></pre>\n<h2 id=\"二进制运算法则\"><a href=\"#二进制运算法则\" class=\"headerlink\" title=\"二进制运算法则\"></a>二进制运算法则</h2><pre><code>1. 10转2:减权定位\n         除基取余(直到商为0):从最下面的余数开始!\n   小数10转2:减权定位\n            乘基取整:从最上面的余数开始\n2. 2转10: 按权相加(小数2转10同)\n3. 十转八:除基取余比较简单\n</code></pre>\n<h1 id=\"八-binary-②\"><a href=\"#八-binary-②\" class=\"headerlink\" title=\"八 binary ②\"></a>八 binary ②</h1><h2 id=\"上课-PPT\"><a href=\"#上课-PPT\" class=\"headerlink\" title=\"上课 PPT\"></a>上课 PPT</h2><ol>\n<li><p>unsigned: </p>\n<ol>\n<li>unsigned addtion---<strong>overflow</strong><ul>\n<li>是一个圈,从111再加就是000了</li>\n<li>incrementinf by one <strong>?!?!</strong> 那几句话没理解PPT第5页</li>\n</ul>\n</li>\n<li>subtraction (注意借位,需要练习)<ul>\n<li>first check the minus…???</li>\n</ul>\n</li>\n<li>multipication<ul>\n<li>感觉像分列式,分几个part乘,最后加一起.</li>\n</ul>\n</li>\n<li>division: 很像十进制的除法方式.</li>\n</ol>\n</li>\n<li><p>signed magnitude arithmetric:</p>\n<ol>\n<li>加</li>\n<li>check the <strong>sign</strong> firstly</li>\n<li>如果<strong>符号不同</strong>: 比较绝对值大小------用大的减小的------用绝对值大的数的sign.</li>\n<li>overflow 那个圈没理解</li>\n<li>减</li>\n<li>x-y: - y如果是<code>负</code>------变成<strong>x+(-y)</strong><pre><code> - y是`正`且x是`负`\\-\\-\\-\\-变成*-(-x+y)**\n - y是`正`且x是`正`\\-\\-\\-\\-变成**(-y)+x**\n - 但我第一次做作业,全错...\n</code></pre>\n</li>\n</ol>\n</li>\n<li><p>one’s complement arithmetic</p>\n<ol>\n<li>反码,加完多一位,再加(多么神奇…需要记忆以及与其它区分)</li>\n</ol>\n</li>\n<li><p>two’s complement arithmetic</p>\n<ol>\n<li>忽略加完后的第一位.</li>\n<li><strong>detecting overflow</strong><br> 新概念:carry和borrow<br> carry-in = carry-out------no overflow<br> but这个是怎么计算的???</li>\n</ol>\n</li>\n<li><p>Error detection and correction:</p>\n<ol>\n<li>hamming distance:不同的位数</li>\n<li>parity bit :要sufficient才能correct error,</li>\n<li>code word : 存在的必要是什么</li>\n<li>是在bus上传递数据用的吗?那学过的存储模式pocode+address跟这个是什么关系?</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"重难点解析\"><a href=\"#重难点解析\" class=\"headerlink\" title=\"重难点解析\"></a>重难点解析</h2><ol>\n<li>三个overflow的图一定要好好理解.</li>\n<li><del>真值,补码,反码,源码之间的变化!!</del></li>\n<li>补码overflow detect</li>\n<li>sign的减法和乘除</li>\n</ol>\n<h1 id=\"九-floating-point-binary\"><a href=\"#九-floating-point-binary\" class=\"headerlink\" title=\"九 floating-point binary\"></a>九 floating-point binary</h1><h2 id=\"预习-回看\"><a href=\"#预习-回看\" class=\"headerlink\" title=\"预习+回看\"></a>预习+回看</h2><ol>\n<li></li>\n</ol>\n<h1 id=\"疑惑\"><a href=\"#疑惑\" class=\"headerlink\" title=\"疑惑\"></a>疑惑</h1><ol>\n<li>Assembly 2 里 JnS </li>\n<li>那么load store jump好像没区别啊? ---11.6</li>\n<li>对于Assembly1作业中的第3题.醍醐灌顶:<br> A 1-bit address can address two words (0, 1).<br> A 2-bit address can address four words (00, 01, 10, 11).<br> A 3-bit address can address eight words (000, 001, 010, 011, 100, 101, 110, 111).<br> but<img src=\"https://www.coursehero.com/doc-asset/bg/d6bc39dcf48520faf6897593e05282dad7676ae0/splits/v9.frq.clean/split-1-page-1-html-bg.jpg\" alt=\"答案不一样\"></li>\n<li><strong>八---二进制2</strong>需要加强理解和动手去做的:1. <del>三种表示二进制数的转化自己去操作</del>. 2. 进制直接每种情况的转化去运算.   ---11.13</li>\n<li><del>对于加了sign的源码,为什么不是额外加一位呢,不影响原本的真值吗?</del>  ---11.13八课上</li>\n<li>对于补码的运算,手机里的照片 理解和解惑. ---11.13八课上</li>\n<li>---11.13晚自习 二进制转八进制,万一位数除不尽3怎么办?</li>\n</ol>\n<h1 id=\"作业tutorial-的总结\"><a href=\"#作业tutorial-的总结\" class=\"headerlink\" title=\"作业tutorial 的总结\"></a>作业tutorial 的总结</h1><ol>\n<li>---11.13晚,week7,binary1.<ul>\n<li>减权定位终于知道了怎么做</li>\n<li>小数10转2,乘积取整还不会</li>\n<li>4个表示方法的范围需要记住</li>\n</ul>\n</li>\n<li>---11.13晚,week8,binary2.<ul>\n<li>unsigned减法必须是正数,因为它无负数</li>\n<li>unsigned除法中除不尽就用reminder余数</li>\n<li>signed的减法中,1110111-0010001为何overflow呢</li>\n<li>0010101-0110011算不对啊,按照(-y)+x的规则啊</li>\n<li>signed的乘除法,全错.(我原本的方法是忽略头一位,再在最后加上头一位)</li>\n<li>反码的加:01101+00100 为何overflow</li>\n<li>补码的加: carry-in和carry-out和overflow detected 是什么</li>\n<li>一定要记住正数的反码和补码都是它,运算的时候一定要仔细1+1变为0</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{"styles":"body {\n  position: relative;\n  font-family: 'Lato', \"PingFang SC\", \"Microsoft YaHei\", sans-serif;\n  font-size: 14px;\n  line-height: 2;\n  color: #555;\n  background: #a5b8cc;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n/*更好的侧边滚动条*/\n::-webkit-scrollbar {\n  width: 10px;\n  height: 10px;\n}\n::-webkit-scrollbar-button {\n  width: 0;\n  height: 0;\n}\n::-webkit-scrollbar-button:start:increment,\n::-webkit-scrollbar-button:end:decrement {\n  display: none;\n}\n::-webkit-scrollbar-corner {\n  display: block;\n}\n::-webkit-scrollbar-thumb {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.2);\n}\n::-webkit-scrollbar-thumb:hover {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.5);\n}\n::-webkit-scrollbar-track,\n::-webkit-scrollbar-thumb {\n  border-right: 1px solid transparent;\n  border-left: 1px solid transparent;\n}\n::-webkit-scrollbar-track:hover {\n  background-color: rgba(0,0,0,0.15);\n}\n::-webkit-scrollbar-button:start {\n  width: 10px;\n  height: 10px;\n/*background: url(../images/scrollbar_arrow.png) no-repeat 0 0;*/\n/*可以添加滚动条样式*/\n}\n.post-sticky-flag {\n  font-size: inherit;\n  float: left;\n  color: #000;\n  cursor: help;\n  transition-duration: 0.2s;\n  transition-timing-function: ease-in-out;\n  transition-delay: 0s;\n}\n.post-sticky-flag:hover {\n  color: #07b39b;\n}\n.brand {\n  color: #ff6a6a;\n}\n.site-subtitle {\n  margin-top: 10px;\n  font-size: 13px;\n  color: #fff;\n}\n.busuanzi-value {\n  color: #1890ff;\n}\n* {\n  color: #35405b;\n}\n.site-meta {\n  margin: 0;\n  text-align: $site-meta-text-align;\nmobile()\n}\n.brand {\n  position: relative;\n  display: inline-block;\n  padding: 0 40px;\n  color: #ff6a6a;\n  background: $brand-bg;\n  border-bottom: none;\n}\n.brand:hover {\n  color: $brand-hover-color;\n}\n"}},"excerpt":"<h1 id=\"一\"><a href=\"#一\" class=\"headerlink\" title=\"一\"></a>一</h1><h2 id=\"冯诺依曼结构\"><a href=\"#冯诺依曼结构\" class=\"headerlink\" title=\"冯诺依曼结构\"></a>冯诺依曼结构</h2>","more":"<h1 id=\"二-Assembly-1\"><a href=\"#二-Assembly-1\" class=\"headerlink\" title=\"二 Assembly 1\"></a>二 Assembly 1</h1><ol>\n<li><p>CPU<br> registers<br> ALU<br> control unit<br> data bus</p>\n</li>\n<li><p>memory organisation<br> byte-addressable/word-addressable<br> RAM chips:random access memory  lengthXwidth</p>\n</li>\n<li><p>I/O</p>\n</li>\n<li><p>Bus</p>\n</li>\n<li><p>Clocks<br> clock cycles<br> clock frequency(互为倒数)<br> CPU time</p>\n</li>\n<li><p>Interrupts</p>\n</li>\n<li><p>MARIE ISA</p>\n<ul>\n<li>load: load contents of address x into AC</li>\n<li>store: store the contents of AC at address X</li>\n<li>add</li>\n<li>subt</li>\n<li>input/output</li>\n<li>halt: 暂停</li>\n<li>skipcond: skip next instruction on condition</li>\n<li>jump X: load the value of X into PC<br>那么load store jump好像没区别啊?</li>\n</ul>\n</li>\n<li><p>RTL: register transfer language</p>\n<h1 id=\"三-Assembly-2\"><a href=\"#三-Assembly-2\" class=\"headerlink\" title=\"三 Assembly 2\"></a>三 Assembly 2</h1></li>\n<li><p>fetch-decode-execute cycle<br> PC<br> MAR<br> IR<br> PC<br> MAR<br> MBR</p>\n</li>\n<li><p>Interrupt processing:PPT上有两个流程图<br>  flags register<br>  maskable<br>  Nonmaskable interrupts</p>\n</li>\n<li><p>注意PPT里一个简单program在computer里运行的流程图!</p>\n</li>\n<li><p>Assemblers汇编器的工作流程:PPT!<br>  1st pass: symbol table<br>  2nd pass: the instructions are completed using the value from the <strong>symbol table</strong>.<br>  完成将汇编语言变成机器语言的过程</p>\n</li>\n<li><p>一个汇编语言程序:main和mainloop是address label.?? main&amp;mainloop的理解</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">.equ</span> <span class=\"built_in\">SREG</span>,<span class=\"number\">0x3F</span></span><br><span class=\"line\"><span class=\"meta\">.org</span></span><br><span class=\"line\"><span class=\"symbol\">main:</span>   <span class=\"keyword\">ldi</span> <span class=\"built_in\">r16</span>,<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">out</span> <span class=\"built_in\">SREG</span>,<span class=\"built_in\">r16</span></span><br><span class=\"line\"><span class=\"symbol\">mainloop:</span> <span class=\"keyword\">rjmp</span> mainloop</span><br></pre></td></tr></table></figure></li>\n<li><p>indirect addressing mode时:</p>\n</li>\n<li><p>JnS:operates by storing the current PC value in the first address of the routine itself,then continue with the instruction following that.    Jump-and-store.<br> JumpI:return from the subroutine.</p>\n</li>\n<li><p>Clear</p>\n</li>\n<li><p> if</p>\n</li>\n<li><p>for/while</p>\n</li>\n<li><p>Procedure invocation:f()</p>\n</li>\n<li><p>两个samole constructs!!</p>\n<h1 id=\"四-instruction-set-architectures-pipelines\"><a href=\"#四-instruction-set-architectures-pipelines\" class=\"headerlink\" title=\"四 instruction set architectures/pipelines\"></a>四 instruction set architectures/pipelines</h1></li>\n<li><p>instruction formats</p>\n<ol>\n<li>little endian<br>big endian:正常的<br>比较: ///</li>\n<li>how the CPU store data(3种)CPU的特殊内部存储结构<br><img src=\"https://wkretype.bdimg.com/retype/zoom/6a64416127d3240c8447ef13?pn=7&o=jpg_6&md5sum=1830449c7405e4dd2a4f0bb2c1b9644e&sign=df6cd0909c&png=126611-139487&jpg=805027-909057\" alt=\"三种结构\"><ol>\n<li>stack: instructions and operands都从stack里拿,先进后出<br> stack机器用1/0operand instructions<br> Push X, Pop X<br> Add/Mult</li>\n<li>accumulator: operand在memory中</li>\n<li>general purpose register: 比accumulator快,instructions更长:<br> Memory-memory:<br> register-memory:至少1个operand在register.<br> load-store:无operand在memory.   </li>\n</ol>\n</li>\n<li>注意0123address machimes 的code(作业中有) </li>\n</ol>\n</li>\n<li><p>instruction types</p>\n</li>\n<li><p>addressing: where the <strong>operand</strong> is located.(a constant, a register, memory location)<br>  immediate<br>  direct<br>  indirect<br>  indexed:final=base+index</p>\n</li>\n<li><p>instruction level Pipelining<br> S = NKt<sub>p</sub> / (K+N-1)t<sub>p</sub><br> =K<br> pipeline hazards隐患</p>\n</li>\n</ol>\n<h1 id=\"五-performance-measurement-and-analysis\"><a href=\"#五-performance-measurement-and-analysis\" class=\"headerlink\" title=\"五 performance measurement and analysis\"></a>五 performance measurement and analysis</h1><h2 id=\"PPT提纲\"><a href=\"#PPT提纲\" class=\"headerlink\" title=\"PPT提纲\"></a>PPT提纲</h2><ol>\n<li><p>性能equation : 1. CPU time 2. Amdahl’s law</p>\n</li>\n<li><p>benchmarking: </p>\n</li>\n<li><p>性能optimisation:<br>RISA&amp;CISC(the two main kinds of ISA design)指令集类型<br>  <strong>RISC</strong>:reduced instruction set computers   <strong>shorten time by reducing clock cycle</strong></p>\n<pre><code> simple instructions,few addressing mode\n</code></pre>\n<p>  <strong>CISC</strong>:complex isc <strong>reduce the number of instructions per program</strong></p>\n<pre><code> complex instructions,many addressing modes\n</code></pre>\n<p>Branch optimisation: pipeline hazards<br>delayed branching<br>Branch prediction</p>\n</li>\n<li><p>disk性能: 概念: utilisation U<sub>d</sub>=r<sub>req</sub> / r<sub>srv</sub><br>FCFS: first-come,first served<br>SSTF:shortest seek time first(出现starvation的概念)<br>SCAN:not an acronym<br>C-SCAN:circular SCAN<br>LOOK/C-LOOK</p>\n<p>注意比较各种情况下的好坏</p>\n<h2 id=\"课上和课后总结理解难点\"><a href=\"#课上和课后总结理解难点\" class=\"headerlink\" title=\"课上和课后总结理解难点\"></a>课上和课后总结理解难点</h2></li>\n</ol>\n<h1 id=\"七-二进制①-JoshM\"><a href=\"#七-二进制①-JoshM\" class=\"headerlink\" title=\"七 二进制① JoshM\"></a>七 二进制① JoshM</h1><h2 id=\"PPT提纲-1\"><a href=\"#PPT提纲-1\" class=\"headerlink\" title=\"PPT提纲\"></a>PPT提纲</h2><ol>\n<li>negative numbers in binary: 几个概念: unsighed binary<br> formats:     1. signed magnitude  : MSB(the most significant bit) is a sign bit---0+&amp;1-  源码<br>   0的源码有两种:00000000&amp;10000000,0的补码只有:00000000.    2. One’s complement. 反码    3. Two’s complement  补码(对于正数补码相同)<pre><code> [X]&lt;sub&gt;补&lt;/sub&gt; = X + M\n 这个M是mod M,模数M根据机器数的位数而定,位数为81则M=2&lt;sup&gt;8&lt;/sup&gt;    \n</code></pre>\n 对于负数:<br> 1.真值:将各位变反,then最低位+1<br> 2.源码: 符号位不变,其余各位变反then最低位+1<br>   11111111是-1的补码,10000000是-128的补码.0的补码只有一个:00000000.</li>\n</ol>\n<pre><code>4. 注意优缺点!!!(PPT17)\n5. 各方式表示的范围(8bits)\n    unsigned binary: 0 \\-\\-\\-255\n    源码:-127(11111111)\\-\\-\\-+127(01111111)\n    反码:-127(11111111)\\-\\-\\-+127(01111111)\n    补码:-128(10000000)\\-\\-\\-+127(01111111)\n</code></pre>\n<h2 id=\"二进制运算法则\"><a href=\"#二进制运算法则\" class=\"headerlink\" title=\"二进制运算法则\"></a>二进制运算法则</h2><pre><code>1. 10转2:减权定位\n         除基取余(直到商为0):从最下面的余数开始!\n   小数10转2:减权定位\n            乘基取整:从最上面的余数开始\n2. 2转10: 按权相加(小数2转10同)\n3. 十转八:除基取余比较简单\n</code></pre>\n<h1 id=\"八-binary-②\"><a href=\"#八-binary-②\" class=\"headerlink\" title=\"八 binary ②\"></a>八 binary ②</h1><h2 id=\"上课-PPT\"><a href=\"#上课-PPT\" class=\"headerlink\" title=\"上课 PPT\"></a>上课 PPT</h2><ol>\n<li><p>unsigned: </p>\n<ol>\n<li>unsigned addtion---<strong>overflow</strong><ul>\n<li>是一个圈,从111再加就是000了</li>\n<li>incrementinf by one <strong>?!?!</strong> 那几句话没理解PPT第5页</li>\n</ul>\n</li>\n<li>subtraction (注意借位,需要练习)<ul>\n<li>first check the minus…???</li>\n</ul>\n</li>\n<li>multipication<ul>\n<li>感觉像分列式,分几个part乘,最后加一起.</li>\n</ul>\n</li>\n<li>division: 很像十进制的除法方式.</li>\n</ol>\n</li>\n<li><p>signed magnitude arithmetric:</p>\n<ol>\n<li>加</li>\n<li>check the <strong>sign</strong> firstly</li>\n<li>如果<strong>符号不同</strong>: 比较绝对值大小------用大的减小的------用绝对值大的数的sign.</li>\n<li>overflow 那个圈没理解</li>\n<li>减</li>\n<li>x-y: - y如果是<code>负</code>------变成<strong>x+(-y)</strong><pre><code> - y是`正`且x是`负`\\-\\-\\-\\-变成*-(-x+y)**\n - y是`正`且x是`正`\\-\\-\\-\\-变成**(-y)+x**\n - 但我第一次做作业,全错...\n</code></pre>\n</li>\n</ol>\n</li>\n<li><p>one’s complement arithmetic</p>\n<ol>\n<li>反码,加完多一位,再加(多么神奇…需要记忆以及与其它区分)</li>\n</ol>\n</li>\n<li><p>two’s complement arithmetic</p>\n<ol>\n<li>忽略加完后的第一位.</li>\n<li><strong>detecting overflow</strong><br> 新概念:carry和borrow<br> carry-in = carry-out------no overflow<br> but这个是怎么计算的???</li>\n</ol>\n</li>\n<li><p>Error detection and correction:</p>\n<ol>\n<li>hamming distance:不同的位数</li>\n<li>parity bit :要sufficient才能correct error,</li>\n<li>code word : 存在的必要是什么</li>\n<li>是在bus上传递数据用的吗?那学过的存储模式pocode+address跟这个是什么关系?</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"重难点解析\"><a href=\"#重难点解析\" class=\"headerlink\" title=\"重难点解析\"></a>重难点解析</h2><ol>\n<li>三个overflow的图一定要好好理解.</li>\n<li><del>真值,补码,反码,源码之间的变化!!</del></li>\n<li>补码overflow detect</li>\n<li>sign的减法和乘除</li>\n</ol>\n<h1 id=\"九-floating-point-binary\"><a href=\"#九-floating-point-binary\" class=\"headerlink\" title=\"九 floating-point binary\"></a>九 floating-point binary</h1><h2 id=\"预习-回看\"><a href=\"#预习-回看\" class=\"headerlink\" title=\"预习+回看\"></a>预习+回看</h2><ol>\n<li></li>\n</ol>\n<h1 id=\"疑惑\"><a href=\"#疑惑\" class=\"headerlink\" title=\"疑惑\"></a>疑惑</h1><ol>\n<li>Assembly 2 里 JnS </li>\n<li>那么load store jump好像没区别啊? ---11.6</li>\n<li>对于Assembly1作业中的第3题.醍醐灌顶:<br> A 1-bit address can address two words (0, 1).<br> A 2-bit address can address four words (00, 01, 10, 11).<br> A 3-bit address can address eight words (000, 001, 010, 011, 100, 101, 110, 111).<br> but<img src=\"https://www.coursehero.com/doc-asset/bg/d6bc39dcf48520faf6897593e05282dad7676ae0/splits/v9.frq.clean/split-1-page-1-html-bg.jpg\" alt=\"答案不一样\"></li>\n<li><strong>八---二进制2</strong>需要加强理解和动手去做的:1. <del>三种表示二进制数的转化自己去操作</del>. 2. 进制直接每种情况的转化去运算.   ---11.13</li>\n<li><del>对于加了sign的源码,为什么不是额外加一位呢,不影响原本的真值吗?</del>  ---11.13八课上</li>\n<li>对于补码的运算,手机里的照片 理解和解惑. ---11.13八课上</li>\n<li>---11.13晚自习 二进制转八进制,万一位数除不尽3怎么办?</li>\n</ol>\n<h1 id=\"作业tutorial-的总结\"><a href=\"#作业tutorial-的总结\" class=\"headerlink\" title=\"作业tutorial 的总结\"></a>作业tutorial 的总结</h1><ol>\n<li>---11.13晚,week7,binary1.<ul>\n<li>减权定位终于知道了怎么做</li>\n<li>小数10转2,乘积取整还不会</li>\n<li>4个表示方法的范围需要记住</li>\n</ul>\n</li>\n<li>---11.13晚,week8,binary2.<ul>\n<li>unsigned减法必须是正数,因为它无负数</li>\n<li>unsigned除法中除不尽就用reminder余数</li>\n<li>signed的减法中,1110111-0010001为何overflow呢</li>\n<li>0010101-0110011算不对啊,按照(-y)+x的规则啊</li>\n<li>signed的乘除法,全错.(我原本的方法是忽略头一位,再在最后加上头一位)</li>\n<li>反码的加:01101+00100 为何overflow</li>\n<li>补码的加: carry-in和carry-out和overflow detected 是什么</li>\n<li>一定要记住正数的反码和补码都是它,运算的时候一定要仔细1+1变为0</li>\n</ul>\n</li>\n</ol>"},{"title":"MatLab","date":"2019-10-30T11:50:22.000Z","password":"password","top":false,"_content":"# 疑问\n<!--more-->\n\n## 创建x轴的数组\ns = linspace()\n与直接\\[ : : \\]\n## 绘制函数图象时\nsyms变量--fplot\n与直接设置x和y对应数组--plot\n## 设置坐标轴范围时\nxlim(xmin ymin)和ylim()\n与aixs\\[xmin xmax ymin ymax\\]\n是一个道理\n## 绘制图像的几个函数\n- plot()\n- line():画直线型\n- polar():极坐标下绘曲线\n## 求函数一段范围内的极值\n- lab7\n- 感觉有几种方法\n- 画分段函数的几种方法:正常拆分开;@x\n\n# 矩阵\n## 创建矩阵的方法\n1. B=a:h:b;  其中a,b代表一维矩阵（向量）的区间，h为步宽\n2. zeros(行数,列数).ones,rand同.\n3. \n4. ","source":"_posts/MatLab.md","raw":"---\ntitle: MatLab\ndate: 2019-10-30 19:50:22\ntags: \n- MatLab\ncategories:\n- 2019\n- KCL\n- MatLab\npassword: password\ntop: false\n---\n# 疑问\n<!--more-->\n\n## 创建x轴的数组\ns = linspace()\n与直接\\[ : : \\]\n## 绘制函数图象时\nsyms变量--fplot\n与直接设置x和y对应数组--plot\n## 设置坐标轴范围时\nxlim(xmin ymin)和ylim()\n与aixs\\[xmin xmax ymin ymax\\]\n是一个道理\n## 绘制图像的几个函数\n- plot()\n- line():画直线型\n- polar():极坐标下绘曲线\n## 求函数一段范围内的极值\n- lab7\n- 感觉有几种方法\n- 画分段函数的几种方法:正常拆分开;@x\n\n# 矩阵\n## 创建矩阵的方法\n1. B=a:h:b;  其中a,b代表一维矩阵（向量）的区间，h为步宽\n2. zeros(行数,列数).ones,rand同.\n3. \n4. ","slug":"MatLab","published":1,"updated":"2019-10-30T11:50:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqs0rf7i00090mwl1z2hdng6","content":"<h1 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h1><span id=\"more\"></span>\n\n<h2 id=\"创建x轴的数组\"><a href=\"#创建x轴的数组\" class=\"headerlink\" title=\"创建x轴的数组\"></a>创建x轴的数组</h2><p>s = linspace()<br>与直接[ : : ]</p>\n<h2 id=\"绘制函数图象时\"><a href=\"#绘制函数图象时\" class=\"headerlink\" title=\"绘制函数图象时\"></a>绘制函数图象时</h2><p>syms变量–fplot<br>与直接设置x和y对应数组–plot</p>\n<h2 id=\"设置坐标轴范围时\"><a href=\"#设置坐标轴范围时\" class=\"headerlink\" title=\"设置坐标轴范围时\"></a>设置坐标轴范围时</h2><p>xlim(xmin ymin)和ylim()<br>与aixs[xmin xmax ymin ymax]<br>是一个道理</p>\n<h2 id=\"绘制图像的几个函数\"><a href=\"#绘制图像的几个函数\" class=\"headerlink\" title=\"绘制图像的几个函数\"></a>绘制图像的几个函数</h2><ul>\n<li>plot()</li>\n<li>line():画直线型</li>\n<li>polar():极坐标下绘曲线<h2 id=\"求函数一段范围内的极值\"><a href=\"#求函数一段范围内的极值\" class=\"headerlink\" title=\"求函数一段范围内的极值\"></a>求函数一段范围内的极值</h2></li>\n<li>lab7</li>\n<li>感觉有几种方法</li>\n<li>画分段函数的几种方法:正常拆分开;@x</li>\n</ul>\n<h1 id=\"矩阵\"><a href=\"#矩阵\" class=\"headerlink\" title=\"矩阵\"></a>矩阵</h1><h2 id=\"创建矩阵的方法\"><a href=\"#创建矩阵的方法\" class=\"headerlink\" title=\"创建矩阵的方法\"></a>创建矩阵的方法</h2><ol>\n<li>B=a:h:b;  其中a,b代表一维矩阵（向量）的区间，h为步宽</li>\n<li>zeros(行数,列数).ones,rand同.</li>\n<li></li>\n<li></li>\n</ol>\n","site":{"data":{"styles":"body {\n  position: relative;\n  font-family: 'Lato', \"PingFang SC\", \"Microsoft YaHei\", sans-serif;\n  font-size: 14px;\n  line-height: 2;\n  color: #555;\n  background: #a5b8cc;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n/*更好的侧边滚动条*/\n::-webkit-scrollbar {\n  width: 10px;\n  height: 10px;\n}\n::-webkit-scrollbar-button {\n  width: 0;\n  height: 0;\n}\n::-webkit-scrollbar-button:start:increment,\n::-webkit-scrollbar-button:end:decrement {\n  display: none;\n}\n::-webkit-scrollbar-corner {\n  display: block;\n}\n::-webkit-scrollbar-thumb {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.2);\n}\n::-webkit-scrollbar-thumb:hover {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.5);\n}\n::-webkit-scrollbar-track,\n::-webkit-scrollbar-thumb {\n  border-right: 1px solid transparent;\n  border-left: 1px solid transparent;\n}\n::-webkit-scrollbar-track:hover {\n  background-color: rgba(0,0,0,0.15);\n}\n::-webkit-scrollbar-button:start {\n  width: 10px;\n  height: 10px;\n/*background: url(../images/scrollbar_arrow.png) no-repeat 0 0;*/\n/*可以添加滚动条样式*/\n}\n.post-sticky-flag {\n  font-size: inherit;\n  float: left;\n  color: #000;\n  cursor: help;\n  transition-duration: 0.2s;\n  transition-timing-function: ease-in-out;\n  transition-delay: 0s;\n}\n.post-sticky-flag:hover {\n  color: #07b39b;\n}\n.brand {\n  color: #ff6a6a;\n}\n.site-subtitle {\n  margin-top: 10px;\n  font-size: 13px;\n  color: #fff;\n}\n.busuanzi-value {\n  color: #1890ff;\n}\n* {\n  color: #35405b;\n}\n.site-meta {\n  margin: 0;\n  text-align: $site-meta-text-align;\nmobile()\n}\n.brand {\n  position: relative;\n  display: inline-block;\n  padding: 0 40px;\n  color: #ff6a6a;\n  background: $brand-bg;\n  border-bottom: none;\n}\n.brand:hover {\n  color: $brand-hover-color;\n}\n"}},"excerpt":"<h1 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h1>","more":"<h2 id=\"创建x轴的数组\"><a href=\"#创建x轴的数组\" class=\"headerlink\" title=\"创建x轴的数组\"></a>创建x轴的数组</h2><p>s = linspace()<br>与直接[ : : ]</p>\n<h2 id=\"绘制函数图象时\"><a href=\"#绘制函数图象时\" class=\"headerlink\" title=\"绘制函数图象时\"></a>绘制函数图象时</h2><p>syms变量–fplot<br>与直接设置x和y对应数组–plot</p>\n<h2 id=\"设置坐标轴范围时\"><a href=\"#设置坐标轴范围时\" class=\"headerlink\" title=\"设置坐标轴范围时\"></a>设置坐标轴范围时</h2><p>xlim(xmin ymin)和ylim()<br>与aixs[xmin xmax ymin ymax]<br>是一个道理</p>\n<h2 id=\"绘制图像的几个函数\"><a href=\"#绘制图像的几个函数\" class=\"headerlink\" title=\"绘制图像的几个函数\"></a>绘制图像的几个函数</h2><ul>\n<li>plot()</li>\n<li>line():画直线型</li>\n<li>polar():极坐标下绘曲线<h2 id=\"求函数一段范围内的极值\"><a href=\"#求函数一段范围内的极值\" class=\"headerlink\" title=\"求函数一段范围内的极值\"></a>求函数一段范围内的极值</h2></li>\n<li>lab7</li>\n<li>感觉有几种方法</li>\n<li>画分段函数的几种方法:正常拆分开;@x</li>\n</ul>\n<h1 id=\"矩阵\"><a href=\"#矩阵\" class=\"headerlink\" title=\"矩阵\"></a>矩阵</h1><h2 id=\"创建矩阵的方法\"><a href=\"#创建矩阵的方法\" class=\"headerlink\" title=\"创建矩阵的方法\"></a>创建矩阵的方法</h2><ol>\n<li>B=a:h:b;  其中a,b代表一维矩阵（向量）的区间，h为步宽</li>\n<li>zeros(行数,列数).ones,rand同.</li>\n<li></li>\n<li></li>\n</ol>"},{"title":"FC","date":"2019-11-13T06:15:59.000Z","password":"password","top":null,"_content":"\n# 六 graphs 7.1\n<!--more-->\n## PPT提纲 \\-\\-\\-11.13 拖延症...\n1. graph的种类:\n - simple(e.g.Niche overlap graphs in ecology): \\-\\-\\-\\-\\-\\-\\-\\-没方向undirected,没multiple edges,没loop edges\n - multigraph(e.g.Road networks):\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-没方向undirected,有multiple edges,有loop\n - directed graph(e.g.representing binary relations前几章学的):\\-\\-有方向directed,没multiple edges,有loop\n - !开头比较三者的表格理解!\n2. undirected graphs概念\n    一些概念: 两个点相连 它们adjacent,此线edge incident with 两个点\n    degree:此点含线edge的条数\n     由此有:isolated孤家寡人 & pendant(一条,degree 1,垂饰很好理解)\n    Handshaking theorem:**edge的条数=点们的degree的和/2**\n3. directed graph的一些概念(它有方向!)\n    起点is the initial or start vertex of 线,终点 is the terminal or end vertex of 线\n    in-degree:此点含作为终点的线的条数\n    out-degree:此点含作为起点的线的条数(注意loop一个圈的话是in和out都要算进去的)\n    公式:线的条数=in/out\n4. adjacency matrix\n5. Path\n   - length:所包含edge的条数\n   - Simple:doesnt contain the same **edge** twice\n   - Hamiltonian path: 在simple的基础上passing every **vertex 一次**\n6. cycle(可与path类比)\n7. complete graph (n-clique)   n-cycle\n8. subgraph\n9. connected graphs   , conneed component\n10. isomorphic同构 if isomorphism(保持结构的双射)  , invariant\n\n    ​          \n\n\n# 七 tree\n## PPT提纲`预习` \\-\\-\\-\\-11.13\n1. 定义: vertices,root,edge\n2. edge是一条线,vertix是点 ?\n3. rooted tree\n4. parent,child,siblings. leaf,internal(vertices with at least one child)\n   ancestors(以上线上的所有),descendants\n5. 应用: binanry search trees & decomposition trees\n6. 概念:level,height,balanced,subtree\n7. m-ary tree, full m-ary tree,full binary tree\n8. 有几个二级结论:\n    - 对于full binary tree :n internal vertices \\-\\-\\-\\-\\-\\-**2n+1** vertices\n    - 对于full m-ary  tree: n internal vertices \\-\\-\\-\\-\\-\\-**m*n+1** vertices\n9. 逻辑式可以用二叉树\n10. binary search trees : sorting linearly ordered list\n11. tree traversal: preoder,inorder,postorder\n\n## 课上 | 提纲\n1. 概念和定义\n    什么是TREE\n  - **simple** graph with no simple cycles(有cycle就不是tree,必须要是connected的)\n  - a unique simple path between任意两点\n  - 如果加一条edge，会产生cycle\n  - 如果减一条edge，会disconnected\n\n\n2. rooted tree\n  - 特性是其中一个vertex被当作root（放在top）\n  - 两个rooted trees are **isomorphic** \\-\\-\\-\\-\\-bijection\n    - root to rooted\n    - edges to edges\n    - non-edges to non-edges\n        ？\n\n  - basic terminology\n    - 特别注意internal vertices 和 leaves，一个有children，一个没有children。\n    - leaves没children，是垂饰in graph？\n    - level： 从root的0开始\n    - height： 也要从0开始算！ height=层数-1！\n    - balanced的概念理解过来就是每一个分支的长都要等于height或者height-1。\n    -\n3. 几个特殊的tree和二级结论：\n    - m-ary treeM\n        - 每一个internal的children不超过m\n    - full m-ary tree\n        - 每一个internal的children等于m\n        - 不明白 这怎么可能？！\n    - full binary tree\n        - 每一个internal 有2children\n    - m*n+1\n\n    - logic formula\n4. BST\n    - 注意linear order, partial order的概念\n    - lexicographical order\n5. traversal遍历 三种\n\n## 疑问\n1. graph和tree里edgetoedge和nonedge到底是什么意思 怎么用\n\n# 八 fc \\-\\-\\-11.17周日\nfinite automata : finite-state machines\n1. preliminaries:alphabets and words\n - length\n - concatenation\n - prefix,suffix\n - language\n\n2.finite automation:a theoretical model for programs using a constant amount of memory regardless of the input form.\n - finite **control device**:in any moment it can be in one of its **states**. it is hard-wired how it changes from one state to another.\n - states:(initial states,favourable states)\n - input tape:divied into cells\n - how it starts:\n   - the finite control device is in its unique initial state.\n   这句话是什么意思？？\n   - the reminder\n - how it works:\n    - moves the reading head\n    - choose the next state of its control device???\n    这句话什么意思？？\n    - the control device is hard-wired\\-\\-\\-\\-\\-\\-the next state depends on\n        - the previous state\n        - the character read from the tape\n\n    - ending:\n        - if control device is in a favourable state: the input word is accepted\n        - otherwise: rejected\n - **state transition diagrams**\n    - directed multigraph\n        - 点：the states\n        - 箭头线的标签：input\n\n\n# 作业中易错点总结\n1. \\-\\-\\-11.14 五 概率\n   1. 题型: 要运用贝叶斯定理的题目,1. 先画个*二叉树*帮助理解, 2. 计算时哪个包含哪个一定要搞清楚\n   2. 判断indenpent: 三个公式\n2. \\-\\-\\-11.14 Small六\n   - 六个工作分给五个人的答案没理解\n3. \\-\\-\\-11.14 六 graph\n   - isomorphic: f是bijection(one-to-one&onto)\n   - invariant\n   - 题型:判断一句话是否是invariant: 与onto和one-to-one结合为题目服务(例题好好理解)\n   - 题型:根据题干描述画graph时,注意看清楚给出的要求的类型!\n   - 题型:证明两个graph是isomorphic的: 画出图,再一一f对应\n   - Largetutorial最后一题:只能说思维要开阔了...\n\n\n# 疑问\n1. \\-\\-\\-11.13 六graph里directed graph的计算edge的公式,一个点可以同时有in和out,且数量不同,那怎么算?","source":"_posts/FC.md","raw":"---\ntitle: FC\ndate: 2019-11-13 14:15:59\ntags:\ncategories: \n- 2019\n- KCL\n- FC\npassword: password\ntop:\n---\n\n# 六 graphs 7.1\n<!--more-->\n## PPT提纲 \\-\\-\\-11.13 拖延症...\n1. graph的种类:\n - simple(e.g.Niche overlap graphs in ecology): \\-\\-\\-\\-\\-\\-\\-\\-没方向undirected,没multiple edges,没loop edges\n - multigraph(e.g.Road networks):\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-没方向undirected,有multiple edges,有loop\n - directed graph(e.g.representing binary relations前几章学的):\\-\\-有方向directed,没multiple edges,有loop\n - !开头比较三者的表格理解!\n2. undirected graphs概念\n    一些概念: 两个点相连 它们adjacent,此线edge incident with 两个点\n    degree:此点含线edge的条数\n     由此有:isolated孤家寡人 & pendant(一条,degree 1,垂饰很好理解)\n    Handshaking theorem:**edge的条数=点们的degree的和/2**\n3. directed graph的一些概念(它有方向!)\n    起点is the initial or start vertex of 线,终点 is the terminal or end vertex of 线\n    in-degree:此点含作为终点的线的条数\n    out-degree:此点含作为起点的线的条数(注意loop一个圈的话是in和out都要算进去的)\n    公式:线的条数=in/out\n4. adjacency matrix\n5. Path\n   - length:所包含edge的条数\n   - Simple:doesnt contain the same **edge** twice\n   - Hamiltonian path: 在simple的基础上passing every **vertex 一次**\n6. cycle(可与path类比)\n7. complete graph (n-clique)   n-cycle\n8. subgraph\n9. connected graphs   , conneed component\n10. isomorphic同构 if isomorphism(保持结构的双射)  , invariant\n\n    ​          \n\n\n# 七 tree\n## PPT提纲`预习` \\-\\-\\-\\-11.13\n1. 定义: vertices,root,edge\n2. edge是一条线,vertix是点 ?\n3. rooted tree\n4. parent,child,siblings. leaf,internal(vertices with at least one child)\n   ancestors(以上线上的所有),descendants\n5. 应用: binanry search trees & decomposition trees\n6. 概念:level,height,balanced,subtree\n7. m-ary tree, full m-ary tree,full binary tree\n8. 有几个二级结论:\n    - 对于full binary tree :n internal vertices \\-\\-\\-\\-\\-\\-**2n+1** vertices\n    - 对于full m-ary  tree: n internal vertices \\-\\-\\-\\-\\-\\-**m*n+1** vertices\n9. 逻辑式可以用二叉树\n10. binary search trees : sorting linearly ordered list\n11. tree traversal: preoder,inorder,postorder\n\n## 课上 | 提纲\n1. 概念和定义\n    什么是TREE\n  - **simple** graph with no simple cycles(有cycle就不是tree,必须要是connected的)\n  - a unique simple path between任意两点\n  - 如果加一条edge，会产生cycle\n  - 如果减一条edge，会disconnected\n\n\n2. rooted tree\n  - 特性是其中一个vertex被当作root（放在top）\n  - 两个rooted trees are **isomorphic** \\-\\-\\-\\-\\-bijection\n    - root to rooted\n    - edges to edges\n    - non-edges to non-edges\n        ？\n\n  - basic terminology\n    - 特别注意internal vertices 和 leaves，一个有children，一个没有children。\n    - leaves没children，是垂饰in graph？\n    - level： 从root的0开始\n    - height： 也要从0开始算！ height=层数-1！\n    - balanced的概念理解过来就是每一个分支的长都要等于height或者height-1。\n    -\n3. 几个特殊的tree和二级结论：\n    - m-ary treeM\n        - 每一个internal的children不超过m\n    - full m-ary tree\n        - 每一个internal的children等于m\n        - 不明白 这怎么可能？！\n    - full binary tree\n        - 每一个internal 有2children\n    - m*n+1\n\n    - logic formula\n4. BST\n    - 注意linear order, partial order的概念\n    - lexicographical order\n5. traversal遍历 三种\n\n## 疑问\n1. graph和tree里edgetoedge和nonedge到底是什么意思 怎么用\n\n# 八 fc \\-\\-\\-11.17周日\nfinite automata : finite-state machines\n1. preliminaries:alphabets and words\n - length\n - concatenation\n - prefix,suffix\n - language\n\n2.finite automation:a theoretical model for programs using a constant amount of memory regardless of the input form.\n - finite **control device**:in any moment it can be in one of its **states**. it is hard-wired how it changes from one state to another.\n - states:(initial states,favourable states)\n - input tape:divied into cells\n - how it starts:\n   - the finite control device is in its unique initial state.\n   这句话是什么意思？？\n   - the reminder\n - how it works:\n    - moves the reading head\n    - choose the next state of its control device???\n    这句话什么意思？？\n    - the control device is hard-wired\\-\\-\\-\\-\\-\\-the next state depends on\n        - the previous state\n        - the character read from the tape\n\n    - ending:\n        - if control device is in a favourable state: the input word is accepted\n        - otherwise: rejected\n - **state transition diagrams**\n    - directed multigraph\n        - 点：the states\n        - 箭头线的标签：input\n\n\n# 作业中易错点总结\n1. \\-\\-\\-11.14 五 概率\n   1. 题型: 要运用贝叶斯定理的题目,1. 先画个*二叉树*帮助理解, 2. 计算时哪个包含哪个一定要搞清楚\n   2. 判断indenpent: 三个公式\n2. \\-\\-\\-11.14 Small六\n   - 六个工作分给五个人的答案没理解\n3. \\-\\-\\-11.14 六 graph\n   - isomorphic: f是bijection(one-to-one&onto)\n   - invariant\n   - 题型:判断一句话是否是invariant: 与onto和one-to-one结合为题目服务(例题好好理解)\n   - 题型:根据题干描述画graph时,注意看清楚给出的要求的类型!\n   - 题型:证明两个graph是isomorphic的: 画出图,再一一f对应\n   - Largetutorial最后一题:只能说思维要开阔了...\n\n\n# 疑问\n1. \\-\\-\\-11.13 六graph里directed graph的计算edge的公式,一个点可以同时有in和out,且数量不同,那怎么算?","slug":"FC","published":1,"updated":"2019-11-13T06:15:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqs0rf7m000d0mwlbt8vgd0o","content":"<h1 id=\"六-graphs-7-1\"><a href=\"#六-graphs-7-1\" class=\"headerlink\" title=\"六 graphs 7.1\"></a>六 graphs 7.1</h1><span id=\"more\"></span>\n<h2 id=\"PPT提纲-11-13-拖延症…\"><a href=\"#PPT提纲-11-13-拖延症…\" class=\"headerlink\" title=\"PPT提纲 ---11.13 拖延症…\"></a>PPT提纲 ---11.13 拖延症…</h2><ol>\n<li>graph的种类:</li>\n</ol>\n<ul>\n<li>simple(e.g.Niche overlap graphs in ecology): --------没方向undirected,没multiple edges,没loop edges</li>\n<li>multigraph(e.g.Road networks):----------------没方向undirected,有multiple edges,有loop</li>\n<li>directed graph(e.g.representing binary relations前几章学的):--有方向directed,没multiple edges,有loop</li>\n<li>!开头比较三者的表格理解!</li>\n</ul>\n<ol start=\"2\">\n<li><p>undirected graphs概念<br> 一些概念: 两个点相连 它们adjacent,此线edge incident with 两个点<br> degree:此点含线edge的条数<br>  由此有:isolated孤家寡人 &amp; pendant(一条,degree 1,垂饰很好理解)<br> Handshaking theorem:<strong>edge的条数=点们的degree的和/2</strong></p>\n</li>\n<li><p>directed graph的一些概念(它有方向!)<br> 起点is the initial or start vertex of 线,终点 is the terminal or end vertex of 线<br> in-degree:此点含作为终点的线的条数<br> out-degree:此点含作为起点的线的条数(注意loop一个圈的话是in和out都要算进去的)<br> 公式:线的条数=in/out</p>\n</li>\n<li><p>adjacency matrix</p>\n</li>\n<li><p>Path</p>\n<ul>\n<li>length:所包含edge的条数</li>\n<li>Simple:doesnt contain the same <strong>edge</strong> twice</li>\n<li>Hamiltonian path: 在simple的基础上passing every <strong>vertex 一次</strong></li>\n</ul>\n</li>\n<li><p>cycle(可与path类比)</p>\n</li>\n<li><p>complete graph (n-clique)   n-cycle</p>\n</li>\n<li><p>subgraph</p>\n</li>\n<li><p>connected graphs   , conneed component</p>\n</li>\n<li><p>isomorphic同构 if isomorphism(保持结构的双射)  , invariant</p>\n<p>​          </p>\n</li>\n</ol>\n<h1 id=\"七-tree\"><a href=\"#七-tree\" class=\"headerlink\" title=\"七 tree\"></a>七 tree</h1><h2 id=\"PPT提纲预习-11-13\"><a href=\"#PPT提纲预习-11-13\" class=\"headerlink\" title=\"PPT提纲预习 ----11.13\"></a>PPT提纲<code>预习</code> ----11.13</h2><ol>\n<li>定义: vertices,root,edge</li>\n<li>edge是一条线,vertix是点 ?</li>\n<li>rooted tree</li>\n<li>parent,child,siblings. leaf,internal(vertices with at least one child)<br>ancestors(以上线上的所有),descendants</li>\n<li>应用: binanry search trees &amp; decomposition trees</li>\n<li>概念:level,height,balanced,subtree</li>\n<li>m-ary tree, full m-ary tree,full binary tree</li>\n<li>有几个二级结论:<ul>\n<li>对于full binary tree :n internal vertices ------<strong>2n+1</strong> vertices</li>\n<li>对于full m-ary  tree: n internal vertices ------<strong>m*n+1</strong> vertices</li>\n</ul>\n</li>\n<li>逻辑式可以用二叉树</li>\n<li>binary search trees : sorting linearly ordered list</li>\n<li>tree traversal: preoder,inorder,postorder</li>\n</ol>\n<h2 id=\"课上-提纲\"><a href=\"#课上-提纲\" class=\"headerlink\" title=\"课上 | 提纲\"></a>课上 | 提纲</h2><ol>\n<li>概念和定义<br> 什么是TREE</li>\n</ol>\n<ul>\n<li><strong>simple</strong> graph with no simple cycles(有cycle就不是tree,必须要是connected的)</li>\n<li>a unique simple path between任意两点</li>\n<li>如果加一条edge，会产生cycle</li>\n<li>如果减一条edge，会disconnected</li>\n</ul>\n<ol start=\"2\">\n<li>rooted tree</li>\n</ol>\n<ul>\n<li><p>特性是其中一个vertex被当作root（放在top）</p>\n</li>\n<li><p>两个rooted trees are <strong>isomorphic</strong> -----bijection</p>\n<ul>\n<li>root to rooted</li>\n<li>edges to edges</li>\n<li>non-edges to non-edges<br>  ？</li>\n</ul>\n</li>\n<li><p>basic terminology</p>\n<ul>\n<li>特别注意internal vertices 和 leaves，一个有children，一个没有children。</li>\n<li>leaves没children，是垂饰in graph？</li>\n<li>level： 从root的0开始</li>\n<li>height： 也要从0开始算！ height=层数-1！</li>\n<li>balanced的概念理解过来就是每一个分支的长都要等于height或者height-1。</li>\n<li></li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li><p>几个特殊的tree和二级结论：</p>\n<ul>\n<li><p>m-ary treeM</p>\n<ul>\n<li>每一个internal的children不超过m</li>\n</ul>\n</li>\n<li><p>full m-ary tree</p>\n<ul>\n<li>每一个internal的children等于m</li>\n<li>不明白 这怎么可能？！</li>\n</ul>\n</li>\n<li><p>full binary tree</p>\n<ul>\n<li>每一个internal 有2children</li>\n</ul>\n</li>\n<li><p>m*n+1</p>\n</li>\n<li><p>logic formula</p>\n</li>\n</ul>\n</li>\n<li><p>BST</p>\n<ul>\n<li>注意linear order, partial order的概念</li>\n<li>lexicographical order</li>\n</ul>\n</li>\n<li><p>traversal遍历 三种</p>\n</li>\n</ol>\n<h2 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h2><ol>\n<li>graph和tree里edgetoedge和nonedge到底是什么意思 怎么用</li>\n</ol>\n<h1 id=\"八-fc-11-17周日\"><a href=\"#八-fc-11-17周日\" class=\"headerlink\" title=\"八 fc ---11.17周日\"></a>八 fc ---11.17周日</h1><p>finite automata : finite-state machines</p>\n<ol>\n<li>preliminaries:alphabets and words</li>\n</ol>\n<ul>\n<li>length</li>\n<li>concatenation</li>\n<li>prefix,suffix</li>\n<li>language</li>\n</ul>\n<p>2.finite automation:a theoretical model for programs using a constant amount of memory regardless of the input form.</p>\n<ul>\n<li><p>finite <strong>control device</strong>:in any moment it can be in one of its <strong>states</strong>. it is hard-wired how it changes from one state to another.</p>\n</li>\n<li><p>states:(initial states,favourable states)</p>\n</li>\n<li><p>input tape:divied into cells</p>\n</li>\n<li><p>how it starts:</p>\n<ul>\n<li>the finite control device is in its unique initial state.<br>这句话是什么意思？？</li>\n<li>the reminder</li>\n</ul>\n</li>\n<li><p>how it works:</p>\n<ul>\n<li><p>moves the reading head</p>\n</li>\n<li><p>choose the next state of its control device???<br>这句话什么意思？？</p>\n</li>\n<li><p>the control device is hard-wired------the next state depends on</p>\n<ul>\n<li>the previous state</li>\n<li>the character read from the tape</li>\n</ul>\n</li>\n<li><p>ending:</p>\n<ul>\n<li>if control device is in a favourable state: the input word is accepted</li>\n<li>otherwise: rejected</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>state transition diagrams</strong></p>\n<ul>\n<li>directed multigraph<ul>\n<li>点：the states</li>\n<li>箭头线的标签：input</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"作业中易错点总结\"><a href=\"#作业中易错点总结\" class=\"headerlink\" title=\"作业中易错点总结\"></a>作业中易错点总结</h1><ol>\n<li>---11.14 五 概率<ol>\n<li>题型: 要运用贝叶斯定理的题目,1. 先画个<em>二叉树</em>帮助理解, 2. 计算时哪个包含哪个一定要搞清楚</li>\n<li>判断indenpent: 三个公式</li>\n</ol>\n</li>\n<li>---11.14 Small六<ul>\n<li>六个工作分给五个人的答案没理解</li>\n</ul>\n</li>\n<li>---11.14 六 graph<ul>\n<li>isomorphic: f是bijection(one-to-one&amp;onto)</li>\n<li>invariant</li>\n<li>题型:判断一句话是否是invariant: 与onto和one-to-one结合为题目服务(例题好好理解)</li>\n<li>题型:根据题干描述画graph时,注意看清楚给出的要求的类型!</li>\n<li>题型:证明两个graph是isomorphic的: 画出图,再一一f对应</li>\n<li>Largetutorial最后一题:只能说思维要开阔了…</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"疑问-1\"><a href=\"#疑问-1\" class=\"headerlink\" title=\"疑问\"></a>疑问</h1><ol>\n<li>---11.13 六graph里directed graph的计算edge的公式,一个点可以同时有in和out,且数量不同,那怎么算?</li>\n</ol>\n","site":{"data":{"styles":"body {\n  position: relative;\n  font-family: 'Lato', \"PingFang SC\", \"Microsoft YaHei\", sans-serif;\n  font-size: 14px;\n  line-height: 2;\n  color: #555;\n  background: #a5b8cc;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n/*更好的侧边滚动条*/\n::-webkit-scrollbar {\n  width: 10px;\n  height: 10px;\n}\n::-webkit-scrollbar-button {\n  width: 0;\n  height: 0;\n}\n::-webkit-scrollbar-button:start:increment,\n::-webkit-scrollbar-button:end:decrement {\n  display: none;\n}\n::-webkit-scrollbar-corner {\n  display: block;\n}\n::-webkit-scrollbar-thumb {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.2);\n}\n::-webkit-scrollbar-thumb:hover {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.5);\n}\n::-webkit-scrollbar-track,\n::-webkit-scrollbar-thumb {\n  border-right: 1px solid transparent;\n  border-left: 1px solid transparent;\n}\n::-webkit-scrollbar-track:hover {\n  background-color: rgba(0,0,0,0.15);\n}\n::-webkit-scrollbar-button:start {\n  width: 10px;\n  height: 10px;\n/*background: url(../images/scrollbar_arrow.png) no-repeat 0 0;*/\n/*可以添加滚动条样式*/\n}\n.post-sticky-flag {\n  font-size: inherit;\n  float: left;\n  color: #000;\n  cursor: help;\n  transition-duration: 0.2s;\n  transition-timing-function: ease-in-out;\n  transition-delay: 0s;\n}\n.post-sticky-flag:hover {\n  color: #07b39b;\n}\n.brand {\n  color: #ff6a6a;\n}\n.site-subtitle {\n  margin-top: 10px;\n  font-size: 13px;\n  color: #fff;\n}\n.busuanzi-value {\n  color: #1890ff;\n}\n* {\n  color: #35405b;\n}\n.site-meta {\n  margin: 0;\n  text-align: $site-meta-text-align;\nmobile()\n}\n.brand {\n  position: relative;\n  display: inline-block;\n  padding: 0 40px;\n  color: #ff6a6a;\n  background: $brand-bg;\n  border-bottom: none;\n}\n.brand:hover {\n  color: $brand-hover-color;\n}\n"}},"excerpt":"<h1 id=\"六-graphs-7-1\"><a href=\"#六-graphs-7-1\" class=\"headerlink\" title=\"六 graphs 7.1\"></a>六 graphs 7.1</h1>","more":"<h2 id=\"PPT提纲-11-13-拖延症…\"><a href=\"#PPT提纲-11-13-拖延症…\" class=\"headerlink\" title=\"PPT提纲 ---11.13 拖延症…\"></a>PPT提纲 ---11.13 拖延症…</h2><ol>\n<li>graph的种类:</li>\n</ol>\n<ul>\n<li>simple(e.g.Niche overlap graphs in ecology): --------没方向undirected,没multiple edges,没loop edges</li>\n<li>multigraph(e.g.Road networks):----------------没方向undirected,有multiple edges,有loop</li>\n<li>directed graph(e.g.representing binary relations前几章学的):--有方向directed,没multiple edges,有loop</li>\n<li>!开头比较三者的表格理解!</li>\n</ul>\n<ol start=\"2\">\n<li><p>undirected graphs概念<br> 一些概念: 两个点相连 它们adjacent,此线edge incident with 两个点<br> degree:此点含线edge的条数<br>  由此有:isolated孤家寡人 &amp; pendant(一条,degree 1,垂饰很好理解)<br> Handshaking theorem:<strong>edge的条数=点们的degree的和/2</strong></p>\n</li>\n<li><p>directed graph的一些概念(它有方向!)<br> 起点is the initial or start vertex of 线,终点 is the terminal or end vertex of 线<br> in-degree:此点含作为终点的线的条数<br> out-degree:此点含作为起点的线的条数(注意loop一个圈的话是in和out都要算进去的)<br> 公式:线的条数=in/out</p>\n</li>\n<li><p>adjacency matrix</p>\n</li>\n<li><p>Path</p>\n<ul>\n<li>length:所包含edge的条数</li>\n<li>Simple:doesnt contain the same <strong>edge</strong> twice</li>\n<li>Hamiltonian path: 在simple的基础上passing every <strong>vertex 一次</strong></li>\n</ul>\n</li>\n<li><p>cycle(可与path类比)</p>\n</li>\n<li><p>complete graph (n-clique)   n-cycle</p>\n</li>\n<li><p>subgraph</p>\n</li>\n<li><p>connected graphs   , conneed component</p>\n</li>\n<li><p>isomorphic同构 if isomorphism(保持结构的双射)  , invariant</p>\n<p>​          </p>\n</li>\n</ol>\n<h1 id=\"七-tree\"><a href=\"#七-tree\" class=\"headerlink\" title=\"七 tree\"></a>七 tree</h1><h2 id=\"PPT提纲预习-11-13\"><a href=\"#PPT提纲预习-11-13\" class=\"headerlink\" title=\"PPT提纲预习 ----11.13\"></a>PPT提纲<code>预习</code> ----11.13</h2><ol>\n<li>定义: vertices,root,edge</li>\n<li>edge是一条线,vertix是点 ?</li>\n<li>rooted tree</li>\n<li>parent,child,siblings. leaf,internal(vertices with at least one child)<br>ancestors(以上线上的所有),descendants</li>\n<li>应用: binanry search trees &amp; decomposition trees</li>\n<li>概念:level,height,balanced,subtree</li>\n<li>m-ary tree, full m-ary tree,full binary tree</li>\n<li>有几个二级结论:<ul>\n<li>对于full binary tree :n internal vertices ------<strong>2n+1</strong> vertices</li>\n<li>对于full m-ary  tree: n internal vertices ------<strong>m*n+1</strong> vertices</li>\n</ul>\n</li>\n<li>逻辑式可以用二叉树</li>\n<li>binary search trees : sorting linearly ordered list</li>\n<li>tree traversal: preoder,inorder,postorder</li>\n</ol>\n<h2 id=\"课上-提纲\"><a href=\"#课上-提纲\" class=\"headerlink\" title=\"课上 | 提纲\"></a>课上 | 提纲</h2><ol>\n<li>概念和定义<br> 什么是TREE</li>\n</ol>\n<ul>\n<li><strong>simple</strong> graph with no simple cycles(有cycle就不是tree,必须要是connected的)</li>\n<li>a unique simple path between任意两点</li>\n<li>如果加一条edge，会产生cycle</li>\n<li>如果减一条edge，会disconnected</li>\n</ul>\n<ol start=\"2\">\n<li>rooted tree</li>\n</ol>\n<ul>\n<li><p>特性是其中一个vertex被当作root（放在top）</p>\n</li>\n<li><p>两个rooted trees are <strong>isomorphic</strong> -----bijection</p>\n<ul>\n<li>root to rooted</li>\n<li>edges to edges</li>\n<li>non-edges to non-edges<br>  ？</li>\n</ul>\n</li>\n<li><p>basic terminology</p>\n<ul>\n<li>特别注意internal vertices 和 leaves，一个有children，一个没有children。</li>\n<li>leaves没children，是垂饰in graph？</li>\n<li>level： 从root的0开始</li>\n<li>height： 也要从0开始算！ height=层数-1！</li>\n<li>balanced的概念理解过来就是每一个分支的长都要等于height或者height-1。</li>\n<li></li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li><p>几个特殊的tree和二级结论：</p>\n<ul>\n<li><p>m-ary treeM</p>\n<ul>\n<li>每一个internal的children不超过m</li>\n</ul>\n</li>\n<li><p>full m-ary tree</p>\n<ul>\n<li>每一个internal的children等于m</li>\n<li>不明白 这怎么可能？！</li>\n</ul>\n</li>\n<li><p>full binary tree</p>\n<ul>\n<li>每一个internal 有2children</li>\n</ul>\n</li>\n<li><p>m*n+1</p>\n</li>\n<li><p>logic formula</p>\n</li>\n</ul>\n</li>\n<li><p>BST</p>\n<ul>\n<li>注意linear order, partial order的概念</li>\n<li>lexicographical order</li>\n</ul>\n</li>\n<li><p>traversal遍历 三种</p>\n</li>\n</ol>\n<h2 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h2><ol>\n<li>graph和tree里edgetoedge和nonedge到底是什么意思 怎么用</li>\n</ol>\n<h1 id=\"八-fc-11-17周日\"><a href=\"#八-fc-11-17周日\" class=\"headerlink\" title=\"八 fc ---11.17周日\"></a>八 fc ---11.17周日</h1><p>finite automata : finite-state machines</p>\n<ol>\n<li>preliminaries:alphabets and words</li>\n</ol>\n<ul>\n<li>length</li>\n<li>concatenation</li>\n<li>prefix,suffix</li>\n<li>language</li>\n</ul>\n<p>2.finite automation:a theoretical model for programs using a constant amount of memory regardless of the input form.</p>\n<ul>\n<li><p>finite <strong>control device</strong>:in any moment it can be in one of its <strong>states</strong>. it is hard-wired how it changes from one state to another.</p>\n</li>\n<li><p>states:(initial states,favourable states)</p>\n</li>\n<li><p>input tape:divied into cells</p>\n</li>\n<li><p>how it starts:</p>\n<ul>\n<li>the finite control device is in its unique initial state.<br>这句话是什么意思？？</li>\n<li>the reminder</li>\n</ul>\n</li>\n<li><p>how it works:</p>\n<ul>\n<li><p>moves the reading head</p>\n</li>\n<li><p>choose the next state of its control device???<br>这句话什么意思？？</p>\n</li>\n<li><p>the control device is hard-wired------the next state depends on</p>\n<ul>\n<li>the previous state</li>\n<li>the character read from the tape</li>\n</ul>\n</li>\n<li><p>ending:</p>\n<ul>\n<li>if control device is in a favourable state: the input word is accepted</li>\n<li>otherwise: rejected</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>state transition diagrams</strong></p>\n<ul>\n<li>directed multigraph<ul>\n<li>点：the states</li>\n<li>箭头线的标签：input</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"作业中易错点总结\"><a href=\"#作业中易错点总结\" class=\"headerlink\" title=\"作业中易错点总结\"></a>作业中易错点总结</h1><ol>\n<li>---11.14 五 概率<ol>\n<li>题型: 要运用贝叶斯定理的题目,1. 先画个<em>二叉树</em>帮助理解, 2. 计算时哪个包含哪个一定要搞清楚</li>\n<li>判断indenpent: 三个公式</li>\n</ol>\n</li>\n<li>---11.14 Small六<ul>\n<li>六个工作分给五个人的答案没理解</li>\n</ul>\n</li>\n<li>---11.14 六 graph<ul>\n<li>isomorphic: f是bijection(one-to-one&amp;onto)</li>\n<li>invariant</li>\n<li>题型:判断一句话是否是invariant: 与onto和one-to-one结合为题目服务(例题好好理解)</li>\n<li>题型:根据题干描述画graph时,注意看清楚给出的要求的类型!</li>\n<li>题型:证明两个graph是isomorphic的: 画出图,再一一f对应</li>\n<li>Largetutorial最后一题:只能说思维要开阔了…</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"疑问-1\"><a href=\"#疑问-1\" class=\"headerlink\" title=\"疑问\"></a>疑问</h1><ol>\n<li>---11.13 六graph里directed graph的计算edge的公式,一个点可以同时有in和out,且数量不同,那怎么算?</li>\n</ol>"},{"title":"VAD","date":"2021-07-05T01:05:13.000Z","password":"password","top":50,"_content":"\n\n## VAD- -Paper\n<!-- more -->\n1. ### Kobe Japan的\n    1. 概念上：VAD:话语激活检测\n        1. 当用户的语音信号能量低于一定门限值时就认为是静默状态，也不发送语音分组。当检测到突发的活动声音时才生成语音信号，并加以传输。\n\n        2. 从一段语音（纯净或带噪）信号中标识出语音片段与非语音片段\n        3. ADC：模拟数字转换器，模拟信号转变为数字信号\n        4. FPGA board： Field－Programmable Gate Array的缩写，即现场可编程门阵列。\n        3. 第一步就是提取噪音信息。通常的思路是通过VAD函数得到非语音片段，而非语音片段可以认为是纯噪音片段。从而可以从纯噪音信号中提取出有用信息，例如进行傅里叶变换得到噪音频谱等，再进而做下一步处理。例如谱减法，维纳滤波。\n        4. zero cross counter (ZCC)： 过零率，一帧语音时域信号穿过0（时间轴）的次数。 语音片段ZCC较小，非语音片段ZCC较大\n        5. STE：short time energy：短时能量\n        6. 我们通常使用麦克风进行音频录制的采样率为 16000Hz，一个采样点使用 16bit 来存储。\n        7. ksps：单位，kilo Samples per Second ，即采样千次每秒，是转化速率的单位。\n        8. dB：分贝\n        9. S/N：信噪比（单位是分贝），信号与噪声的比例。设备的信噪比越高表明它产生的噪声越少。越高越好。\n        8. d-flip flop：d触发器，两个稳定状态，即\"0\"和\"1\"\n    2. 语音识别的特征提取\n        1. (一篇知乎上的文章)[https://zhuanlan.zhihu.com/p/147386972] ：根据语音信号->预加重->分帧加窗->DFT->等等的流程来介绍\n\n    3. 这篇文章：通过zero-crossing VAD algorithm判断speech或噪音，利用的原理就是把语音输入现转化为连续数字信号，再判断在某时刻该信号是否穿过x轴，如果这个input signal在该点的前一个峰值pass了设定的trigger line，那么它就是zero crossing，count相应+1.我们再根据某一段信号中zero crossing点出现的相对频率来判断这段信号到底是speech还是noise。用sum（用于记录zerocrossing数量的变量）/帧的长度来进行比较     （用中文做流程图）  。\n        他们团队没有使用单片机，而是使用了FPGA芯片\n        他们在陈述结果时，根据范围从-20----20dB的信噪比的变化，用了Correct，False accptance和False rejection\n    4. 好处坏处，改进的\n        -    ，，\n        -    没有关注人说了什么什么，只要人发出声音就会被识别\n    5. 我得想法和思考\n    6. 不懂的地方\n    7. 结合看的相关其他文章\n2. ### 智能手表VADLite系统\n    1. 这个团队研发的开源系统，是在智能手表上可以安装下载的app。\n    2. 目的是结合他们以前有关于人体健康数据的智能产品，使得手表在用户呼叫的时候才会收集心率心跳等数据\n    4. data preprocessing：他们收集了至少10个处于不同距离的不同的人对着手表讲话后的数据，一共3.5h。他们用了一个静默识别的算法来截取掉大部分安静的语音片段。 -----计算RMS（root mean square均方根），如果这个数值低于一个他们用离散点图确定下来的特定值，就标记为silence。  ---》然后用SVM来识别人声和噪声---》分成25ms一帧，提取12 MFCC features----》再用linear SVM来识别和分类。具体来说：\n3. ### Tiny Voice\n    1. ，，\n    2. 。。。\n    3. 选择存储器：\n        1. 好处比较\n\n    4. interface 功能和规则 + 具体的用汇编语言写的软件： 结合起来用两张图放在一起，一起来说。\n\n\n    5. 我认为timer等一些想法或许我可以借鉴在我未来自己的设计中。它虽然很小，但并不是一个简单的系统。\n    6. 不足：train的时候背景的噪音会对产生的template造成很大影响，从而影响recognize的效果。\n4. ### pre ----for以上三paper ----结合以slide（稿件草稿版）\n    可能耽误大家几分钟的时间，我将对我上个周阅读的三篇关于语音识别的文章向大家做一个简单的介绍和汇报。首先我会分别按照这三篇文章的大概脉络来说一下对这三种里面的算法啊应用啊我的理解，然后在最后总结的时候，我会横向比较一下这三个，说一下我的理解和困惑\n    1. 感觉这三篇都没有着重讲算法的实现和理论的公式，所以对于我来说比较好理解。 我首先会简单介绍文章中所提到的它们的背景，目的等，我可能要简单说一下硬件部分，着重讲一下我所理解的，他们实现VAD的方法。最后我会比较和总结一下这三种应用，说一下自己的思考和一些困惑。\n    1. 介绍第一篇论文：在一个智能通用传感器系统里，为了能够减少能耗，他们设计和应用了这个VAD模块。就是当vad没有识别到语音信号的时候，这个系统的其他电路都是没通电的。\n        1. 。。。\n        2. 我不熟悉画这种图所以引用了一张原文的图片    着重的是这两点     这个帧长根据文中的描述应该是256\n        1. 不足：文章中也提到，相比于一些frequency domain algorithm ，我们的zero crossing算法作为基于时域的，在信噪比比较低的情况下准确率一般\n            2. 然后我可能对于这两条trigger line的确定方法不是很懂 --结尾\n    2. 。。\n    3. 第二篇VADLite（手表）：\n        1. 来自苏黎世联邦理工大学的开源项目\n        2. 设计初衷是希望与他们之前的智能人体健康数据产品相结合，使得在用户呼唤手表时，能够相应的测量和记录血压血样心率等等数据\n        3. 下面这个图简单描述了系统的框架，分为两个模块。他们用了pipeline。\n        4. ，，，\n        5. 在预处理过程中，计算RMS（root mean square均方根），如果这个数值低于一个临界值，就标记为silence。静默片段的这个阈值是根据所有声音片段的RMS生成的离散点图确认的。\n        6. 再到特征提取：他们团队使用了梅尔频率倒谱系数   ----并没有详细讲mfcc的基础知识，我只是简单了解了一下原理。（一组声音数据，分成很多帧，每一帧经过快速傅立叶变换FFT获得相应的频谱，然后再经过梅尔滤波器获得梅尔频谱，然后在梅尔频谱上进行倒谱分析--取第2-13个系数）\n        7. 在分类里，用了线性SVM。（一种监督学习的方法，我对SVM的理解就是篮球红球，棍子分开），\n        8. 用了网格搜索来调参--（常用的找最优超参数的算法）\n        9. 标准化：介绍的是减去均值再除以方差\n    4. 。。。\n    5. 第三篇呢是一个期刊上对于产品的介绍。\n        1. ，，，\n        2. 他这个处理器是没有数字电路转换器的，所以他用了一个集成电路板来把时域信号转化成单片机能够识别的信号\n        3. tiny voice的语音识别运用的理论基础就是把声音信号分为两个不同频率范围的共振峰区\n        3. high-pass filtered：高通滤波，过滤掉低频信号\n        4. 硬件上用了这个只读存储器，在这里先略过。\n        5. 对于\n        6. 简略的flowchart：\n            - recognize按下后的模式里。。。。。在没有阅读相似的源码的情况下，我觉得我还完全没有知其所以然\n    6. 可能前面几页不够直观清晰，这一页我把他们放在一起，，\n    7.\n    6. 然后比较这三篇文章三种应用的话，我觉得相对于像tiny voice一样用不带ADC的处理器或者像FPGA这种半定制电路/逻辑门array，对于我这种初学者可能刚开始用一些比较好上手的单片机更好。\n    7. 好像一些基本原理我都已经知其然了，但是具体的算法实现和理论基础（你比如说像MFCC和SVM）我还要加深理解才行，需要更多的阅读和实践\n    8. 然后文章里具体描述的一些数据，采样频率等等我需要在自己的实践中慢慢来体会。\n\n## stm32F750 🌟VAD项目✨\n1. ### 初识\n    1. 公司：ARM；内核：Cortex-M3内核的32位闪存微控制器\n    2. 电压范围2--3.6v I/O电压容限为5V\n    3. N8H6：\n        - 8是`64k字节`的的闪存存储器\n        - H：封装的类型：BGA（BGA封装： Ball Grid Array Package）\n        - 6: -40--85摄氏度\n6.30 ： stm32\n周四7.1: 了解stm32 （I/O，串口）\n7.5 周一：阅读资料\n    2. stm32系统`时钟`控制： 3种不同时钟源\n        1. HSE振荡器时钟：\n            1. 高速外部时钟信号\n                1. HSE外部`晶体`/陶瓷谐振器\n                2. HSE用户`外部`时钟\n        2. HSI振荡器时钟\n            1. 由`内部`8MHz的RC振荡器产生，直接作为系统时钟信号\n            2. 与HSE相比，不需要任何外部器件，启动时间短，但精度差。备用\n        3. PLL时钟: 内部 倍频\n            - 如使用usb，PLL必须被配置为输出48/72MHz时钟，用于提供48MHz的USBCLK时钟\n    3. 中断系统：支持的中断84个（16个内核+68个外部）\n    4. 固件函数库从：24个库（flash，lib，nvic中断，rcc时钟（Reset &  clock control），gpio管脚绝大部分程序都涉及）\n    5. 软件配置：通过设置flash菜单下的选项，选择目标芯片和型号，flash和RAM的存储起始地址和大小，选择仿真调试工具，闪存空间等\n    6. 模块化编程：\n        1. 添加启动文件（cortexm3_marco.s和stm32f10x_vertor.s）\n        2. 添加对应外设的固件函数库（stm32f10x_xxx.c）\n        3. 添加中断服务程序模块（stm32f10x_it.c）\n        4. 编写外设配置（初始化）模块代码\n            1. 开时钟RCC\n            2. 自身初始化\n            3. 相关管脚配置（GPIO）\n            4. 是否使用中断（NVIC）\n            5. 编写main函数中的应用程序及其子程序（一定要将`#include stm32f10x_lib.h`文件包含在其中）\n    7. NVIC（nested vector interrupt controller嵌套向量中断控制器）\n        1. 控制异常，设置各个异常的优先等级并对异常进行处理\n            - 所有异常都在处理器模式中处理 --handler mode\n        2. 抢占 （产生嵌套，咬尾，晚到）\n        3. NVIC支持优先级分组机制\n\n    8. IO由软件配置--8种模式：\n        1. 推挽输出：输出高，低电平，连接数字器件 两个三极管（参数相同），各负责正负半周的波形放大任务\n        2. 等等\n        3. IO配置常用的8个寄存器：\n            1. MODER寄存器：GPIO端口模式控制寄存器 每两位配置一个IO口的I/O方向\n            2. OTYPER寄存器：控制GPIO的`输出`类型  每一位配置一个I/O口的输出类型（推挽0/开漏1）\n            3. OSPEEDR寄存器：GPIOs的输出速度 每两位\n            4. ODR: 控制`输出`电平（高/低）\n            5. BSRR: 复位\n            6. IDR：读取GPIOx的输入数据\n            7. 两个32位复用功能选择寄存器AFRH+AFRL\n    9. 外设 的概念\n        1. 还有外设的使能，失能，复位\n2. ## 实验 源码 上手\n    1. 跑马灯 HAL库 源码\n        1. 7.6周二下午 成功 --结合开发手册，需要着重理解的是`GPIO`和`LED0（1）LED1（0）`(led.h文件里的IO输出电平取反操作)\n        2. 初识了一个project的全过程 --注意有HARDWARE文件夹的创建，LED加入path等等基本过程\n        3. LED亮灭：引脚输出高低电\n\n`定时器 io 串口 adc`\n采样频率 （定时器 1ms或者0.1ms）\nadc 直流电源\n单模块 集成调试\n","source":"_posts/VAD.md","raw":"---\ntitle: VAD\ndate: 2021-07-05 09:05:13\ntag:\n- 语音识别\ncategories:\n- 2021\n- Summer\n- VAD\npassword: password\ntop: 50\n---\n\n\n## VAD- -Paper\n<!-- more -->\n1. ### Kobe Japan的\n    1. 概念上：VAD:话语激活检测\n        1. 当用户的语音信号能量低于一定门限值时就认为是静默状态，也不发送语音分组。当检测到突发的活动声音时才生成语音信号，并加以传输。\n\n        2. 从一段语音（纯净或带噪）信号中标识出语音片段与非语音片段\n        3. ADC：模拟数字转换器，模拟信号转变为数字信号\n        4. FPGA board： Field－Programmable Gate Array的缩写，即现场可编程门阵列。\n        3. 第一步就是提取噪音信息。通常的思路是通过VAD函数得到非语音片段，而非语音片段可以认为是纯噪音片段。从而可以从纯噪音信号中提取出有用信息，例如进行傅里叶变换得到噪音频谱等，再进而做下一步处理。例如谱减法，维纳滤波。\n        4. zero cross counter (ZCC)： 过零率，一帧语音时域信号穿过0（时间轴）的次数。 语音片段ZCC较小，非语音片段ZCC较大\n        5. STE：short time energy：短时能量\n        6. 我们通常使用麦克风进行音频录制的采样率为 16000Hz，一个采样点使用 16bit 来存储。\n        7. ksps：单位，kilo Samples per Second ，即采样千次每秒，是转化速率的单位。\n        8. dB：分贝\n        9. S/N：信噪比（单位是分贝），信号与噪声的比例。设备的信噪比越高表明它产生的噪声越少。越高越好。\n        8. d-flip flop：d触发器，两个稳定状态，即\"0\"和\"1\"\n    2. 语音识别的特征提取\n        1. (一篇知乎上的文章)[https://zhuanlan.zhihu.com/p/147386972] ：根据语音信号->预加重->分帧加窗->DFT->等等的流程来介绍\n\n    3. 这篇文章：通过zero-crossing VAD algorithm判断speech或噪音，利用的原理就是把语音输入现转化为连续数字信号，再判断在某时刻该信号是否穿过x轴，如果这个input signal在该点的前一个峰值pass了设定的trigger line，那么它就是zero crossing，count相应+1.我们再根据某一段信号中zero crossing点出现的相对频率来判断这段信号到底是speech还是noise。用sum（用于记录zerocrossing数量的变量）/帧的长度来进行比较     （用中文做流程图）  。\n        他们团队没有使用单片机，而是使用了FPGA芯片\n        他们在陈述结果时，根据范围从-20----20dB的信噪比的变化，用了Correct，False accptance和False rejection\n    4. 好处坏处，改进的\n        -    ，，\n        -    没有关注人说了什么什么，只要人发出声音就会被识别\n    5. 我得想法和思考\n    6. 不懂的地方\n    7. 结合看的相关其他文章\n2. ### 智能手表VADLite系统\n    1. 这个团队研发的开源系统，是在智能手表上可以安装下载的app。\n    2. 目的是结合他们以前有关于人体健康数据的智能产品，使得手表在用户呼叫的时候才会收集心率心跳等数据\n    4. data preprocessing：他们收集了至少10个处于不同距离的不同的人对着手表讲话后的数据，一共3.5h。他们用了一个静默识别的算法来截取掉大部分安静的语音片段。 -----计算RMS（root mean square均方根），如果这个数值低于一个他们用离散点图确定下来的特定值，就标记为silence。  ---》然后用SVM来识别人声和噪声---》分成25ms一帧，提取12 MFCC features----》再用linear SVM来识别和分类。具体来说：\n3. ### Tiny Voice\n    1. ，，\n    2. 。。。\n    3. 选择存储器：\n        1. 好处比较\n\n    4. interface 功能和规则 + 具体的用汇编语言写的软件： 结合起来用两张图放在一起，一起来说。\n\n\n    5. 我认为timer等一些想法或许我可以借鉴在我未来自己的设计中。它虽然很小，但并不是一个简单的系统。\n    6. 不足：train的时候背景的噪音会对产生的template造成很大影响，从而影响recognize的效果。\n4. ### pre ----for以上三paper ----结合以slide（稿件草稿版）\n    可能耽误大家几分钟的时间，我将对我上个周阅读的三篇关于语音识别的文章向大家做一个简单的介绍和汇报。首先我会分别按照这三篇文章的大概脉络来说一下对这三种里面的算法啊应用啊我的理解，然后在最后总结的时候，我会横向比较一下这三个，说一下我的理解和困惑\n    1. 感觉这三篇都没有着重讲算法的实现和理论的公式，所以对于我来说比较好理解。 我首先会简单介绍文章中所提到的它们的背景，目的等，我可能要简单说一下硬件部分，着重讲一下我所理解的，他们实现VAD的方法。最后我会比较和总结一下这三种应用，说一下自己的思考和一些困惑。\n    1. 介绍第一篇论文：在一个智能通用传感器系统里，为了能够减少能耗，他们设计和应用了这个VAD模块。就是当vad没有识别到语音信号的时候，这个系统的其他电路都是没通电的。\n        1. 。。。\n        2. 我不熟悉画这种图所以引用了一张原文的图片    着重的是这两点     这个帧长根据文中的描述应该是256\n        1. 不足：文章中也提到，相比于一些frequency domain algorithm ，我们的zero crossing算法作为基于时域的，在信噪比比较低的情况下准确率一般\n            2. 然后我可能对于这两条trigger line的确定方法不是很懂 --结尾\n    2. 。。\n    3. 第二篇VADLite（手表）：\n        1. 来自苏黎世联邦理工大学的开源项目\n        2. 设计初衷是希望与他们之前的智能人体健康数据产品相结合，使得在用户呼唤手表时，能够相应的测量和记录血压血样心率等等数据\n        3. 下面这个图简单描述了系统的框架，分为两个模块。他们用了pipeline。\n        4. ，，，\n        5. 在预处理过程中，计算RMS（root mean square均方根），如果这个数值低于一个临界值，就标记为silence。静默片段的这个阈值是根据所有声音片段的RMS生成的离散点图确认的。\n        6. 再到特征提取：他们团队使用了梅尔频率倒谱系数   ----并没有详细讲mfcc的基础知识，我只是简单了解了一下原理。（一组声音数据，分成很多帧，每一帧经过快速傅立叶变换FFT获得相应的频谱，然后再经过梅尔滤波器获得梅尔频谱，然后在梅尔频谱上进行倒谱分析--取第2-13个系数）\n        7. 在分类里，用了线性SVM。（一种监督学习的方法，我对SVM的理解就是篮球红球，棍子分开），\n        8. 用了网格搜索来调参--（常用的找最优超参数的算法）\n        9. 标准化：介绍的是减去均值再除以方差\n    4. 。。。\n    5. 第三篇呢是一个期刊上对于产品的介绍。\n        1. ，，，\n        2. 他这个处理器是没有数字电路转换器的，所以他用了一个集成电路板来把时域信号转化成单片机能够识别的信号\n        3. tiny voice的语音识别运用的理论基础就是把声音信号分为两个不同频率范围的共振峰区\n        3. high-pass filtered：高通滤波，过滤掉低频信号\n        4. 硬件上用了这个只读存储器，在这里先略过。\n        5. 对于\n        6. 简略的flowchart：\n            - recognize按下后的模式里。。。。。在没有阅读相似的源码的情况下，我觉得我还完全没有知其所以然\n    6. 可能前面几页不够直观清晰，这一页我把他们放在一起，，\n    7.\n    6. 然后比较这三篇文章三种应用的话，我觉得相对于像tiny voice一样用不带ADC的处理器或者像FPGA这种半定制电路/逻辑门array，对于我这种初学者可能刚开始用一些比较好上手的单片机更好。\n    7. 好像一些基本原理我都已经知其然了，但是具体的算法实现和理论基础（你比如说像MFCC和SVM）我还要加深理解才行，需要更多的阅读和实践\n    8. 然后文章里具体描述的一些数据，采样频率等等我需要在自己的实践中慢慢来体会。\n\n## stm32F750 🌟VAD项目✨\n1. ### 初识\n    1. 公司：ARM；内核：Cortex-M3内核的32位闪存微控制器\n    2. 电压范围2--3.6v I/O电压容限为5V\n    3. N8H6：\n        - 8是`64k字节`的的闪存存储器\n        - H：封装的类型：BGA（BGA封装： Ball Grid Array Package）\n        - 6: -40--85摄氏度\n6.30 ： stm32\n周四7.1: 了解stm32 （I/O，串口）\n7.5 周一：阅读资料\n    2. stm32系统`时钟`控制： 3种不同时钟源\n        1. HSE振荡器时钟：\n            1. 高速外部时钟信号\n                1. HSE外部`晶体`/陶瓷谐振器\n                2. HSE用户`外部`时钟\n        2. HSI振荡器时钟\n            1. 由`内部`8MHz的RC振荡器产生，直接作为系统时钟信号\n            2. 与HSE相比，不需要任何外部器件，启动时间短，但精度差。备用\n        3. PLL时钟: 内部 倍频\n            - 如使用usb，PLL必须被配置为输出48/72MHz时钟，用于提供48MHz的USBCLK时钟\n    3. 中断系统：支持的中断84个（16个内核+68个外部）\n    4. 固件函数库从：24个库（flash，lib，nvic中断，rcc时钟（Reset &  clock control），gpio管脚绝大部分程序都涉及）\n    5. 软件配置：通过设置flash菜单下的选项，选择目标芯片和型号，flash和RAM的存储起始地址和大小，选择仿真调试工具，闪存空间等\n    6. 模块化编程：\n        1. 添加启动文件（cortexm3_marco.s和stm32f10x_vertor.s）\n        2. 添加对应外设的固件函数库（stm32f10x_xxx.c）\n        3. 添加中断服务程序模块（stm32f10x_it.c）\n        4. 编写外设配置（初始化）模块代码\n            1. 开时钟RCC\n            2. 自身初始化\n            3. 相关管脚配置（GPIO）\n            4. 是否使用中断（NVIC）\n            5. 编写main函数中的应用程序及其子程序（一定要将`#include stm32f10x_lib.h`文件包含在其中）\n    7. NVIC（nested vector interrupt controller嵌套向量中断控制器）\n        1. 控制异常，设置各个异常的优先等级并对异常进行处理\n            - 所有异常都在处理器模式中处理 --handler mode\n        2. 抢占 （产生嵌套，咬尾，晚到）\n        3. NVIC支持优先级分组机制\n\n    8. IO由软件配置--8种模式：\n        1. 推挽输出：输出高，低电平，连接数字器件 两个三极管（参数相同），各负责正负半周的波形放大任务\n        2. 等等\n        3. IO配置常用的8个寄存器：\n            1. MODER寄存器：GPIO端口模式控制寄存器 每两位配置一个IO口的I/O方向\n            2. OTYPER寄存器：控制GPIO的`输出`类型  每一位配置一个I/O口的输出类型（推挽0/开漏1）\n            3. OSPEEDR寄存器：GPIOs的输出速度 每两位\n            4. ODR: 控制`输出`电平（高/低）\n            5. BSRR: 复位\n            6. IDR：读取GPIOx的输入数据\n            7. 两个32位复用功能选择寄存器AFRH+AFRL\n    9. 外设 的概念\n        1. 还有外设的使能，失能，复位\n2. ## 实验 源码 上手\n    1. 跑马灯 HAL库 源码\n        1. 7.6周二下午 成功 --结合开发手册，需要着重理解的是`GPIO`和`LED0（1）LED1（0）`(led.h文件里的IO输出电平取反操作)\n        2. 初识了一个project的全过程 --注意有HARDWARE文件夹的创建，LED加入path等等基本过程\n        3. LED亮灭：引脚输出高低电\n\n`定时器 io 串口 adc`\n采样频率 （定时器 1ms或者0.1ms）\nadc 直流电源\n单模块 集成调试\n","slug":"VAD","published":1,"updated":"2021-07-05T01:05:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqs0rf7n000e0mwleypsb8is","content":"<h2 id=\"VAD-Paper\"><a href=\"#VAD-Paper\" class=\"headerlink\" title=\"VAD- -Paper\"></a>VAD- -Paper</h2><span id=\"more\"></span>\n<ol>\n<li><h3 id=\"Kobe-Japan的\"><a href=\"#Kobe-Japan的\" class=\"headerlink\" title=\"Kobe Japan的\"></a>Kobe Japan的</h3><ol>\n<li><p>概念上：VAD:话语激活检测</p>\n<ol>\n<li><p>当用户的语音信号能量低于一定门限值时就认为是静默状态，也不发送语音分组。当检测到突发的活动声音时才生成语音信号，并加以传输。</p>\n</li>\n<li><p>从一段语音（纯净或带噪）信号中标识出语音片段与非语音片段</p>\n</li>\n<li><p>ADC：模拟数字转换器，模拟信号转变为数字信号</p>\n</li>\n<li><p>FPGA board： Field－Programmable Gate Array的缩写，即现场可编程门阵列。</p>\n</li>\n<li><p>第一步就是提取噪音信息。通常的思路是通过VAD函数得到非语音片段，而非语音片段可以认为是纯噪音片段。从而可以从纯噪音信号中提取出有用信息，例如进行傅里叶变换得到噪音频谱等，再进而做下一步处理。例如谱减法，维纳滤波。</p>\n</li>\n<li><p>zero cross counter (ZCC)： 过零率，一帧语音时域信号穿过0（时间轴）的次数。 语音片段ZCC较小，非语音片段ZCC较大</p>\n</li>\n<li><p>STE：short time energy：短时能量</p>\n</li>\n<li><p>我们通常使用麦克风进行音频录制的采样率为 16000Hz，一个采样点使用 16bit 来存储。</p>\n</li>\n<li><p>ksps：单位，kilo Samples per Second ，即采样千次每秒，是转化速率的单位。</p>\n</li>\n<li><p>dB：分贝</p>\n</li>\n<li><p>S/N：信噪比（单位是分贝），信号与噪声的比例。设备的信噪比越高表明它产生的噪声越少。越高越好。</p>\n</li>\n<li><p>d-flip flop：d触发器，两个稳定状态，即”0”和”1”</p>\n</li>\n</ol>\n</li>\n<li><p>语音识别的特征提取</p>\n<ol>\n<li>(一篇知乎上的文章)[<a href=\"https://zhuanlan.zhihu.com/p/147386972]\">https://zhuanlan.zhihu.com/p/147386972]</a> ：根据语音信号-&gt;预加重-&gt;分帧加窗-&gt;DFT-&gt;等等的流程来介绍</li>\n</ol>\n</li>\n<li><p>这篇文章：通过zero-crossing VAD algorithm判断speech或噪音，利用的原理就是把语音输入现转化为连续数字信号，再判断在某时刻该信号是否穿过x轴，如果这个input signal在该点的前一个峰值pass了设定的trigger line，那么它就是zero crossing，count相应+1.我们再根据某一段信号中zero crossing点出现的相对频率来判断这段信号到底是speech还是noise。用sum（用于记录zerocrossing数量的变量）/帧的长度来进行比较     （用中文做流程图）  。<br> 他们团队没有使用单片机，而是使用了FPGA芯片<br> 他们在陈述结果时，根据范围从-20—-20dB的信噪比的变化，用了Correct，False accptance和False rejection</p>\n</li>\n<li><p>好处坏处，改进的</p>\n<ul>\n<li>   ，，</li>\n<li>   没有关注人说了什么什么，只要人发出声音就会被识别</li>\n</ul>\n</li>\n<li><p>我得想法和思考</p>\n</li>\n<li><p>不懂的地方</p>\n</li>\n<li><p>结合看的相关其他文章</p>\n</li>\n</ol>\n</li>\n<li><h3 id=\"智能手表VADLite系统\"><a href=\"#智能手表VADLite系统\" class=\"headerlink\" title=\"智能手表VADLite系统\"></a>智能手表VADLite系统</h3><ol>\n<li>这个团队研发的开源系统，是在智能手表上可以安装下载的app。</li>\n<li>目的是结合他们以前有关于人体健康数据的智能产品，使得手表在用户呼叫的时候才会收集心率心跳等数据</li>\n<li>data preprocessing：他们收集了至少10个处于不同距离的不同的人对着手表讲话后的数据，一共3.5h。他们用了一个静默识别的算法来截取掉大部分安静的语音片段。 —–计算RMS（root mean square均方根），如果这个数值低于一个他们用离散点图确定下来的特定值，就标记为silence。  —》然后用SVM来识别人声和噪声—》分成25ms一帧，提取12 MFCC features—-》再用linear SVM来识别和分类。具体来说：</li>\n</ol>\n</li>\n<li><h3 id=\"Tiny-Voice\"><a href=\"#Tiny-Voice\" class=\"headerlink\" title=\"Tiny Voice\"></a>Tiny Voice</h3><ol>\n<li><p>，，</p>\n</li>\n<li><p>。。。</p>\n</li>\n<li><p>选择存储器：</p>\n<ol>\n<li>好处比较</li>\n</ol>\n</li>\n<li><p>interface 功能和规则 + 具体的用汇编语言写的软件： 结合起来用两张图放在一起，一起来说。</p>\n</li>\n</ol>\n</li>\n</ol>\n<pre><code>5. 我认为timer等一些想法或许我可以借鉴在我未来自己的设计中。它虽然很小，但并不是一个简单的系统。\n6. 不足：train的时候背景的噪音会对产生的template造成很大影响，从而影响recognize的效果。\n</code></pre>\n<ol start=\"4\">\n<li><h3 id=\"pre-—-for以上三paper-—-结合以slide（稿件草稿版）\"><a href=\"#pre-—-for以上三paper-—-结合以slide（稿件草稿版）\" class=\"headerlink\" title=\"pre —-for以上三paper —-结合以slide（稿件草稿版）\"></a>pre —-for以上三paper —-结合以slide（稿件草稿版）</h3> 可能耽误大家几分钟的时间，我将对我上个周阅读的三篇关于语音识别的文章向大家做一个简单的介绍和汇报。首先我会分别按照这三篇文章的大概脉络来说一下对这三种里面的算法啊应用啊我的理解，然后在最后总结的时候，我会横向比较一下这三个，说一下我的理解和困惑<ol>\n<li>感觉这三篇都没有着重讲算法的实现和理论的公式，所以对于我来说比较好理解。 我首先会简单介绍文章中所提到的它们的背景，目的等，我可能要简单说一下硬件部分，着重讲一下我所理解的，他们实现VAD的方法。最后我会比较和总结一下这三种应用，说一下自己的思考和一些困惑。</li>\n<li>介绍第一篇论文：在一个智能通用传感器系统里，为了能够减少能耗，他们设计和应用了这个VAD模块。就是当vad没有识别到语音信号的时候，这个系统的其他电路都是没通电的。<ol>\n<li>。。。</li>\n<li>我不熟悉画这种图所以引用了一张原文的图片    着重的是这两点     这个帧长根据文中的描述应该是256</li>\n<li>不足：文章中也提到，相比于一些frequency domain algorithm ，我们的zero crossing算法作为基于时域的，在信噪比比较低的情况下准确率一般<ol start=\"2\">\n<li>然后我可能对于这两条trigger line的确定方法不是很懂 –结尾</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>。。</li>\n<li>第二篇VADLite（手表）：<ol>\n<li>来自苏黎世联邦理工大学的开源项目</li>\n<li>设计初衷是希望与他们之前的智能人体健康数据产品相结合，使得在用户呼唤手表时，能够相应的测量和记录血压血样心率等等数据</li>\n<li>下面这个图简单描述了系统的框架，分为两个模块。他们用了pipeline。</li>\n<li>，，，</li>\n<li>在预处理过程中，计算RMS（root mean square均方根），如果这个数值低于一个临界值，就标记为silence。静默片段的这个阈值是根据所有声音片段的RMS生成的离散点图确认的。</li>\n<li>再到特征提取：他们团队使用了梅尔频率倒谱系数   —-并没有详细讲mfcc的基础知识，我只是简单了解了一下原理。（一组声音数据，分成很多帧，每一帧经过快速傅立叶变换FFT获得相应的频谱，然后再经过梅尔滤波器获得梅尔频谱，然后在梅尔频谱上进行倒谱分析–取第2-13个系数）</li>\n<li>在分类里，用了线性SVM。（一种监督学习的方法，我对SVM的理解就是篮球红球，棍子分开），</li>\n<li>用了网格搜索来调参–（常用的找最优超参数的算法）</li>\n<li>标准化：介绍的是减去均值再除以方差</li>\n</ol>\n</li>\n<li>。。。</li>\n<li>第三篇呢是一个期刊上对于产品的介绍。<ol>\n<li>，，，</li>\n<li>他这个处理器是没有数字电路转换器的，所以他用了一个集成电路板来把时域信号转化成单片机能够识别的信号</li>\n<li>tiny voice的语音识别运用的理论基础就是把声音信号分为两个不同频率范围的共振峰区</li>\n<li>high-pass filtered：高通滤波，过滤掉低频信号</li>\n<li>硬件上用了这个只读存储器，在这里先略过。</li>\n<li>对于</li>\n<li>简略的flowchart：<ul>\n<li>recognize按下后的模式里。。。。。在没有阅读相似的源码的情况下，我觉得我还完全没有知其所以然</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>可能前面几页不够直观清晰，这一页我把他们放在一起，，</li>\n<li></li>\n<li>然后比较这三篇文章三种应用的话，我觉得相对于像tiny voice一样用不带ADC的处理器或者像FPGA这种半定制电路/逻辑门array，对于我这种初学者可能刚开始用一些比较好上手的单片机更好。</li>\n<li>好像一些基本原理我都已经知其然了，但是具体的算法实现和理论基础（你比如说像MFCC和SVM）我还要加深理解才行，需要更多的阅读和实践</li>\n<li>然后文章里具体描述的一些数据，采样频率等等我需要在自己的实践中慢慢来体会。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"stm32F750-🌟VAD项目✨\"><a href=\"#stm32F750-🌟VAD项目✨\" class=\"headerlink\" title=\"stm32F750 🌟VAD项目✨\"></a>stm32F750 🌟VAD项目✨</h2><ol>\n<li><h3 id=\"初识\"><a href=\"#初识\" class=\"headerlink\" title=\"初识\"></a>初识</h3><ol>\n<li>公司：ARM；内核：Cortex-M3内核的32位闪存微控制器</li>\n<li>电压范围2–3.6v I/O电压容限为5V</li>\n<li>N8H6：<ul>\n<li>8是<code>64k字节</code>的的闪存存储器</li>\n<li>H：封装的类型：BGA（BGA封装： Ball Grid Array Package）</li>\n<li>6: -40–85摄氏度</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>30 ： stm32<br>周四7.1: 了解stm32 （I/O，串口）</p>\n</li>\n<li><p>5 周一：阅读资料</p>\n<ol start=\"2\">\n<li><p>stm32系统<code>时钟</code>控制： 3种不同时钟源</p>\n<ol>\n<li>HSE振荡器时钟：<ol>\n<li>高速外部时钟信号<ol>\n<li>HSE外部<code>晶体</code>/陶瓷谐振器</li>\n<li>HSE用户<code>外部</code>时钟</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>HSI振荡器时钟<ol>\n<li>由<code>内部</code>8MHz的RC振荡器产生，直接作为系统时钟信号</li>\n<li>与HSE相比，不需要任何外部器件，启动时间短，但精度差。备用</li>\n</ol>\n</li>\n<li>PLL时钟: 内部 倍频<ul>\n<li>如使用usb，PLL必须被配置为输出48/72MHz时钟，用于提供48MHz的USBCLK时钟</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>中断系统：支持的中断84个（16个内核+68个外部）</p>\n</li>\n<li><p>固件函数库从：24个库（flash，lib，nvic中断，rcc时钟（Reset &amp;  clock control），gpio管脚绝大部分程序都涉及）</p>\n</li>\n<li><p>软件配置：通过设置flash菜单下的选项，选择目标芯片和型号，flash和RAM的存储起始地址和大小，选择仿真调试工具，闪存空间等</p>\n</li>\n<li><p>模块化编程：</p>\n<ol>\n<li>添加启动文件（cortexm3_marco.s和stm32f10x_vertor.s）</li>\n<li>添加对应外设的固件函数库（stm32f10x_xxx.c）</li>\n<li>添加中断服务程序模块（stm32f10x_it.c）</li>\n<li>编写外设配置（初始化）模块代码<ol>\n<li>开时钟RCC</li>\n<li>自身初始化</li>\n<li>相关管脚配置（GPIO）</li>\n<li>是否使用中断（NVIC）</li>\n<li>编写main函数中的应用程序及其子程序（一定要将<code>#include stm32f10x_lib.h</code>文件包含在其中）</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>NVIC（nested vector interrupt controller嵌套向量中断控制器）</p>\n<ol>\n<li>控制异常，设置各个异常的优先等级并对异常进行处理<ul>\n<li>所有异常都在处理器模式中处理 –handler mode</li>\n</ul>\n</li>\n<li>抢占 （产生嵌套，咬尾，晚到）</li>\n<li>NVIC支持优先级分组机制</li>\n</ol>\n</li>\n<li><p>IO由软件配置–8种模式：</p>\n<ol>\n<li>推挽输出：输出高，低电平，连接数字器件 两个三极管（参数相同），各负责正负半周的波形放大任务</li>\n<li>等等</li>\n<li>IO配置常用的8个寄存器：<ol>\n<li>MODER寄存器：GPIO端口模式控制寄存器 每两位配置一个IO口的I/O方向</li>\n<li>OTYPER寄存器：控制GPIO的<code>输出</code>类型  每一位配置一个I/O口的输出类型（推挽0/开漏1）</li>\n<li>OSPEEDR寄存器：GPIOs的输出速度 每两位</li>\n<li>ODR: 控制<code>输出</code>电平（高/低）</li>\n<li>BSRR: 复位</li>\n<li>IDR：读取GPIOx的输入数据</li>\n<li>两个32位复用功能选择寄存器AFRH+AFRL</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>外设 的概念</p>\n<ol>\n<li>还有外设的使能，失能，复位</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><h2 id=\"实验-源码-上手\"><a href=\"#实验-源码-上手\" class=\"headerlink\" title=\"实验 源码 上手\"></a>实验 源码 上手</h2><ol>\n<li>跑马灯 HAL库 源码<ol>\n<li>7.6周二下午 成功 –结合开发手册，需要着重理解的是<code>GPIO</code>和<code>LED0（1）LED1（0）</code>(led.h文件里的IO输出电平取反操作)</li>\n<li>初识了一个project的全过程 –注意有HARDWARE文件夹的创建，LED加入path等等基本过程</li>\n<li>LED亮灭：引脚输出高低电</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<p><code>定时器 io 串口 adc</code><br>采样频率 （定时器 1ms或者0.1ms）<br>adc 直流电源<br>单模块 集成调试</p>\n","site":{"data":{"styles":"body {\n  position: relative;\n  font-family: 'Lato', \"PingFang SC\", \"Microsoft YaHei\", sans-serif;\n  font-size: 14px;\n  line-height: 2;\n  color: #555;\n  background: #a5b8cc;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n/*更好的侧边滚动条*/\n::-webkit-scrollbar {\n  width: 10px;\n  height: 10px;\n}\n::-webkit-scrollbar-button {\n  width: 0;\n  height: 0;\n}\n::-webkit-scrollbar-button:start:increment,\n::-webkit-scrollbar-button:end:decrement {\n  display: none;\n}\n::-webkit-scrollbar-corner {\n  display: block;\n}\n::-webkit-scrollbar-thumb {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.2);\n}\n::-webkit-scrollbar-thumb:hover {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.5);\n}\n::-webkit-scrollbar-track,\n::-webkit-scrollbar-thumb {\n  border-right: 1px solid transparent;\n  border-left: 1px solid transparent;\n}\n::-webkit-scrollbar-track:hover {\n  background-color: rgba(0,0,0,0.15);\n}\n::-webkit-scrollbar-button:start {\n  width: 10px;\n  height: 10px;\n/*background: url(../images/scrollbar_arrow.png) no-repeat 0 0;*/\n/*可以添加滚动条样式*/\n}\n.post-sticky-flag {\n  font-size: inherit;\n  float: left;\n  color: #000;\n  cursor: help;\n  transition-duration: 0.2s;\n  transition-timing-function: ease-in-out;\n  transition-delay: 0s;\n}\n.post-sticky-flag:hover {\n  color: #07b39b;\n}\n.brand {\n  color: #ff6a6a;\n}\n.site-subtitle {\n  margin-top: 10px;\n  font-size: 13px;\n  color: #fff;\n}\n.busuanzi-value {\n  color: #1890ff;\n}\n* {\n  color: #35405b;\n}\n.site-meta {\n  margin: 0;\n  text-align: $site-meta-text-align;\nmobile()\n}\n.brand {\n  position: relative;\n  display: inline-block;\n  padding: 0 40px;\n  color: #ff6a6a;\n  background: $brand-bg;\n  border-bottom: none;\n}\n.brand:hover {\n  color: $brand-hover-color;\n}\n"}},"excerpt":"<h2 id=\"VAD-Paper\"><a href=\"#VAD-Paper\" class=\"headerlink\" title=\"VAD- -Paper\"></a>VAD- -Paper</h2>","more":"<ol>\n<li><h3 id=\"Kobe-Japan的\"><a href=\"#Kobe-Japan的\" class=\"headerlink\" title=\"Kobe Japan的\"></a>Kobe Japan的</h3><ol>\n<li><p>概念上：VAD:话语激活检测</p>\n<ol>\n<li><p>当用户的语音信号能量低于一定门限值时就认为是静默状态，也不发送语音分组。当检测到突发的活动声音时才生成语音信号，并加以传输。</p>\n</li>\n<li><p>从一段语音（纯净或带噪）信号中标识出语音片段与非语音片段</p>\n</li>\n<li><p>ADC：模拟数字转换器，模拟信号转变为数字信号</p>\n</li>\n<li><p>FPGA board： Field－Programmable Gate Array的缩写，即现场可编程门阵列。</p>\n</li>\n<li><p>第一步就是提取噪音信息。通常的思路是通过VAD函数得到非语音片段，而非语音片段可以认为是纯噪音片段。从而可以从纯噪音信号中提取出有用信息，例如进行傅里叶变换得到噪音频谱等，再进而做下一步处理。例如谱减法，维纳滤波。</p>\n</li>\n<li><p>zero cross counter (ZCC)： 过零率，一帧语音时域信号穿过0（时间轴）的次数。 语音片段ZCC较小，非语音片段ZCC较大</p>\n</li>\n<li><p>STE：short time energy：短时能量</p>\n</li>\n<li><p>我们通常使用麦克风进行音频录制的采样率为 16000Hz，一个采样点使用 16bit 来存储。</p>\n</li>\n<li><p>ksps：单位，kilo Samples per Second ，即采样千次每秒，是转化速率的单位。</p>\n</li>\n<li><p>dB：分贝</p>\n</li>\n<li><p>S/N：信噪比（单位是分贝），信号与噪声的比例。设备的信噪比越高表明它产生的噪声越少。越高越好。</p>\n</li>\n<li><p>d-flip flop：d触发器，两个稳定状态，即”0”和”1”</p>\n</li>\n</ol>\n</li>\n<li><p>语音识别的特征提取</p>\n<ol>\n<li>(一篇知乎上的文章)[<a href=\"https://zhuanlan.zhihu.com/p/147386972]\">https://zhuanlan.zhihu.com/p/147386972]</a> ：根据语音信号-&gt;预加重-&gt;分帧加窗-&gt;DFT-&gt;等等的流程来介绍</li>\n</ol>\n</li>\n<li><p>这篇文章：通过zero-crossing VAD algorithm判断speech或噪音，利用的原理就是把语音输入现转化为连续数字信号，再判断在某时刻该信号是否穿过x轴，如果这个input signal在该点的前一个峰值pass了设定的trigger line，那么它就是zero crossing，count相应+1.我们再根据某一段信号中zero crossing点出现的相对频率来判断这段信号到底是speech还是noise。用sum（用于记录zerocrossing数量的变量）/帧的长度来进行比较     （用中文做流程图）  。<br> 他们团队没有使用单片机，而是使用了FPGA芯片<br> 他们在陈述结果时，根据范围从-20—-20dB的信噪比的变化，用了Correct，False accptance和False rejection</p>\n</li>\n<li><p>好处坏处，改进的</p>\n<ul>\n<li>   ，，</li>\n<li>   没有关注人说了什么什么，只要人发出声音就会被识别</li>\n</ul>\n</li>\n<li><p>我得想法和思考</p>\n</li>\n<li><p>不懂的地方</p>\n</li>\n<li><p>结合看的相关其他文章</p>\n</li>\n</ol>\n</li>\n<li><h3 id=\"智能手表VADLite系统\"><a href=\"#智能手表VADLite系统\" class=\"headerlink\" title=\"智能手表VADLite系统\"></a>智能手表VADLite系统</h3><ol>\n<li>这个团队研发的开源系统，是在智能手表上可以安装下载的app。</li>\n<li>目的是结合他们以前有关于人体健康数据的智能产品，使得手表在用户呼叫的时候才会收集心率心跳等数据</li>\n<li>data preprocessing：他们收集了至少10个处于不同距离的不同的人对着手表讲话后的数据，一共3.5h。他们用了一个静默识别的算法来截取掉大部分安静的语音片段。 —–计算RMS（root mean square均方根），如果这个数值低于一个他们用离散点图确定下来的特定值，就标记为silence。  —》然后用SVM来识别人声和噪声—》分成25ms一帧，提取12 MFCC features—-》再用linear SVM来识别和分类。具体来说：</li>\n</ol>\n</li>\n<li><h3 id=\"Tiny-Voice\"><a href=\"#Tiny-Voice\" class=\"headerlink\" title=\"Tiny Voice\"></a>Tiny Voice</h3><ol>\n<li><p>，，</p>\n</li>\n<li><p>。。。</p>\n</li>\n<li><p>选择存储器：</p>\n<ol>\n<li>好处比较</li>\n</ol>\n</li>\n<li><p>interface 功能和规则 + 具体的用汇编语言写的软件： 结合起来用两张图放在一起，一起来说。</p>\n</li>\n</ol>\n</li>\n</ol>\n<pre><code>5. 我认为timer等一些想法或许我可以借鉴在我未来自己的设计中。它虽然很小，但并不是一个简单的系统。\n6. 不足：train的时候背景的噪音会对产生的template造成很大影响，从而影响recognize的效果。\n</code></pre>\n<ol start=\"4\">\n<li><h3 id=\"pre-—-for以上三paper-—-结合以slide（稿件草稿版）\"><a href=\"#pre-—-for以上三paper-—-结合以slide（稿件草稿版）\" class=\"headerlink\" title=\"pre —-for以上三paper —-结合以slide（稿件草稿版）\"></a>pre —-for以上三paper —-结合以slide（稿件草稿版）</h3> 可能耽误大家几分钟的时间，我将对我上个周阅读的三篇关于语音识别的文章向大家做一个简单的介绍和汇报。首先我会分别按照这三篇文章的大概脉络来说一下对这三种里面的算法啊应用啊我的理解，然后在最后总结的时候，我会横向比较一下这三个，说一下我的理解和困惑<ol>\n<li>感觉这三篇都没有着重讲算法的实现和理论的公式，所以对于我来说比较好理解。 我首先会简单介绍文章中所提到的它们的背景，目的等，我可能要简单说一下硬件部分，着重讲一下我所理解的，他们实现VAD的方法。最后我会比较和总结一下这三种应用，说一下自己的思考和一些困惑。</li>\n<li>介绍第一篇论文：在一个智能通用传感器系统里，为了能够减少能耗，他们设计和应用了这个VAD模块。就是当vad没有识别到语音信号的时候，这个系统的其他电路都是没通电的。<ol>\n<li>。。。</li>\n<li>我不熟悉画这种图所以引用了一张原文的图片    着重的是这两点     这个帧长根据文中的描述应该是256</li>\n<li>不足：文章中也提到，相比于一些frequency domain algorithm ，我们的zero crossing算法作为基于时域的，在信噪比比较低的情况下准确率一般<ol start=\"2\">\n<li>然后我可能对于这两条trigger line的确定方法不是很懂 –结尾</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>。。</li>\n<li>第二篇VADLite（手表）：<ol>\n<li>来自苏黎世联邦理工大学的开源项目</li>\n<li>设计初衷是希望与他们之前的智能人体健康数据产品相结合，使得在用户呼唤手表时，能够相应的测量和记录血压血样心率等等数据</li>\n<li>下面这个图简单描述了系统的框架，分为两个模块。他们用了pipeline。</li>\n<li>，，，</li>\n<li>在预处理过程中，计算RMS（root mean square均方根），如果这个数值低于一个临界值，就标记为silence。静默片段的这个阈值是根据所有声音片段的RMS生成的离散点图确认的。</li>\n<li>再到特征提取：他们团队使用了梅尔频率倒谱系数   —-并没有详细讲mfcc的基础知识，我只是简单了解了一下原理。（一组声音数据，分成很多帧，每一帧经过快速傅立叶变换FFT获得相应的频谱，然后再经过梅尔滤波器获得梅尔频谱，然后在梅尔频谱上进行倒谱分析–取第2-13个系数）</li>\n<li>在分类里，用了线性SVM。（一种监督学习的方法，我对SVM的理解就是篮球红球，棍子分开），</li>\n<li>用了网格搜索来调参–（常用的找最优超参数的算法）</li>\n<li>标准化：介绍的是减去均值再除以方差</li>\n</ol>\n</li>\n<li>。。。</li>\n<li>第三篇呢是一个期刊上对于产品的介绍。<ol>\n<li>，，，</li>\n<li>他这个处理器是没有数字电路转换器的，所以他用了一个集成电路板来把时域信号转化成单片机能够识别的信号</li>\n<li>tiny voice的语音识别运用的理论基础就是把声音信号分为两个不同频率范围的共振峰区</li>\n<li>high-pass filtered：高通滤波，过滤掉低频信号</li>\n<li>硬件上用了这个只读存储器，在这里先略过。</li>\n<li>对于</li>\n<li>简略的flowchart：<ul>\n<li>recognize按下后的模式里。。。。。在没有阅读相似的源码的情况下，我觉得我还完全没有知其所以然</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>可能前面几页不够直观清晰，这一页我把他们放在一起，，</li>\n<li></li>\n<li>然后比较这三篇文章三种应用的话，我觉得相对于像tiny voice一样用不带ADC的处理器或者像FPGA这种半定制电路/逻辑门array，对于我这种初学者可能刚开始用一些比较好上手的单片机更好。</li>\n<li>好像一些基本原理我都已经知其然了，但是具体的算法实现和理论基础（你比如说像MFCC和SVM）我还要加深理解才行，需要更多的阅读和实践</li>\n<li>然后文章里具体描述的一些数据，采样频率等等我需要在自己的实践中慢慢来体会。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"stm32F750-🌟VAD项目✨\"><a href=\"#stm32F750-🌟VAD项目✨\" class=\"headerlink\" title=\"stm32F750 🌟VAD项目✨\"></a>stm32F750 🌟VAD项目✨</h2><ol>\n<li><h3 id=\"初识\"><a href=\"#初识\" class=\"headerlink\" title=\"初识\"></a>初识</h3><ol>\n<li>公司：ARM；内核：Cortex-M3内核的32位闪存微控制器</li>\n<li>电压范围2–3.6v I/O电压容限为5V</li>\n<li>N8H6：<ul>\n<li>8是<code>64k字节</code>的的闪存存储器</li>\n<li>H：封装的类型：BGA（BGA封装： Ball Grid Array Package）</li>\n<li>6: -40–85摄氏度</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>30 ： stm32<br>周四7.1: 了解stm32 （I/O，串口）</p>\n</li>\n<li><p>5 周一：阅读资料</p>\n<ol start=\"2\">\n<li><p>stm32系统<code>时钟</code>控制： 3种不同时钟源</p>\n<ol>\n<li>HSE振荡器时钟：<ol>\n<li>高速外部时钟信号<ol>\n<li>HSE外部<code>晶体</code>/陶瓷谐振器</li>\n<li>HSE用户<code>外部</code>时钟</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>HSI振荡器时钟<ol>\n<li>由<code>内部</code>8MHz的RC振荡器产生，直接作为系统时钟信号</li>\n<li>与HSE相比，不需要任何外部器件，启动时间短，但精度差。备用</li>\n</ol>\n</li>\n<li>PLL时钟: 内部 倍频<ul>\n<li>如使用usb，PLL必须被配置为输出48/72MHz时钟，用于提供48MHz的USBCLK时钟</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>中断系统：支持的中断84个（16个内核+68个外部）</p>\n</li>\n<li><p>固件函数库从：24个库（flash，lib，nvic中断，rcc时钟（Reset &amp;  clock control），gpio管脚绝大部分程序都涉及）</p>\n</li>\n<li><p>软件配置：通过设置flash菜单下的选项，选择目标芯片和型号，flash和RAM的存储起始地址和大小，选择仿真调试工具，闪存空间等</p>\n</li>\n<li><p>模块化编程：</p>\n<ol>\n<li>添加启动文件（cortexm3_marco.s和stm32f10x_vertor.s）</li>\n<li>添加对应外设的固件函数库（stm32f10x_xxx.c）</li>\n<li>添加中断服务程序模块（stm32f10x_it.c）</li>\n<li>编写外设配置（初始化）模块代码<ol>\n<li>开时钟RCC</li>\n<li>自身初始化</li>\n<li>相关管脚配置（GPIO）</li>\n<li>是否使用中断（NVIC）</li>\n<li>编写main函数中的应用程序及其子程序（一定要将<code>#include stm32f10x_lib.h</code>文件包含在其中）</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>NVIC（nested vector interrupt controller嵌套向量中断控制器）</p>\n<ol>\n<li>控制异常，设置各个异常的优先等级并对异常进行处理<ul>\n<li>所有异常都在处理器模式中处理 –handler mode</li>\n</ul>\n</li>\n<li>抢占 （产生嵌套，咬尾，晚到）</li>\n<li>NVIC支持优先级分组机制</li>\n</ol>\n</li>\n<li><p>IO由软件配置–8种模式：</p>\n<ol>\n<li>推挽输出：输出高，低电平，连接数字器件 两个三极管（参数相同），各负责正负半周的波形放大任务</li>\n<li>等等</li>\n<li>IO配置常用的8个寄存器：<ol>\n<li>MODER寄存器：GPIO端口模式控制寄存器 每两位配置一个IO口的I/O方向</li>\n<li>OTYPER寄存器：控制GPIO的<code>输出</code>类型  每一位配置一个I/O口的输出类型（推挽0/开漏1）</li>\n<li>OSPEEDR寄存器：GPIOs的输出速度 每两位</li>\n<li>ODR: 控制<code>输出</code>电平（高/低）</li>\n<li>BSRR: 复位</li>\n<li>IDR：读取GPIOx的输入数据</li>\n<li>两个32位复用功能选择寄存器AFRH+AFRL</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>外设 的概念</p>\n<ol>\n<li>还有外设的使能，失能，复位</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><h2 id=\"实验-源码-上手\"><a href=\"#实验-源码-上手\" class=\"headerlink\" title=\"实验 源码 上手\"></a>实验 源码 上手</h2><ol>\n<li>跑马灯 HAL库 源码<ol>\n<li>7.6周二下午 成功 –结合开发手册，需要着重理解的是<code>GPIO</code>和<code>LED0（1）LED1（0）</code>(led.h文件里的IO输出电平取反操作)</li>\n<li>初识了一个project的全过程 –注意有HARDWARE文件夹的创建，LED加入path等等基本过程</li>\n<li>LED亮灭：引脚输出高低电</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<p><code>定时器 io 串口 adc</code><br>采样频率 （定时器 1ms或者0.1ms）<br>adc 直流电源<br>单模块 集成调试</p>"},{"title":"PPA_notes","date":"2019-11-03T00:34:48.000Z","password":"password","top":null,"_content":"\n## week5\n<!--more-->\n### PPT提纲\n1. wihle loop\n2. for-each\n3. #### searching:\n     loop condition: *index < files.size() && !found*\n4. 不要用input == \"bye\"比较两个string,一定要用只能用<p>input.equals(\"bye\")</p>\n5. Iterator与iterator():\n      iterator()是collection有的一个method,return一个Iterator类的object,这个object可以用这几个Iterator类里的method:**hasNext,next,remove**\n      格式:`Iterator<ElementType> it = myCollection.iterator()`\n6. Index vs Iterator:**remove**的时候用iterator,\n7. anonymous objects: ?啥玩意儿,不管了\n\n## week7 Chapter6\n### 研读课本\n  1. responsibility-driven design, cohesion, coupling, refactoring\n  2. intance method:invoked on an **intance** of a class, 注意class method和instance method不互通不能互相引用\n  3. enum(enumerated types):枚举\n          枚举类型可以像类(class)类型一样，定义为一个单独的文件，当然也可以定义在其他类内部\n### 预习PPT&提纲\n 1. 几个class:random\n 2. Set,Map\n      hashSet,hashMap\n 3. list,map和set的比较\n 4. wrapper classes\n     int 和 Interger\n 5. autoboxing and unboxing\n 6. static\n\n\n## 七\n### yi\n1. 为什么add（E e）返回的是boolean\n2. random的引用\n3. selecting random responses\n    - responses的arraylist是怎么产生的\n\n\n## 八 Week 8\n\n### 上课 ppt\n1.  cohesion:  each unit is responsible for one single logical task\n     unit: class, method\n     关于hashmap的疑问\n      - 是否要两个元素，前面的是key，后面的事value？\n     对于zuul： 每个class都有相应的作用。game类作为main与user和terminal交流，print东西，但是room就不能print东西。\n2. 2 important: coupling: loose coupling  : interface,change 1 do not need to change another.\n3. 周五上课\\-\\-\\-看的回放\\-\\-\\-\\-11.18\n     1.\n        - arraylist和hashmap等等里面不能有primitive types\n        - primitive types(int,boolean等等)不是object\n        - 引出wrapper class(Interger,Float...)\n        - primitive-type values wrap in objects to be stored in a **collection**\n        - autoboxing & unboxing\n        - [int和Integer的比较](https://blog.csdn.net/chenliguan/article/details/53888018 \"int和Integer\")\n        - [这个讲的更详细](https://blog.csdn.net/Teacher_Lee_ZZSXT/article/details/79230501 \"更详细的比较\")\n     2. class variables\n       - shared between all instances of the class.\n       - 属于class, 独立于instances\n       - 有keyword:**static**\n       - 用class的name在引用.前\n       - 与fields的区别?:field属于class的对象里??\n       - 用于:在一个class里不同的对象都需要用的变量\n     3. constant\n       - **final**\n       - 不能change\n       - 可以是public的\n       - static final : 经常的组合\n       - class constants:变量名大写\n       - 疑惑:final,constant和fields...static的关系\n       - static和final得关系\n       - 明确field,local variable...等等这些的关系\n       - constant 也可以不是final的,可以再更改它的值\n     4. class method\n       - static的方法都是class method\n       - 可直接调用\n       - 那存在的必要是什呢,跟其他的object method比\n             \\-\\-\\-不 depend于object\n       - limitations: instance method can call class method, but class method cannot call instance method and instance fields. 也就是说它只能用static fields,但object method 能用所有fields.\n\n     5. outside bluej\n      - public static void main(String[] arg)\n\n\n## 九 week9\n### Using java without bluej\n  1. 几个文件的后缀：java，class,txt..\n  2. Javac :终端命令，是java编译器的名称？\n  3. Javac 把.java变成.class\n  4. Emacs命令\n  5. java命令（后接类名无后缀）start JVM，开始执行程序\n  6.   the edit-compile-execute cycle：理解JVM\n    - Editor\\-\\-\\-source file\\-\\-\\-compiler(javac)\\-\\-\\-class file\\-\\-\\-virtual machine(java)\n  7. 每个system都有其JVM\n  8. main method应该做什么 \\-\\-\\-PPT里\n### Fixed-sized collections\n  1. Arrays的特性\n     - Fixed in length 他在讲什么memory之类的东西。。。\n     - Use a special syntax语法\n     - 它的对象没有methods，methods从其他class而来\n     - methods都是static的\n  2. -最大size可以？？\n  3. 与List的不同之处arrays可以store对象引用和基础数据类型疑问又来了，List为何不可\n  4. 例子project：weblog-analyzer\n  5. array的语法\n  6. mutator和accessor忘了\n  7. array更改element的原理\n  8. array literals\n  9. array length\n### 周五11.22的回看11.25\n  1. for-each loop: remove和add会导致error\n```java\nfor(String s : list){\n  if(s.startWith(\"t\")){\n    list.remove(s);\n    //如果remove,会skip\n  }\n}\n```\n  - 为何呢\n  - 用 for loop? \\-\\-\\-也不好\n  - 解决办法:**Iterator**(用while)\n  - Iterator用for的话,最后一个counter不需要\n  - [遍历list删除元素的总结](https://blog.csdn.net/github_2011/article/details/54927531 \"总结\")\n  2. 二维数组[][]\n    1. 例子:brain\n    - Environment里面的setup好奇怪\n    2. 处理图片就是处理二维数组\n\n## 十 week10\nfunctional processing of collections\n### 预习PPT提纲\n1. Lambdas\n  - code can be treated as data\n  - segments of code can be stored in variables,passed as para\n2. Method vs Lambdas\n\n\n2. Stream\n3. filter，map，reduce\n4. pipelines\n\n\n### 周五的recording\n\n\n\n## 疑惑与计划\n 1. auction project的源代码 看 \\-\\-\\-11.4早于lse\n\n\n## 代码分析\n### brain\n1. cells二维数组的初始化令人迷惑\n\n## 网址干货收藏\n1. [java基础博客](https://songlee24.github.io/2016/03/16/java-basic-note-1/ \"java基础知识\")\n2. [清华大学计算机系课程](https://github.com/PKUanonym/REKCARC-TSC-UHT \"清华大学课程\")\n3. [知乎人工智能入门](https://zhuanlan.zhihu.com/p/31650418?utm_source=wechat_timeline&utm_medium=social&utm_oi=898106614555504640&from=timeline&isappinstalled=0 \"知乎AI入门\")\n4. [要掌握的算法](https://www.zhihu.com/question/23148377/answer/863990767 \"要掌握的算法\")\n","source":"_posts/PPA.md","raw":"---\ntitle: PPA_notes\ndate: 2019-11-03 08:34:48\ntags:\ncategories:\n- 2019\n- KCL\n- PPA\npassword: password\ntop:\n---\n\n## week5\n<!--more-->\n### PPT提纲\n1. wihle loop\n2. for-each\n3. #### searching:\n     loop condition: *index < files.size() && !found*\n4. 不要用input == \"bye\"比较两个string,一定要用只能用<p>input.equals(\"bye\")</p>\n5. Iterator与iterator():\n      iterator()是collection有的一个method,return一个Iterator类的object,这个object可以用这几个Iterator类里的method:**hasNext,next,remove**\n      格式:`Iterator<ElementType> it = myCollection.iterator()`\n6. Index vs Iterator:**remove**的时候用iterator,\n7. anonymous objects: ?啥玩意儿,不管了\n\n## week7 Chapter6\n### 研读课本\n  1. responsibility-driven design, cohesion, coupling, refactoring\n  2. intance method:invoked on an **intance** of a class, 注意class method和instance method不互通不能互相引用\n  3. enum(enumerated types):枚举\n          枚举类型可以像类(class)类型一样，定义为一个单独的文件，当然也可以定义在其他类内部\n### 预习PPT&提纲\n 1. 几个class:random\n 2. Set,Map\n      hashSet,hashMap\n 3. list,map和set的比较\n 4. wrapper classes\n     int 和 Interger\n 5. autoboxing and unboxing\n 6. static\n\n\n## 七\n### yi\n1. 为什么add（E e）返回的是boolean\n2. random的引用\n3. selecting random responses\n    - responses的arraylist是怎么产生的\n\n\n## 八 Week 8\n\n### 上课 ppt\n1.  cohesion:  each unit is responsible for one single logical task\n     unit: class, method\n     关于hashmap的疑问\n      - 是否要两个元素，前面的是key，后面的事value？\n     对于zuul： 每个class都有相应的作用。game类作为main与user和terminal交流，print东西，但是room就不能print东西。\n2. 2 important: coupling: loose coupling  : interface,change 1 do not need to change another.\n3. 周五上课\\-\\-\\-看的回放\\-\\-\\-\\-11.18\n     1.\n        - arraylist和hashmap等等里面不能有primitive types\n        - primitive types(int,boolean等等)不是object\n        - 引出wrapper class(Interger,Float...)\n        - primitive-type values wrap in objects to be stored in a **collection**\n        - autoboxing & unboxing\n        - [int和Integer的比较](https://blog.csdn.net/chenliguan/article/details/53888018 \"int和Integer\")\n        - [这个讲的更详细](https://blog.csdn.net/Teacher_Lee_ZZSXT/article/details/79230501 \"更详细的比较\")\n     2. class variables\n       - shared between all instances of the class.\n       - 属于class, 独立于instances\n       - 有keyword:**static**\n       - 用class的name在引用.前\n       - 与fields的区别?:field属于class的对象里??\n       - 用于:在一个class里不同的对象都需要用的变量\n     3. constant\n       - **final**\n       - 不能change\n       - 可以是public的\n       - static final : 经常的组合\n       - class constants:变量名大写\n       - 疑惑:final,constant和fields...static的关系\n       - static和final得关系\n       - 明确field,local variable...等等这些的关系\n       - constant 也可以不是final的,可以再更改它的值\n     4. class method\n       - static的方法都是class method\n       - 可直接调用\n       - 那存在的必要是什呢,跟其他的object method比\n             \\-\\-\\-不 depend于object\n       - limitations: instance method can call class method, but class method cannot call instance method and instance fields. 也就是说它只能用static fields,但object method 能用所有fields.\n\n     5. outside bluej\n      - public static void main(String[] arg)\n\n\n## 九 week9\n### Using java without bluej\n  1. 几个文件的后缀：java，class,txt..\n  2. Javac :终端命令，是java编译器的名称？\n  3. Javac 把.java变成.class\n  4. Emacs命令\n  5. java命令（后接类名无后缀）start JVM，开始执行程序\n  6.   the edit-compile-execute cycle：理解JVM\n    - Editor\\-\\-\\-source file\\-\\-\\-compiler(javac)\\-\\-\\-class file\\-\\-\\-virtual machine(java)\n  7. 每个system都有其JVM\n  8. main method应该做什么 \\-\\-\\-PPT里\n### Fixed-sized collections\n  1. Arrays的特性\n     - Fixed in length 他在讲什么memory之类的东西。。。\n     - Use a special syntax语法\n     - 它的对象没有methods，methods从其他class而来\n     - methods都是static的\n  2. -最大size可以？？\n  3. 与List的不同之处arrays可以store对象引用和基础数据类型疑问又来了，List为何不可\n  4. 例子project：weblog-analyzer\n  5. array的语法\n  6. mutator和accessor忘了\n  7. array更改element的原理\n  8. array literals\n  9. array length\n### 周五11.22的回看11.25\n  1. for-each loop: remove和add会导致error\n```java\nfor(String s : list){\n  if(s.startWith(\"t\")){\n    list.remove(s);\n    //如果remove,会skip\n  }\n}\n```\n  - 为何呢\n  - 用 for loop? \\-\\-\\-也不好\n  - 解决办法:**Iterator**(用while)\n  - Iterator用for的话,最后一个counter不需要\n  - [遍历list删除元素的总结](https://blog.csdn.net/github_2011/article/details/54927531 \"总结\")\n  2. 二维数组[][]\n    1. 例子:brain\n    - Environment里面的setup好奇怪\n    2. 处理图片就是处理二维数组\n\n## 十 week10\nfunctional processing of collections\n### 预习PPT提纲\n1. Lambdas\n  - code can be treated as data\n  - segments of code can be stored in variables,passed as para\n2. Method vs Lambdas\n\n\n2. Stream\n3. filter，map，reduce\n4. pipelines\n\n\n### 周五的recording\n\n\n\n## 疑惑与计划\n 1. auction project的源代码 看 \\-\\-\\-11.4早于lse\n\n\n## 代码分析\n### brain\n1. cells二维数组的初始化令人迷惑\n\n## 网址干货收藏\n1. [java基础博客](https://songlee24.github.io/2016/03/16/java-basic-note-1/ \"java基础知识\")\n2. [清华大学计算机系课程](https://github.com/PKUanonym/REKCARC-TSC-UHT \"清华大学课程\")\n3. [知乎人工智能入门](https://zhuanlan.zhihu.com/p/31650418?utm_source=wechat_timeline&utm_medium=social&utm_oi=898106614555504640&from=timeline&isappinstalled=0 \"知乎AI入门\")\n4. [要掌握的算法](https://www.zhihu.com/question/23148377/answer/863990767 \"要掌握的算法\")\n","slug":"PPA","published":1,"updated":"2019-11-03T00:34:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqs0rf7o000h0mwl9xjk1f9i","content":"<h2 id=\"week5\"><a href=\"#week5\" class=\"headerlink\" title=\"week5\"></a>week5</h2><span id=\"more\"></span>\n<h3 id=\"PPT提纲\"><a href=\"#PPT提纲\" class=\"headerlink\" title=\"PPT提纲\"></a>PPT提纲</h3><ol>\n<li>wihle loop</li>\n<li>for-each</li>\n<li><h4 id=\"searching\"><a href=\"#searching\" class=\"headerlink\" title=\"searching:\"></a>searching:</h4>  loop condition: <em>index &lt; files.size() &amp;&amp; !found</em></li>\n<li>不要用input == “bye”比较两个string,一定要用只能用<p>input.equals(“bye”)</p></li>\n<li>Iterator与iterator():<br>   iterator()是collection有的一个method,return一个Iterator类的object,这个object可以用这几个Iterator类里的method:<strong>hasNext,next,remove</strong><br>   格式:<code>Iterator&lt;ElementType&gt; it = myCollection.iterator()</code></li>\n<li>Index vs Iterator:<strong>remove</strong>的时候用iterator,</li>\n<li>anonymous objects: ?啥玩意儿,不管了</li>\n</ol>\n<h2 id=\"week7-Chapter6\"><a href=\"#week7-Chapter6\" class=\"headerlink\" title=\"week7 Chapter6\"></a>week7 Chapter6</h2><h3 id=\"研读课本\"><a href=\"#研读课本\" class=\"headerlink\" title=\"研读课本\"></a>研读课本</h3><ol>\n<li>responsibility-driven design, cohesion, coupling, refactoring</li>\n<li>intance method:invoked on an <strong>intance</strong> of a class, 注意class method和instance method不互通不能互相引用</li>\n<li>enum(enumerated types):枚举<pre><code> 枚举类型可以像类(class)类型一样，定义为一个单独的文件，当然也可以定义在其他类内部\n</code></pre>\n<h3 id=\"预习PPT-amp-提纲\"><a href=\"#预习PPT-amp-提纲\" class=\"headerlink\" title=\"预习PPT&amp;提纲\"></a>预习PPT&amp;提纲</h3></li>\n<li>几个class:random</li>\n<li>Set,Map<br>  hashSet,hashMap</li>\n<li>list,map和set的比较</li>\n<li>wrapper classes<br> int 和 Interger</li>\n<li>autoboxing and unboxing</li>\n<li>static</li>\n</ol>\n<h2 id=\"七\"><a href=\"#七\" class=\"headerlink\" title=\"七\"></a>七</h2><h3 id=\"yi\"><a href=\"#yi\" class=\"headerlink\" title=\"yi\"></a>yi</h3><ol>\n<li>为什么add（E e）返回的是boolean</li>\n<li>random的引用</li>\n<li>selecting random responses<ul>\n<li>responses的arraylist是怎么产生的</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"八-Week-8\"><a href=\"#八-Week-8\" class=\"headerlink\" title=\"八 Week 8\"></a>八 Week 8</h2><h3 id=\"上课-ppt\"><a href=\"#上课-ppt\" class=\"headerlink\" title=\"上课 ppt\"></a>上课 ppt</h3><ol>\n<li><p>cohesion:  each unit is responsible for one single logical task<br>  unit: class, method<br>  关于hashmap的疑问</p>\n<ul>\n<li>是否要两个元素，前面的是key，后面的事value？<br>对于zuul： 每个class都有相应的作用。game类作为main与user和terminal交流，print东西，但是room就不能print东西。</li>\n</ul>\n</li>\n<li><p>2 important: coupling: loose coupling  : interface,change 1 do not need to change another.</p>\n</li>\n<li><p>周五上课---看的回放----11.18<br>  1.</p>\n<pre><code> - arraylist和hashmap等等里面不能有primitive types\n - primitive types(int,boolean等等)不是object\n - 引出wrapper class(Interger,Float...)\n - primitive-type values wrap in objects to be stored in a **collection**\n - autoboxing &amp; unboxing\n - [int和Integer的比较](https://blog.csdn.net/chenliguan/article/details/53888018 &quot;int和Integer&quot;)\n - [这个讲的更详细](https://blog.csdn.net/Teacher_Lee_ZZSXT/article/details/79230501 &quot;更详细的比较&quot;)\n</code></pre>\n<ol start=\"2\">\n<li><p>class variables    - shared between all instances of the class.    - 属于class, 独立于instances    - 有keyword:<strong>static</strong>    - 用class的name在引用.前    - 与fields的区别?:field属于class的对象里??    - 用于:在一个class里不同的对象都需要用的变量</p>\n</li>\n<li><p>constant    - <strong>final</strong>    - 不能change    - 可以是public的    - static final : 经常的组合    - class constants:变量名大写    - 疑惑:final,constant和fields…static的关系    - static和final得关系    - 明确field,local variable…等等这些的关系    - constant 也可以不是final的,可以再更改它的值</p>\n</li>\n<li><p>class method    - static的方法都是class method    - 可直接调用    - 那存在的必要是什呢,跟其他的object method比</p>\n<pre><code> \\-\\-\\-不 depend于object    - limitations: instance method can call class method, but class method cannot call instance method and instance fields. 也就是说它只能用static fields,但object method 能用所有fields.\n</code></pre>\n</li>\n<li><p>outside bluej</p>\n</li>\n</ol>\n<ul>\n<li>public static void main(String[] arg)</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"九-week9\"><a href=\"#九-week9\" class=\"headerlink\" title=\"九 week9\"></a>九 week9</h2><h3 id=\"Using-java-without-bluej\"><a href=\"#Using-java-without-bluej\" class=\"headerlink\" title=\"Using java without bluej\"></a>Using java without bluej</h3><ol>\n<li>几个文件的后缀：java，class,txt..</li>\n<li>Javac :终端命令，是java编译器的名称？</li>\n<li>Javac 把.java变成.class</li>\n<li>Emacs命令</li>\n<li>java命令（后接类名无后缀）start JVM，开始执行程序</li>\n<li>  the edit-compile-execute cycle：理解JVM    - Editor---source file---compiler(javac)---class file---virtual machine(java)</li>\n<li>每个system都有其JVM</li>\n<li>main method应该做什么 ---PPT里<h3 id=\"Fixed-sized-collections\"><a href=\"#Fixed-sized-collections\" class=\"headerlink\" title=\"Fixed-sized collections\"></a>Fixed-sized collections</h3></li>\n<li>Arrays的特性<ul>\n<li>Fixed in length 他在讲什么memory之类的东西。。。</li>\n<li>Use a special syntax语法</li>\n<li>它的对象没有methods，methods从其他class而来</li>\n<li>methods都是static的</li>\n</ul>\n</li>\n<li>-最大size可以？？</li>\n<li>与List的不同之处arrays可以store对象引用和基础数据类型疑问又来了，List为何不可</li>\n<li>例子project：weblog-analyzer</li>\n<li>array的语法</li>\n<li>mutator和accessor忘了</li>\n<li>array更改element的原理</li>\n<li>array literals</li>\n<li>array length<h3 id=\"周五11-22的回看11-25\"><a href=\"#周五11-22的回看11-25\" class=\"headerlink\" title=\"周五11.22的回看11.25\"></a>周五11.22的回看11.25</h3></li>\n<li>for-each loop: remove和add会导致error<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(String s : list)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(s.startWith(<span class=\"string\">&quot;t&quot;</span>))&#123;</span><br><span class=\"line\">    list.remove(s);</span><br><span class=\"line\">    <span class=\"comment\">//如果remove,会skip</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>为何呢</li>\n<li>用 for loop? ---也不好</li>\n<li>解决办法:<strong>Iterator</strong>(用while)</li>\n<li>Iterator用for的话,最后一个counter不需要</li>\n<li><a href=\"https://blog.csdn.net/github_2011/article/details/54927531\" title=\"总结\">遍历list删除元素的总结</a></li>\n</ul>\n<ol start=\"2\">\n<li>二维数组[][]    1. 例子:brain    - Environment里面的setup好奇怪    2. 处理图片就是处理二维数组</li>\n</ol>\n<h2 id=\"十-week10\"><a href=\"#十-week10\" class=\"headerlink\" title=\"十 week10\"></a>十 week10</h2><p>functional processing of collections</p>\n<h3 id=\"预习PPT提纲\"><a href=\"#预习PPT提纲\" class=\"headerlink\" title=\"预习PPT提纲\"></a>预习PPT提纲</h3><ol>\n<li>Lambdas</li>\n</ol>\n<ul>\n<li>code can be treated as data</li>\n<li>segments of code can be stored in variables,passed as para</li>\n</ul>\n<ol start=\"2\">\n<li>Method vs Lambdas</li>\n</ol>\n<ol start=\"2\">\n<li>Stream</li>\n<li>filter，map，reduce</li>\n<li>pipelines</li>\n</ol>\n<h3 id=\"周五的recording\"><a href=\"#周五的recording\" class=\"headerlink\" title=\"周五的recording\"></a>周五的recording</h3><h2 id=\"疑惑与计划\"><a href=\"#疑惑与计划\" class=\"headerlink\" title=\"疑惑与计划\"></a>疑惑与计划</h2><ol>\n<li>auction project的源代码 看 ---11.4早于lse</li>\n</ol>\n<h2 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h2><h3 id=\"brain\"><a href=\"#brain\" class=\"headerlink\" title=\"brain\"></a>brain</h3><ol>\n<li>cells二维数组的初始化令人迷惑</li>\n</ol>\n<h2 id=\"网址干货收藏\"><a href=\"#网址干货收藏\" class=\"headerlink\" title=\"网址干货收藏\"></a>网址干货收藏</h2><ol>\n<li><a href=\"https://songlee24.github.io/2016/03/16/java-basic-note-1/\" title=\"java基础知识\">java基础博客</a></li>\n<li><a href=\"https://github.com/PKUanonym/REKCARC-TSC-UHT\" title=\"清华大学课程\">清华大学计算机系课程</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/31650418?utm_source=wechat_timeline&utm_medium=social&utm_oi=898106614555504640&from=timeline&isappinstalled=0\" title=\"知乎AI入门\">知乎人工智能入门</a></li>\n<li><a href=\"https://www.zhihu.com/question/23148377/answer/863990767\" title=\"要掌握的算法\">要掌握的算法</a></li>\n</ol>\n","site":{"data":{"styles":"body {\n  position: relative;\n  font-family: 'Lato', \"PingFang SC\", \"Microsoft YaHei\", sans-serif;\n  font-size: 14px;\n  line-height: 2;\n  color: #555;\n  background: #a5b8cc;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n/*更好的侧边滚动条*/\n::-webkit-scrollbar {\n  width: 10px;\n  height: 10px;\n}\n::-webkit-scrollbar-button {\n  width: 0;\n  height: 0;\n}\n::-webkit-scrollbar-button:start:increment,\n::-webkit-scrollbar-button:end:decrement {\n  display: none;\n}\n::-webkit-scrollbar-corner {\n  display: block;\n}\n::-webkit-scrollbar-thumb {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.2);\n}\n::-webkit-scrollbar-thumb:hover {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.5);\n}\n::-webkit-scrollbar-track,\n::-webkit-scrollbar-thumb {\n  border-right: 1px solid transparent;\n  border-left: 1px solid transparent;\n}\n::-webkit-scrollbar-track:hover {\n  background-color: rgba(0,0,0,0.15);\n}\n::-webkit-scrollbar-button:start {\n  width: 10px;\n  height: 10px;\n/*background: url(../images/scrollbar_arrow.png) no-repeat 0 0;*/\n/*可以添加滚动条样式*/\n}\n.post-sticky-flag {\n  font-size: inherit;\n  float: left;\n  color: #000;\n  cursor: help;\n  transition-duration: 0.2s;\n  transition-timing-function: ease-in-out;\n  transition-delay: 0s;\n}\n.post-sticky-flag:hover {\n  color: #07b39b;\n}\n.brand {\n  color: #ff6a6a;\n}\n.site-subtitle {\n  margin-top: 10px;\n  font-size: 13px;\n  color: #fff;\n}\n.busuanzi-value {\n  color: #1890ff;\n}\n* {\n  color: #35405b;\n}\n.site-meta {\n  margin: 0;\n  text-align: $site-meta-text-align;\nmobile()\n}\n.brand {\n  position: relative;\n  display: inline-block;\n  padding: 0 40px;\n  color: #ff6a6a;\n  background: $brand-bg;\n  border-bottom: none;\n}\n.brand:hover {\n  color: $brand-hover-color;\n}\n"}},"excerpt":"<h2 id=\"week5\"><a href=\"#week5\" class=\"headerlink\" title=\"week5\"></a>week5</h2>","more":"<h3 id=\"PPT提纲\"><a href=\"#PPT提纲\" class=\"headerlink\" title=\"PPT提纲\"></a>PPT提纲</h3><ol>\n<li>wihle loop</li>\n<li>for-each</li>\n<li><h4 id=\"searching\"><a href=\"#searching\" class=\"headerlink\" title=\"searching:\"></a>searching:</h4>  loop condition: <em>index &lt; files.size() &amp;&amp; !found</em></li>\n<li>不要用input == “bye”比较两个string,一定要用只能用<p>input.equals(“bye”)</p></li>\n<li>Iterator与iterator():<br>   iterator()是collection有的一个method,return一个Iterator类的object,这个object可以用这几个Iterator类里的method:<strong>hasNext,next,remove</strong><br>   格式:<code>Iterator&lt;ElementType&gt; it = myCollection.iterator()</code></li>\n<li>Index vs Iterator:<strong>remove</strong>的时候用iterator,</li>\n<li>anonymous objects: ?啥玩意儿,不管了</li>\n</ol>\n<h2 id=\"week7-Chapter6\"><a href=\"#week7-Chapter6\" class=\"headerlink\" title=\"week7 Chapter6\"></a>week7 Chapter6</h2><h3 id=\"研读课本\"><a href=\"#研读课本\" class=\"headerlink\" title=\"研读课本\"></a>研读课本</h3><ol>\n<li>responsibility-driven design, cohesion, coupling, refactoring</li>\n<li>intance method:invoked on an <strong>intance</strong> of a class, 注意class method和instance method不互通不能互相引用</li>\n<li>enum(enumerated types):枚举<pre><code> 枚举类型可以像类(class)类型一样，定义为一个单独的文件，当然也可以定义在其他类内部\n</code></pre>\n<h3 id=\"预习PPT-amp-提纲\"><a href=\"#预习PPT-amp-提纲\" class=\"headerlink\" title=\"预习PPT&amp;提纲\"></a>预习PPT&amp;提纲</h3></li>\n<li>几个class:random</li>\n<li>Set,Map<br>  hashSet,hashMap</li>\n<li>list,map和set的比较</li>\n<li>wrapper classes<br> int 和 Interger</li>\n<li>autoboxing and unboxing</li>\n<li>static</li>\n</ol>\n<h2 id=\"七\"><a href=\"#七\" class=\"headerlink\" title=\"七\"></a>七</h2><h3 id=\"yi\"><a href=\"#yi\" class=\"headerlink\" title=\"yi\"></a>yi</h3><ol>\n<li>为什么add（E e）返回的是boolean</li>\n<li>random的引用</li>\n<li>selecting random responses<ul>\n<li>responses的arraylist是怎么产生的</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"八-Week-8\"><a href=\"#八-Week-8\" class=\"headerlink\" title=\"八 Week 8\"></a>八 Week 8</h2><h3 id=\"上课-ppt\"><a href=\"#上课-ppt\" class=\"headerlink\" title=\"上课 ppt\"></a>上课 ppt</h3><ol>\n<li><p>cohesion:  each unit is responsible for one single logical task<br>  unit: class, method<br>  关于hashmap的疑问</p>\n<ul>\n<li>是否要两个元素，前面的是key，后面的事value？<br>对于zuul： 每个class都有相应的作用。game类作为main与user和terminal交流，print东西，但是room就不能print东西。</li>\n</ul>\n</li>\n<li><p>2 important: coupling: loose coupling  : interface,change 1 do not need to change another.</p>\n</li>\n<li><p>周五上课---看的回放----11.18<br>  1.</p>\n<pre><code> - arraylist和hashmap等等里面不能有primitive types\n - primitive types(int,boolean等等)不是object\n - 引出wrapper class(Interger,Float...)\n - primitive-type values wrap in objects to be stored in a **collection**\n - autoboxing &amp; unboxing\n - [int和Integer的比较](https://blog.csdn.net/chenliguan/article/details/53888018 &quot;int和Integer&quot;)\n - [这个讲的更详细](https://blog.csdn.net/Teacher_Lee_ZZSXT/article/details/79230501 &quot;更详细的比较&quot;)\n</code></pre>\n<ol start=\"2\">\n<li><p>class variables    - shared between all instances of the class.    - 属于class, 独立于instances    - 有keyword:<strong>static</strong>    - 用class的name在引用.前    - 与fields的区别?:field属于class的对象里??    - 用于:在一个class里不同的对象都需要用的变量</p>\n</li>\n<li><p>constant    - <strong>final</strong>    - 不能change    - 可以是public的    - static final : 经常的组合    - class constants:变量名大写    - 疑惑:final,constant和fields…static的关系    - static和final得关系    - 明确field,local variable…等等这些的关系    - constant 也可以不是final的,可以再更改它的值</p>\n</li>\n<li><p>class method    - static的方法都是class method    - 可直接调用    - 那存在的必要是什呢,跟其他的object method比</p>\n<pre><code> \\-\\-\\-不 depend于object    - limitations: instance method can call class method, but class method cannot call instance method and instance fields. 也就是说它只能用static fields,但object method 能用所有fields.\n</code></pre>\n</li>\n<li><p>outside bluej</p>\n</li>\n</ol>\n<ul>\n<li>public static void main(String[] arg)</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"九-week9\"><a href=\"#九-week9\" class=\"headerlink\" title=\"九 week9\"></a>九 week9</h2><h3 id=\"Using-java-without-bluej\"><a href=\"#Using-java-without-bluej\" class=\"headerlink\" title=\"Using java without bluej\"></a>Using java without bluej</h3><ol>\n<li>几个文件的后缀：java，class,txt..</li>\n<li>Javac :终端命令，是java编译器的名称？</li>\n<li>Javac 把.java变成.class</li>\n<li>Emacs命令</li>\n<li>java命令（后接类名无后缀）start JVM，开始执行程序</li>\n<li>  the edit-compile-execute cycle：理解JVM    - Editor---source file---compiler(javac)---class file---virtual machine(java)</li>\n<li>每个system都有其JVM</li>\n<li>main method应该做什么 ---PPT里<h3 id=\"Fixed-sized-collections\"><a href=\"#Fixed-sized-collections\" class=\"headerlink\" title=\"Fixed-sized collections\"></a>Fixed-sized collections</h3></li>\n<li>Arrays的特性<ul>\n<li>Fixed in length 他在讲什么memory之类的东西。。。</li>\n<li>Use a special syntax语法</li>\n<li>它的对象没有methods，methods从其他class而来</li>\n<li>methods都是static的</li>\n</ul>\n</li>\n<li>-最大size可以？？</li>\n<li>与List的不同之处arrays可以store对象引用和基础数据类型疑问又来了，List为何不可</li>\n<li>例子project：weblog-analyzer</li>\n<li>array的语法</li>\n<li>mutator和accessor忘了</li>\n<li>array更改element的原理</li>\n<li>array literals</li>\n<li>array length<h3 id=\"周五11-22的回看11-25\"><a href=\"#周五11-22的回看11-25\" class=\"headerlink\" title=\"周五11.22的回看11.25\"></a>周五11.22的回看11.25</h3></li>\n<li>for-each loop: remove和add会导致error<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(String s : list)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(s.startWith(<span class=\"string\">&quot;t&quot;</span>))&#123;</span><br><span class=\"line\">    list.remove(s);</span><br><span class=\"line\">    <span class=\"comment\">//如果remove,会skip</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>为何呢</li>\n<li>用 for loop? ---也不好</li>\n<li>解决办法:<strong>Iterator</strong>(用while)</li>\n<li>Iterator用for的话,最后一个counter不需要</li>\n<li><a href=\"https://blog.csdn.net/github_2011/article/details/54927531\" title=\"总结\">遍历list删除元素的总结</a></li>\n</ul>\n<ol start=\"2\">\n<li>二维数组[][]    1. 例子:brain    - Environment里面的setup好奇怪    2. 处理图片就是处理二维数组</li>\n</ol>\n<h2 id=\"十-week10\"><a href=\"#十-week10\" class=\"headerlink\" title=\"十 week10\"></a>十 week10</h2><p>functional processing of collections</p>\n<h3 id=\"预习PPT提纲\"><a href=\"#预习PPT提纲\" class=\"headerlink\" title=\"预习PPT提纲\"></a>预习PPT提纲</h3><ol>\n<li>Lambdas</li>\n</ol>\n<ul>\n<li>code can be treated as data</li>\n<li>segments of code can be stored in variables,passed as para</li>\n</ul>\n<ol start=\"2\">\n<li>Method vs Lambdas</li>\n</ol>\n<ol start=\"2\">\n<li>Stream</li>\n<li>filter，map，reduce</li>\n<li>pipelines</li>\n</ol>\n<h3 id=\"周五的recording\"><a href=\"#周五的recording\" class=\"headerlink\" title=\"周五的recording\"></a>周五的recording</h3><h2 id=\"疑惑与计划\"><a href=\"#疑惑与计划\" class=\"headerlink\" title=\"疑惑与计划\"></a>疑惑与计划</h2><ol>\n<li>auction project的源代码 看 ---11.4早于lse</li>\n</ol>\n<h2 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h2><h3 id=\"brain\"><a href=\"#brain\" class=\"headerlink\" title=\"brain\"></a>brain</h3><ol>\n<li>cells二维数组的初始化令人迷惑</li>\n</ol>\n<h2 id=\"网址干货收藏\"><a href=\"#网址干货收藏\" class=\"headerlink\" title=\"网址干货收藏\"></a>网址干货收藏</h2><ol>\n<li><a href=\"https://songlee24.github.io/2016/03/16/java-basic-note-1/\" title=\"java基础知识\">java基础博客</a></li>\n<li><a href=\"https://github.com/PKUanonym/REKCARC-TSC-UHT\" title=\"清华大学课程\">清华大学计算机系课程</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/31650418?utm_source=wechat_timeline&utm_medium=social&utm_oi=898106614555504640&from=timeline&isappinstalled=0\" title=\"知乎AI入门\">知乎人工智能入门</a></li>\n<li><a href=\"https://www.zhihu.com/question/23148377/answer/863990767\" title=\"要掌握的算法\">要掌握的算法</a></li>\n</ol>"},{"title":"系统们的更新日志","date":"2021-07-05T01:44:13.000Z","password":"password","top":500,"_content":"\n\n# 少出岔子 ok💢\n<!-- more -->\n\n1. 21.7.5\n    1. [按e把splash后面的参数修改成了nomodeset](https://blog.csdn.net/weixin_43074462/article/details/100716511)\n        - 但是是一次性的 不是一劳永逸\n    2. 所以进入系统后编辑`sudo vi /etc/default/grub `, 修改为`GRUB_CMDLINE_LINUX_DEFAULT=“quiet splash nomodeset”`，最后更新`sudo update-grub`\n        - 重启后顺利开机\n        - 但是，开机第一幕自动grub没解决\n    3. 解决自动进入grub\n```\nsudo update-grub\nsudo grub-install /dev/sda\n```\n\n2. ## 写个博客更新日志\n    1. 21.7.6 改了背景颜色（就在source里_data）[颜色](https://www.sioe.cn/yingyong/yanse-rgb-16/)\n        - [前人经验](https://marmalade.vip/nextthemebeautify3.html)\n\n```\n├── .github            #git信息\n├── languages          #多语言\n|   ├── default.yml    #默认语言\n|   └── zh-Hans.yml      #简体中文\n|   └── zh-tw.yml      #繁体中文\n├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制\n|   ├── _custom        #可以自己修改的模板，覆盖原有模板\n|   |   ├── _header.swig    #头部样式\n|   |   ├── _sidebar.swig   #侧边栏样式\n|   ├── _macro        #可以自己修改的模板，覆盖原有模板\n|   |   ├── post.swig    #文章模板\n|   |   ├── reward.swig    #打赏模板\n|   |   ├── sidebar.swig   #侧边栏模板\n|   ├── _partial       #局部的布局\n|   |   ├── head       #头部模板\n|   |   ├── search     #搜索模板\n|   |   ├── share      #分享模板\n|   ├── _script        #局部的布局\n|   ├── _third-party   #第三方模板\n|   ├── _layout.swig   #主页面模板\n|   ├── index.swig     #主页面模板\n|   ├── page           #页面模板\n|   └── tag.swig       #tag模板\n├── scripts            #script源码\n|   ├── tags           #tags的script源码\n|   ├── marge.js       #页面模板\n├── source             #源码\n|   ├── css            #css源码\n|   |   ├── _common    #*.styl基础css\n|   |   ├── _custom    #*.styl局部css\n|   |   └── _mixins    #mixins的css\n|   ├── fonts          #字体\n|   ├── images         #图片\n|   ├── uploads        #添加的文件\n|   └── js             #javascript源代码\n├── _config.yml        #主题配置文件\n└── README.md          #用GitHub的都知道\n```\n1. search功能还不行\n2. 进度条正中央的不见了\n3. 密码不管用了\n4. 标题和菜单颜色\n","source":"_posts/updateEveryday.md","raw":"---\ntitle: 系统们的更新日志\ndate: 2021-07-05 09:44:13\ntag:\n- ubuntu系统问题\ncategories:\n- UbuntuRecovery\npassword: password\ntop: 500\n---\n\n\n# 少出岔子 ok💢\n<!-- more -->\n\n1. 21.7.5\n    1. [按e把splash后面的参数修改成了nomodeset](https://blog.csdn.net/weixin_43074462/article/details/100716511)\n        - 但是是一次性的 不是一劳永逸\n    2. 所以进入系统后编辑`sudo vi /etc/default/grub `, 修改为`GRUB_CMDLINE_LINUX_DEFAULT=“quiet splash nomodeset”`，最后更新`sudo update-grub`\n        - 重启后顺利开机\n        - 但是，开机第一幕自动grub没解决\n    3. 解决自动进入grub\n```\nsudo update-grub\nsudo grub-install /dev/sda\n```\n\n2. ## 写个博客更新日志\n    1. 21.7.6 改了背景颜色（就在source里_data）[颜色](https://www.sioe.cn/yingyong/yanse-rgb-16/)\n        - [前人经验](https://marmalade.vip/nextthemebeautify3.html)\n\n```\n├── .github            #git信息\n├── languages          #多语言\n|   ├── default.yml    #默认语言\n|   └── zh-Hans.yml      #简体中文\n|   └── zh-tw.yml      #繁体中文\n├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制\n|   ├── _custom        #可以自己修改的模板，覆盖原有模板\n|   |   ├── _header.swig    #头部样式\n|   |   ├── _sidebar.swig   #侧边栏样式\n|   ├── _macro        #可以自己修改的模板，覆盖原有模板\n|   |   ├── post.swig    #文章模板\n|   |   ├── reward.swig    #打赏模板\n|   |   ├── sidebar.swig   #侧边栏模板\n|   ├── _partial       #局部的布局\n|   |   ├── head       #头部模板\n|   |   ├── search     #搜索模板\n|   |   ├── share      #分享模板\n|   ├── _script        #局部的布局\n|   ├── _third-party   #第三方模板\n|   ├── _layout.swig   #主页面模板\n|   ├── index.swig     #主页面模板\n|   ├── page           #页面模板\n|   └── tag.swig       #tag模板\n├── scripts            #script源码\n|   ├── tags           #tags的script源码\n|   ├── marge.js       #页面模板\n├── source             #源码\n|   ├── css            #css源码\n|   |   ├── _common    #*.styl基础css\n|   |   ├── _custom    #*.styl局部css\n|   |   └── _mixins    #mixins的css\n|   ├── fonts          #字体\n|   ├── images         #图片\n|   ├── uploads        #添加的文件\n|   └── js             #javascript源代码\n├── _config.yml        #主题配置文件\n└── README.md          #用GitHub的都知道\n```\n1. search功能还不行\n2. 进度条正中央的不见了\n3. 密码不管用了\n4. 标题和菜单颜色\n","slug":"updateEveryday","published":1,"updated":"2021-07-05T01:44:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqs0rf7p000j0mwl3qj100w7","content":"<h1 id=\"少出岔子-ok💢\"><a href=\"#少出岔子-ok💢\" class=\"headerlink\" title=\"少出岔子 ok💢\"></a>少出岔子 ok💢</h1><span id=\"more\"></span>\n\n<ol>\n<li><p>21.7.5</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/weixin_43074462/article/details/100716511\">按e把splash后面的参数修改成了nomodeset</a><ul>\n<li>但是是一次性的 不是一劳永逸</li>\n</ul>\n</li>\n<li>所以进入系统后编辑<code>sudo vi /etc/default/grub </code>, 修改为<code>GRUB_CMDLINE_LINUX_DEFAULT=“quiet splash nomodeset”</code>，最后更新<code>sudo update-grub</code><ul>\n<li>重启后顺利开机</li>\n<li>但是，开机第一幕自动grub没解决</li>\n</ul>\n</li>\n<li>解决自动进入grub<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-grub</span><br><span class=\"line\">sudo grub-install <span class=\"regexp\">/dev/</span>sda</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><h2 id=\"写个博客更新日志\"><a href=\"#写个博客更新日志\" class=\"headerlink\" title=\"写个博客更新日志\"></a>写个博客更新日志</h2><ol>\n<li>21.7.6 改了背景颜色（就在source里_data）<a href=\"https://www.sioe.cn/yingyong/yanse-rgb-16/\">颜色</a><ul>\n<li><a href=\"https://marmalade.vip/nextthemebeautify3.html\">前人经验</a></li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── .github            <span class=\"comment\">#git信息</span></span><br><span class=\"line\">├── languages          <span class=\"comment\">#多语言</span></span><br><span class=\"line\">|<span class=\"string\">   ├── default.yml    #默认语言</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   └── zh-Hans.yml      #简体中文</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   └── zh-tw.yml      #繁体中文</span></span><br><span class=\"line\"><span class=\"string\">├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── _custom        #可以自己修改的模板，覆盖原有模板</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">   ├── _header.swig    #头部样式</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">   ├── _sidebar.swig   #侧边栏样式</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── _macro        #可以自己修改的模板，覆盖原有模板</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">   ├── post.swig    #文章模板</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">   ├── reward.swig    #打赏模板</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">   ├── sidebar.swig   #侧边栏模板</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── _partial       #局部的布局</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">   ├── head       #头部模板</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">   ├── search     #搜索模板</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">   ├── share      #分享模板</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── _script        #局部的布局</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── _third-party   #第三方模板</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── _layout.swig   #主页面模板</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── index.swig     #主页面模板</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── page           #页面模板</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   └── tag.swig       #tag模板</span></span><br><span class=\"line\"><span class=\"string\">├── scripts            #script源码</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── tags           #tags的script源码</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── marge.js       #页面模板</span></span><br><span class=\"line\"><span class=\"string\">├── source             #源码</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── css            #css源码</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">   ├── _common    #*.styl基础css</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">   ├── _custom    #*.styl局部css</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">   └── _mixins    #mixins的css</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── fonts          #字体</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── images         #图片</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── uploads        #添加的文件</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   └── js             #javascript源代码</span></span><br><span class=\"line\"><span class=\"string\">├── _config.yml        #主题配置文件</span></span><br><span class=\"line\"><span class=\"string\">└── README.md          #用GitHub的都知道</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>search功能还不行</li>\n<li>进度条正中央的不见了</li>\n<li>密码不管用了</li>\n<li>标题和菜单颜色</li>\n</ol>\n","site":{"data":{"styles":"body {\n  position: relative;\n  font-family: 'Lato', \"PingFang SC\", \"Microsoft YaHei\", sans-serif;\n  font-size: 14px;\n  line-height: 2;\n  color: #555;\n  background: #a5b8cc;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n/*更好的侧边滚动条*/\n::-webkit-scrollbar {\n  width: 10px;\n  height: 10px;\n}\n::-webkit-scrollbar-button {\n  width: 0;\n  height: 0;\n}\n::-webkit-scrollbar-button:start:increment,\n::-webkit-scrollbar-button:end:decrement {\n  display: none;\n}\n::-webkit-scrollbar-corner {\n  display: block;\n}\n::-webkit-scrollbar-thumb {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.2);\n}\n::-webkit-scrollbar-thumb:hover {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.5);\n}\n::-webkit-scrollbar-track,\n::-webkit-scrollbar-thumb {\n  border-right: 1px solid transparent;\n  border-left: 1px solid transparent;\n}\n::-webkit-scrollbar-track:hover {\n  background-color: rgba(0,0,0,0.15);\n}\n::-webkit-scrollbar-button:start {\n  width: 10px;\n  height: 10px;\n/*background: url(../images/scrollbar_arrow.png) no-repeat 0 0;*/\n/*可以添加滚动条样式*/\n}\n.post-sticky-flag {\n  font-size: inherit;\n  float: left;\n  color: #000;\n  cursor: help;\n  transition-duration: 0.2s;\n  transition-timing-function: ease-in-out;\n  transition-delay: 0s;\n}\n.post-sticky-flag:hover {\n  color: #07b39b;\n}\n.brand {\n  color: #ff6a6a;\n}\n.site-subtitle {\n  margin-top: 10px;\n  font-size: 13px;\n  color: #fff;\n}\n.busuanzi-value {\n  color: #1890ff;\n}\n* {\n  color: #35405b;\n}\n.site-meta {\n  margin: 0;\n  text-align: $site-meta-text-align;\nmobile()\n}\n.brand {\n  position: relative;\n  display: inline-block;\n  padding: 0 40px;\n  color: #ff6a6a;\n  background: $brand-bg;\n  border-bottom: none;\n}\n.brand:hover {\n  color: $brand-hover-color;\n}\n"}},"excerpt":"<h1 id=\"少出岔子-ok💢\"><a href=\"#少出岔子-ok💢\" class=\"headerlink\" title=\"少出岔子 ok💢\"></a>少出岔子 ok💢</h1>","more":"<ol>\n<li><p>21.7.5</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/weixin_43074462/article/details/100716511\">按e把splash后面的参数修改成了nomodeset</a><ul>\n<li>但是是一次性的 不是一劳永逸</li>\n</ul>\n</li>\n<li>所以进入系统后编辑<code>sudo vi /etc/default/grub </code>, 修改为<code>GRUB_CMDLINE_LINUX_DEFAULT=“quiet splash nomodeset”</code>，最后更新<code>sudo update-grub</code><ul>\n<li>重启后顺利开机</li>\n<li>但是，开机第一幕自动grub没解决</li>\n</ul>\n</li>\n<li>解决自动进入grub<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-grub</span><br><span class=\"line\">sudo grub-install <span class=\"regexp\">/dev/</span>sda</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><h2 id=\"写个博客更新日志\"><a href=\"#写个博客更新日志\" class=\"headerlink\" title=\"写个博客更新日志\"></a>写个博客更新日志</h2><ol>\n<li>21.7.6 改了背景颜色（就在source里_data）<a href=\"https://www.sioe.cn/yingyong/yanse-rgb-16/\">颜色</a><ul>\n<li><a href=\"https://marmalade.vip/nextthemebeautify3.html\">前人经验</a></li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── .github            <span class=\"comment\">#git信息</span></span><br><span class=\"line\">├── languages          <span class=\"comment\">#多语言</span></span><br><span class=\"line\">|<span class=\"string\">   ├── default.yml    #默认语言</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   └── zh-Hans.yml      #简体中文</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   └── zh-tw.yml      #繁体中文</span></span><br><span class=\"line\"><span class=\"string\">├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── _custom        #可以自己修改的模板，覆盖原有模板</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">   ├── _header.swig    #头部样式</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">   ├── _sidebar.swig   #侧边栏样式</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── _macro        #可以自己修改的模板，覆盖原有模板</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">   ├── post.swig    #文章模板</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">   ├── reward.swig    #打赏模板</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">   ├── sidebar.swig   #侧边栏模板</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── _partial       #局部的布局</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">   ├── head       #头部模板</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">   ├── search     #搜索模板</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">   ├── share      #分享模板</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── _script        #局部的布局</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── _third-party   #第三方模板</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── _layout.swig   #主页面模板</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── index.swig     #主页面模板</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── page           #页面模板</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   └── tag.swig       #tag模板</span></span><br><span class=\"line\"><span class=\"string\">├── scripts            #script源码</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── tags           #tags的script源码</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── marge.js       #页面模板</span></span><br><span class=\"line\"><span class=\"string\">├── source             #源码</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── css            #css源码</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">   ├── _common    #*.styl基础css</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">   ├── _custom    #*.styl局部css</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">   └── _mixins    #mixins的css</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── fonts          #字体</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── images         #图片</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   ├── uploads        #添加的文件</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   └── js             #javascript源代码</span></span><br><span class=\"line\"><span class=\"string\">├── _config.yml        #主题配置文件</span></span><br><span class=\"line\"><span class=\"string\">└── README.md          #用GitHub的都知道</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>search功能还不行</li>\n<li>进度条正中央的不见了</li>\n<li>密码不管用了</li>\n<li>标题和菜单颜色</li>\n</ol>"},{"title":"每日总结","date":"2019-11-25T08:44:57.000Z","password":"password","top":null,"_content":"\n\n一切随缘好了,开心和积极向上是最重要的\n<!--more-->\n# 11.25 周一 week10\n## 吃了什么\n\n- 0.1:无\n- 0.2:两个cheese roll,一袋李子\n- 0.3:一个鸡蛋,半杯麦片,圣女果一袋\n-------------------\n## 今天的运动\n没有...除了去Sainsbury...\n-----------\n## 今天的支出和收入\n- 支出: 4.9\n- 收入: 0\n- -------------\n## 今天的学习内容总结\n- 1.1: 把cmte本周的所有任务完成了\n- 1.2: ppa做了很多,好的开展\n- 1.3:\n- 1.4:\n--------------\n## 所以收获了什么呢\n- 2.1: 收获了快乐??还算不错\n- 2.2:\n- 2.3:\n- 2.3:\n------------------\n## 遗留的疑问是?\n- 3.1:\n- 3.2:\n- 3.3:\n- 3.4:\n----------------\n## 明天的计划是什么呢 周二\n- 4.1: 12点起床洗澡,用黄盒子带圣女果\n- 4.2: 回看和作业 CS的\n- 4.3: 看电影和吃东西 :给我把握好\n- 4.4: ppa report要开始写了!\n- 4.5: 看电影完适当购物: 腌莴笋的用品!!!\n- 4.6: 睡前看PPA的回放\n- 4.7:cscscs!!!\n---------------\n## 心情好吗,有激情吗?\n- 按照1\\-\\-\\-10打分\n- 7 没有食欲,学习欲望一般 \\-\\-\\-17:18\n- 7 睡前\n\n\n------------------------------------\n# 近期待办的事务\n- 5.1: 黑五买两件大衣!\n- 5.2:\n- 5.3:\n------------------------------------\n\n# Temple 周  week\n## 吃了什么\n- 0.1:\n- 0.2:\n- 0.3:\n-------------------\n## 今天的运动\n\n-----------\n## 今天的支出和收入\n- 支出:\n- 收入:\n- -------------\n## 今天的学习内容总结\n- 1.1:\n- 1.2:\n- 1.3:\n- 1.4:\n---------\n\n## 所以收获了什么呢\n- 2.1:\n- 2.2:\n- 2.3:\n- 2.3:\n-------------\n## 遗留的疑问是?\n- 3.1:\n- 3.2:\n- 3.3:\n- 3.4:\n-----------\n## 明天的计划是什么呢\n- 4.1:\n- 4.2:\n- 4.3:\n- 4.4:\n-------------\n## 心情好吗,有激情吗?\n- 按照1\\-\\-\\-10打分","source":"_posts/每日总结.md","raw":"---\ntitle: 每日总结\ndate: 2019-11-25 16:44:57\ntags:\ncategories: \n- 2019\n- life\n- everynight\n\npassword: password\ntop:\n---\n\n\n一切随缘好了,开心和积极向上是最重要的\n<!--more-->\n# 11.25 周一 week10\n## 吃了什么\n\n- 0.1:无\n- 0.2:两个cheese roll,一袋李子\n- 0.3:一个鸡蛋,半杯麦片,圣女果一袋\n-------------------\n## 今天的运动\n没有...除了去Sainsbury...\n-----------\n## 今天的支出和收入\n- 支出: 4.9\n- 收入: 0\n- -------------\n## 今天的学习内容总结\n- 1.1: 把cmte本周的所有任务完成了\n- 1.2: ppa做了很多,好的开展\n- 1.3:\n- 1.4:\n--------------\n## 所以收获了什么呢\n- 2.1: 收获了快乐??还算不错\n- 2.2:\n- 2.3:\n- 2.3:\n------------------\n## 遗留的疑问是?\n- 3.1:\n- 3.2:\n- 3.3:\n- 3.4:\n----------------\n## 明天的计划是什么呢 周二\n- 4.1: 12点起床洗澡,用黄盒子带圣女果\n- 4.2: 回看和作业 CS的\n- 4.3: 看电影和吃东西 :给我把握好\n- 4.4: ppa report要开始写了!\n- 4.5: 看电影完适当购物: 腌莴笋的用品!!!\n- 4.6: 睡前看PPA的回放\n- 4.7:cscscs!!!\n---------------\n## 心情好吗,有激情吗?\n- 按照1\\-\\-\\-10打分\n- 7 没有食欲,学习欲望一般 \\-\\-\\-17:18\n- 7 睡前\n\n\n------------------------------------\n# 近期待办的事务\n- 5.1: 黑五买两件大衣!\n- 5.2:\n- 5.3:\n------------------------------------\n\n# Temple 周  week\n## 吃了什么\n- 0.1:\n- 0.2:\n- 0.3:\n-------------------\n## 今天的运动\n\n-----------\n## 今天的支出和收入\n- 支出:\n- 收入:\n- -------------\n## 今天的学习内容总结\n- 1.1:\n- 1.2:\n- 1.3:\n- 1.4:\n---------\n\n## 所以收获了什么呢\n- 2.1:\n- 2.2:\n- 2.3:\n- 2.3:\n-------------\n## 遗留的疑问是?\n- 3.1:\n- 3.2:\n- 3.3:\n- 3.4:\n-----------\n## 明天的计划是什么呢\n- 4.1:\n- 4.2:\n- 4.3:\n- 4.4:\n-------------\n## 心情好吗,有激情吗?\n- 按照1\\-\\-\\-10打分","slug":"每日总结","published":1,"updated":"2019-11-25T08:44:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqs0rf7r000m0mwlh4dg7l05","content":"<p>一切随缘好了,开心和积极向上是最重要的</p>\n<span id=\"more\"></span>\n<h1 id=\"11-25-周一-week10\"><a href=\"#11-25-周一-week10\" class=\"headerlink\" title=\"11.25 周一 week10\"></a>11.25 周一 week10</h1><h2 id=\"吃了什么\"><a href=\"#吃了什么\" class=\"headerlink\" title=\"吃了什么\"></a>吃了什么</h2><ul>\n<li>0.1:无</li>\n<li>0.2:两个cheese roll,一袋李子</li>\n<li>0.3:一个鸡蛋,半杯麦片,圣女果一袋</li>\n</ul>\n<hr>\n<h2 id=\"今天的运动\"><a href=\"#今天的运动\" class=\"headerlink\" title=\"今天的运动\"></a>今天的运动</h2><h2 id=\"没有…除了去Sainsbury…\"><a href=\"#没有…除了去Sainsbury…\" class=\"headerlink\" title=\"没有…除了去Sainsbury…\"></a>没有…除了去Sainsbury…</h2><h2 id=\"今天的支出和收入\"><a href=\"#今天的支出和收入\" class=\"headerlink\" title=\"今天的支出和收入\"></a>今天的支出和收入</h2><ul>\n<li>支出: 4.9</li>\n<li>收入: 0</li>\n</ul>\n<hr>\n<h2 id=\"今天的学习内容总结\"><a href=\"#今天的学习内容总结\" class=\"headerlink\" title=\"今天的学习内容总结\"></a>今天的学习内容总结</h2><ul>\n<li>1.1: 把cmte本周的所有任务完成了</li>\n<li>1.2: ppa做了很多,好的开展</li>\n<li>1.3:</li>\n<li>1.4:</li>\n</ul>\n<hr>\n<h2 id=\"所以收获了什么呢\"><a href=\"#所以收获了什么呢\" class=\"headerlink\" title=\"所以收获了什么呢\"></a>所以收获了什么呢</h2><ul>\n<li>2.1: 收获了快乐??还算不错</li>\n<li>2.2:</li>\n<li>2.3:</li>\n<li>2.3:</li>\n</ul>\n<hr>\n<h2 id=\"遗留的疑问是\"><a href=\"#遗留的疑问是\" class=\"headerlink\" title=\"遗留的疑问是?\"></a>遗留的疑问是?</h2><ul>\n<li>3.1:</li>\n<li>3.2:</li>\n<li>3.3:</li>\n<li>3.4:</li>\n</ul>\n<hr>\n<h2 id=\"明天的计划是什么呢-周二\"><a href=\"#明天的计划是什么呢-周二\" class=\"headerlink\" title=\"明天的计划是什么呢 周二\"></a>明天的计划是什么呢 周二</h2><ul>\n<li>4.1: 12点起床洗澡,用黄盒子带圣女果</li>\n<li>4.2: 回看和作业 CS的</li>\n<li>4.3: 看电影和吃东西 :给我把握好</li>\n<li>4.4: ppa report要开始写了!</li>\n<li>4.5: 看电影完适当购物: 腌莴笋的用品!!!</li>\n<li>4.6: 睡前看PPA的回放</li>\n<li>4.7:cscscs!!!</li>\n</ul>\n<hr>\n<h2 id=\"心情好吗-有激情吗\"><a href=\"#心情好吗-有激情吗\" class=\"headerlink\" title=\"心情好吗,有激情吗?\"></a>心情好吗,有激情吗?</h2><ul>\n<li>按照1---10打分</li>\n<li>7 没有食欲,学习欲望一般 ---17:18</li>\n<li>7 睡前</li>\n</ul>\n<hr>\n<h1 id=\"近期待办的事务\"><a href=\"#近期待办的事务\" class=\"headerlink\" title=\"近期待办的事务\"></a>近期待办的事务</h1><ul>\n<li>5.1: 黑五买两件大衣!</li>\n<li>5.2:</li>\n<li>5.3:</li>\n</ul>\n<hr>\n<h1 id=\"Temple-周-week\"><a href=\"#Temple-周-week\" class=\"headerlink\" title=\"Temple 周  week\"></a>Temple 周  week</h1><h2 id=\"吃了什么-1\"><a href=\"#吃了什么-1\" class=\"headerlink\" title=\"吃了什么\"></a>吃了什么</h2><ul>\n<li>0.1:</li>\n<li>0.2:</li>\n<li>0.3:</li>\n</ul>\n<hr>\n<h2 id=\"今天的运动-1\"><a href=\"#今天的运动-1\" class=\"headerlink\" title=\"今天的运动\"></a>今天的运动</h2><hr>\n<h2 id=\"今天的支出和收入-1\"><a href=\"#今天的支出和收入-1\" class=\"headerlink\" title=\"今天的支出和收入\"></a>今天的支出和收入</h2><ul>\n<li>支出:</li>\n<li>收入:</li>\n</ul>\n<hr>\n<h2 id=\"今天的学习内容总结-1\"><a href=\"#今天的学习内容总结-1\" class=\"headerlink\" title=\"今天的学习内容总结\"></a>今天的学习内容总结</h2><ul>\n<li>1.1:</li>\n<li>1.2:</li>\n<li>1.3:</li>\n<li>1.4:</li>\n</ul>\n<hr>\n<h2 id=\"所以收获了什么呢-1\"><a href=\"#所以收获了什么呢-1\" class=\"headerlink\" title=\"所以收获了什么呢\"></a>所以收获了什么呢</h2><ul>\n<li>2.1:</li>\n<li>2.2:</li>\n<li>2.3:</li>\n<li>2.3:</li>\n</ul>\n<hr>\n<h2 id=\"遗留的疑问是-1\"><a href=\"#遗留的疑问是-1\" class=\"headerlink\" title=\"遗留的疑问是?\"></a>遗留的疑问是?</h2><ul>\n<li>3.1:</li>\n<li>3.2:</li>\n<li>3.3:</li>\n<li>3.4:</li>\n</ul>\n<hr>\n<h2 id=\"明天的计划是什么呢\"><a href=\"#明天的计划是什么呢\" class=\"headerlink\" title=\"明天的计划是什么呢\"></a>明天的计划是什么呢</h2><ul>\n<li>4.1:</li>\n<li>4.2:</li>\n<li>4.3:</li>\n<li>4.4:</li>\n</ul>\n<hr>\n<h2 id=\"心情好吗-有激情吗-1\"><a href=\"#心情好吗-有激情吗-1\" class=\"headerlink\" title=\"心情好吗,有激情吗?\"></a>心情好吗,有激情吗?</h2><ul>\n<li>按照1---10打分</li>\n</ul>\n","site":{"data":{"styles":"body {\n  position: relative;\n  font-family: 'Lato', \"PingFang SC\", \"Microsoft YaHei\", sans-serif;\n  font-size: 14px;\n  line-height: 2;\n  color: #555;\n  background: #a5b8cc;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n/*更好的侧边滚动条*/\n::-webkit-scrollbar {\n  width: 10px;\n  height: 10px;\n}\n::-webkit-scrollbar-button {\n  width: 0;\n  height: 0;\n}\n::-webkit-scrollbar-button:start:increment,\n::-webkit-scrollbar-button:end:decrement {\n  display: none;\n}\n::-webkit-scrollbar-corner {\n  display: block;\n}\n::-webkit-scrollbar-thumb {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.2);\n}\n::-webkit-scrollbar-thumb:hover {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.5);\n}\n::-webkit-scrollbar-track,\n::-webkit-scrollbar-thumb {\n  border-right: 1px solid transparent;\n  border-left: 1px solid transparent;\n}\n::-webkit-scrollbar-track:hover {\n  background-color: rgba(0,0,0,0.15);\n}\n::-webkit-scrollbar-button:start {\n  width: 10px;\n  height: 10px;\n/*background: url(../images/scrollbar_arrow.png) no-repeat 0 0;*/\n/*可以添加滚动条样式*/\n}\n.post-sticky-flag {\n  font-size: inherit;\n  float: left;\n  color: #000;\n  cursor: help;\n  transition-duration: 0.2s;\n  transition-timing-function: ease-in-out;\n  transition-delay: 0s;\n}\n.post-sticky-flag:hover {\n  color: #07b39b;\n}\n.brand {\n  color: #ff6a6a;\n}\n.site-subtitle {\n  margin-top: 10px;\n  font-size: 13px;\n  color: #fff;\n}\n.busuanzi-value {\n  color: #1890ff;\n}\n* {\n  color: #35405b;\n}\n.site-meta {\n  margin: 0;\n  text-align: $site-meta-text-align;\nmobile()\n}\n.brand {\n  position: relative;\n  display: inline-block;\n  padding: 0 40px;\n  color: #ff6a6a;\n  background: $brand-bg;\n  border-bottom: none;\n}\n.brand:hover {\n  color: $brand-hover-color;\n}\n"}},"excerpt":"<p>一切随缘好了,开心和积极向上是最重要的</p>","more":"<h1 id=\"11-25-周一-week10\"><a href=\"#11-25-周一-week10\" class=\"headerlink\" title=\"11.25 周一 week10\"></a>11.25 周一 week10</h1><h2 id=\"吃了什么\"><a href=\"#吃了什么\" class=\"headerlink\" title=\"吃了什么\"></a>吃了什么</h2><ul>\n<li>0.1:无</li>\n<li>0.2:两个cheese roll,一袋李子</li>\n<li>0.3:一个鸡蛋,半杯麦片,圣女果一袋</li>\n</ul>\n<hr>\n<h2 id=\"今天的运动\"><a href=\"#今天的运动\" class=\"headerlink\" title=\"今天的运动\"></a>今天的运动</h2><h2 id=\"没有…除了去Sainsbury…\"><a href=\"#没有…除了去Sainsbury…\" class=\"headerlink\" title=\"没有…除了去Sainsbury…\"></a>没有…除了去Sainsbury…</h2><h2 id=\"今天的支出和收入\"><a href=\"#今天的支出和收入\" class=\"headerlink\" title=\"今天的支出和收入\"></a>今天的支出和收入</h2><ul>\n<li>支出: 4.9</li>\n<li>收入: 0</li>\n</ul>\n<hr>\n<h2 id=\"今天的学习内容总结\"><a href=\"#今天的学习内容总结\" class=\"headerlink\" title=\"今天的学习内容总结\"></a>今天的学习内容总结</h2><ul>\n<li>1.1: 把cmte本周的所有任务完成了</li>\n<li>1.2: ppa做了很多,好的开展</li>\n<li>1.3:</li>\n<li>1.4:</li>\n</ul>\n<hr>\n<h2 id=\"所以收获了什么呢\"><a href=\"#所以收获了什么呢\" class=\"headerlink\" title=\"所以收获了什么呢\"></a>所以收获了什么呢</h2><ul>\n<li>2.1: 收获了快乐??还算不错</li>\n<li>2.2:</li>\n<li>2.3:</li>\n<li>2.3:</li>\n</ul>\n<hr>\n<h2 id=\"遗留的疑问是\"><a href=\"#遗留的疑问是\" class=\"headerlink\" title=\"遗留的疑问是?\"></a>遗留的疑问是?</h2><ul>\n<li>3.1:</li>\n<li>3.2:</li>\n<li>3.3:</li>\n<li>3.4:</li>\n</ul>\n<hr>\n<h2 id=\"明天的计划是什么呢-周二\"><a href=\"#明天的计划是什么呢-周二\" class=\"headerlink\" title=\"明天的计划是什么呢 周二\"></a>明天的计划是什么呢 周二</h2><ul>\n<li>4.1: 12点起床洗澡,用黄盒子带圣女果</li>\n<li>4.2: 回看和作业 CS的</li>\n<li>4.3: 看电影和吃东西 :给我把握好</li>\n<li>4.4: ppa report要开始写了!</li>\n<li>4.5: 看电影完适当购物: 腌莴笋的用品!!!</li>\n<li>4.6: 睡前看PPA的回放</li>\n<li>4.7:cscscs!!!</li>\n</ul>\n<hr>\n<h2 id=\"心情好吗-有激情吗\"><a href=\"#心情好吗-有激情吗\" class=\"headerlink\" title=\"心情好吗,有激情吗?\"></a>心情好吗,有激情吗?</h2><ul>\n<li>按照1---10打分</li>\n<li>7 没有食欲,学习欲望一般 ---17:18</li>\n<li>7 睡前</li>\n</ul>\n<hr>\n<h1 id=\"近期待办的事务\"><a href=\"#近期待办的事务\" class=\"headerlink\" title=\"近期待办的事务\"></a>近期待办的事务</h1><ul>\n<li>5.1: 黑五买两件大衣!</li>\n<li>5.2:</li>\n<li>5.3:</li>\n</ul>\n<hr>\n<h1 id=\"Temple-周-week\"><a href=\"#Temple-周-week\" class=\"headerlink\" title=\"Temple 周  week\"></a>Temple 周  week</h1><h2 id=\"吃了什么-1\"><a href=\"#吃了什么-1\" class=\"headerlink\" title=\"吃了什么\"></a>吃了什么</h2><ul>\n<li>0.1:</li>\n<li>0.2:</li>\n<li>0.3:</li>\n</ul>\n<hr>\n<h2 id=\"今天的运动-1\"><a href=\"#今天的运动-1\" class=\"headerlink\" title=\"今天的运动\"></a>今天的运动</h2><hr>\n<h2 id=\"今天的支出和收入-1\"><a href=\"#今天的支出和收入-1\" class=\"headerlink\" title=\"今天的支出和收入\"></a>今天的支出和收入</h2><ul>\n<li>支出:</li>\n<li>收入:</li>\n</ul>\n<hr>\n<h2 id=\"今天的学习内容总结-1\"><a href=\"#今天的学习内容总结-1\" class=\"headerlink\" title=\"今天的学习内容总结\"></a>今天的学习内容总结</h2><ul>\n<li>1.1:</li>\n<li>1.2:</li>\n<li>1.3:</li>\n<li>1.4:</li>\n</ul>\n<hr>\n<h2 id=\"所以收获了什么呢-1\"><a href=\"#所以收获了什么呢-1\" class=\"headerlink\" title=\"所以收获了什么呢\"></a>所以收获了什么呢</h2><ul>\n<li>2.1:</li>\n<li>2.2:</li>\n<li>2.3:</li>\n<li>2.3:</li>\n</ul>\n<hr>\n<h2 id=\"遗留的疑问是-1\"><a href=\"#遗留的疑问是-1\" class=\"headerlink\" title=\"遗留的疑问是?\"></a>遗留的疑问是?</h2><ul>\n<li>3.1:</li>\n<li>3.2:</li>\n<li>3.3:</li>\n<li>3.4:</li>\n</ul>\n<hr>\n<h2 id=\"明天的计划是什么呢\"><a href=\"#明天的计划是什么呢\" class=\"headerlink\" title=\"明天的计划是什么呢\"></a>明天的计划是什么呢</h2><ul>\n<li>4.1:</li>\n<li>4.2:</li>\n<li>4.3:</li>\n<li>4.4:</li>\n</ul>\n<hr>\n<h2 id=\"心情好吗-有激情吗-1\"><a href=\"#心情好吗-有激情吗-1\" class=\"headerlink\" title=\"心情好吗,有激情吗?\"></a>心情好吗,有激情吗?</h2><ul>\n<li>按照1---10打分</li>\n</ul>"},{"title":"计算机体系结构note","date":"2021-07-05T01:06:13.000Z","password":"password","top":50,"_content":"\n# Summer Intern 21年6-8月\n# 计算机体系结构\n\n## 国防科大公开课\n[计算机体系结构国防科大35讲](https://www.bilibili.com/video/BV1aJ411g7LM?p=2)\n<!-- more -->\n1. ### 概念\n    1. 冯诺依曼结构\n    2. 20世纪80年代以来：RISC（精简指令集计算机）--指令集并行（流水线；多指令发射）；缓存\n        - 20世纪80年代出现了个人计算机和工作站，因为有微处理器可供使用\n        - 80年代初RISC出现 --简化了指令系统，把更多的芯片硅面积用于实现`流水`和`cache`\n        - 20世纪80年代，单片芯片上集成到25000-50000个晶体管\n    3. ISA（Instruction Set Architecture指令集体系结构）：区分软硬件的界限\n        - 80x86\n            1. 16个通用寄存器，16个存入浮点数据的寄存器\n            2. `寄存器-存储器`ISA：在许多指令中，访问存储器\n            3. 编码为可变长度，变化长度为1--18个`字节` -- 可变长度的指令可以占用较少的空间\n        - ARM\n            1. `载入-存储`ISA（只能用load/store来访问存储器，所有最新的ISA都采用载入-存储ISA）\n            2. 所有ARM和MIPS指令都是的长度都是32位\n        - MIPS\n            1. 32个通用寄存器，32个浮点寄存器\n            2. `载入-存储`ISA（只能用load/store来访问存储器）\n    4. intel和ARM（都是ISA）  （CISC和RISC）\n        - [知乎一篇文章](https://zhuanlan.zhihu.com/p/21266987)\n        - ARM和Intel 两种架构，X86无法做到ARM的功耗，而ARM也无法做到X86的性能\n        - ARM从来只是设计`低功耗处理器`，Intel的强项是设计`超高性能`的台式机和服务器处理器。\n        - Intel i7处理器平均发热功率为45w，ARM是1/15\n        - 制造工艺的纳米数越小，能量的使用效率越高\n        - ARM的big.LITTLE架构是一项Intel一时无法复制的创新 --处理器中的核可以有不同的性能和功耗\n        - 前端设计体现了处理器的构架，精简指令集和复杂指令集的区别是通过前端设计体现的\n        - 后端设计处理电压，时钟等问题，是耗电的直接因素。\n        - 移动处理器都是片上系统(SoC)架构，也就是说，处理器之外，图形，视频，音频，网络等功能都在一个芯片里。这些模块的打开与关闭就容易预测的多，并且可以通过软件来控制。这样，整体功耗就更加取决于软件和制造工艺而不是处理机架构。在这点上，X86的处理器占优势，因为Intel的工艺有很大优势\n        - `疑惑`：\n            1. ARM处理器的乱序执行能力不如intel--intel加入乱序逻辑结构，因为ARM是异构，就没有这方面的问题（一个核顺序执行，一个核乱序执行）\n    5. 存储器寻址与寻址模式\n        1. 字节寻址 ： 对齐\n        2. `寻址模式`：\n            1. MIPS寻址模式：\n                - 寄存器寻址\n                - 立即数寻址\n                - 位移量寻址 ：讲固定偏移量加到寄存器得出存储器地址\n            2. 80x86 ：\n                - 寄存器\n                - 立即数\n                - 位移量 ： 分三种。。。\n            3. ARM ：\n                - 寄存器\n                - 立即数\n                - 位移量\n                - PC（程序计数器）的寻址方式\n                - 两个寄存器之和\n                - 自动递增寻址/自动递减寻址\n\n    6.宽带和吞吐量：在给定时间内完成的总工作量\n    7. 集成电路中的功率和能耗：\n        1. 功率：单位时间的能耗\n        2. 能耗 与 该晶体管驱动的容性负载与电压平方的乘积成正比\n        3. 缩减元件之间的间距之后，晶体管之间的电容也会降低，晶体管的开关频率也得以提升，从而整个芯片的工作频率就上去了。\n        4. 晶体管的尺寸缩小会减低它们的内阻，所需导通电压会降低，这代表着CPU的工作电压会降低\n        5. 动态随机存取存储器（Dynamic Random Access Memory，DRAM）是一种半导体存储器，主要的作用原理是利用电容内存储电荷的多寡来代表一个二进制比特（bit）是1还是0。由于在现实中晶体管会有漏电电流的现象，导致电容上所存储的电荷数量并不足以正确的判别数据，而导致数据毁损。因此对于DRAM来说，周期性地充电是一个无可避免的要件。由于这种需要定时刷新的特性，因此被称为“动态”存储器。相对来说，静态存储器（SRAM）只要存入数据后，纵使不刷新也不会丢失记忆。\n    8. 可信任度：\n        1. 模块可靠性：对发生故障之前的时间度量 MTTF MTTR\n    9. `时钟周期`是计算机中最基本的、最小的时间单位。 在一个时钟周期内，CPU仅完成一个最基本的动作。 时钟周期是一个时间的量。\n        - 1993年的奔腾支持超流水线，一个时钟周期可以执行两条整数运算命令\n        - 现在的时钟周期有的是`0.几ns`；\n\n    10. CPU到内存时间还是不够快，有时候要几百个时钟周期。所以内存和cpu之间还有2--3级`缓存`\n\n\n\n\n<div  align=\"center\">\n    <img src=\"../图片/计算机体系结构/程序执行和指令的操作.png\" width = \"300\" height = \"200\" alt=\"bpp\" align=center />\n    </div>\n    程序执行的过程 --控制流 数据流\n    <div  align=\"center\">\n    <img src=\"../图片/计算机体系结构/计算机的属性.png\" width = \"300\" height = \"200\" alt=\"bpp\" align=center />\n    </div>\n    程序员能看到的计算机的属性\n    <div  align=\"center\">\n    <img src=\"../图片/计算机体系结构/指令集结构的逻辑实现.png\" width = \"300\" height = \"200\" alt=\"bpp\" align=center />\n    </div>\n    指令集结构的逻辑实现\n\n\n    20. 系列机和兼容\n        1. family machine：具有相同体系机构，但组成和实现不同\n        2. 软件兼容software compatibility ： 同一个软件-不加修改-获得相同结果（兼容种类也可以细分为二进制级兼容，汇编级兼容等）\n        3. 兼容机：支持软件兼容的硬件基础\n        4. 兼容性（向下向上：高低档机器先前向后：不同时期投入市场）   --兼容性up 寿命up\n            向后兼容：软件兼容的根本特征\n2. ### 发展\n    1. 计算机的分代（从91年以后是第五代：高性能微处理器+大规模高密度电路）\n    2. 软件的发展：\n    3. 处理器性能的提高，从单纯依赖指令集并行（ILP）转向数据级并行（DLP）和线程级并行（TLP）\n        - 指令 和 线程\n        - 数据级并行DLP：同时操作许多数据项\n        - 任务/线程级并行：？？？\n        - 戴老师讲：数据级并行其实就是许多人用用一个指令处理一堆不同的数据\n    5. 计算机的分类：\n        1. 个人移动设备PMD（手机平板）\n        2. 台式机\n        3. 服务器：\n                - 可用性 ： 要不间断的能使用，安全\n                - 可拓展性 ： 满足对功能的增长需求 ， 拓展计算容量，内存，I/O带宽\n        4. 仓库级计算机（WSC）\n        5. 嵌入式：能否运行第三方软件\n        根据并行分：\n            1. SISD\n            2. SIMD：数据级并行，同一指令由多个使用不同数据流的处理器执行\n            3. MISD\n            4. MIMD：多指令 多数据  --针对的是任务级并行\n    3. 应用的发展：\n        - 桌面计算：笔记本，工作站...（竞争激烈的市场）\n        - 服务器计算：可靠性做为追求目标\n        - 嵌入式计算：打印机，物联网...\n    4. 体系结构的发展：对结构的不断改良\n        - 分布的IO处理能力：IO装置具有独立的处理能力：打印机，把游戏指令发给显卡后显卡会主动生成怪物      ----有效减轻cpu处理负荷\n        - 保护的存储器空间：数据和程序严格割裂开，有利于程序的保护和发展\n        - 存储器组织结构的发展\n        - `并行处理技术`\n        - 指令集发展：用户可以定义自己的指令系统 效率up\n    5. 并行处理技术的发展\n        1. 并行性概念：\n            1. **`指令级并行`**\n                1. 2002年以来，性能增长下降约20% ---> 可以进一步有效开发的指令级并行已经很少  --->04年，从单纯依靠指令级并行转向线程级并行和数据级并行\n            2. `线程级并行`\n        2. 提高并行性的技术途径 ：时间重叠（用流水线，同时处理多个指令，每个指令都可以处于不同的阶段），资源重复（一个cpu不够用多个，数量取胜原则），资源共享（提高资源的利用效率，多个人使用一个打印机）\n        3. 并行计算的应用需求：对计算机的长远需求：工业设计 大气污染 天气预报等等\n    6. 计算机系统的成本和价格\n    7. 思考一些问题： 软件兼容的例子；列举操作系统为上层应用提供的典型API有哪些，功能是什么\n    8. 集成电路的发展和`摩尔定律`：“集成电路密度大概每两年翻一番---摩尔定律”  摩尔定律，也就是说，当价格保持不变时，集成电路上可容纳的晶体管数量每18个月增加一倍，性能提高一倍\n| 时间               | 生产工艺 | cpu晶体管数量    |\n| ------------------ | -------- | ---------------- |\n| 2000 奔腾4威拉米特 | 180nm    | 4200万           |\n| 2010  Corei7≤980X  | 32nm     | 11亿6999万9999个 |\n| 2013核心i7 4960X  |  22nm | 18.6亿|\n\n3. ### 计算机系统设计和分析\n    1. 成本与价格 ：晶圆晶片制造，测试成本，封装。。。\n    2. 基准测试程序： [测试程序包](www.SPEC.org)\n    3. 量化设计的基本原则\n        1. 大概率事件优先原则：追求全局的最优结果\n            - 赋予优先处理权和资源使用权\n        2. Amdahl定律：通过对系统加速比的研究，来找到系统中占有最重要的部件（可以定量计算）\n            - 假设对机器部件的改进，来计算加速比\n            -   如下：\n                <div  align=\"center\">\n                <img src=\"../图片/计算机体系结构/amdahl定律1.png\" width = \"400\" height = \"200\" alt=\"bpp\" align=center />\n                </div>\n                系统加速比的公式\n                系统加速比依赖于两个因素：可改进比例，部件加速比\n            - 性能增加的递减规则：针对改进的某一部分，改进越多，效果越小\n            - 公式的引申和推论：\n                - 对于整个任务的一部分进行优化，则`最大加速比`不大于1/(1-可改进比例)\n\n        3. Amdahl定律的计算练习\n        3. 程序的`局部性`原理：程序执行时所访问的存储器在`时空`上是相对的簇聚（这种簇聚包括指令和数据两部分）: 时间局部性 空间局部性 生产-消费局部性\n\n4. ### 指令系统\n    1. 指令集结构概述\n        1. 每条指令都是直接由cpu硬件执行\n            - CPU插播：进入工厂的原料(程序指令)，经过物资分配部门(控制单元)的调度分配，被送往生产线(逻辑运算单元)，生产出成品(处理后的数据)后，再存储在仓库(储存单元)中，最后等着拿到市场上去卖(交由应用程序使用)\n            - cpu是通过引脚与外围交流的，所有的数据都会通过引脚输入或者输出\n        2. 指令的表示：二进制格式...\n        3. 指令的操作非常简单，其操作由操作码编码表示，每个操作需要的操作数个数为0-3个不等   --操作数是一些`存储单元`的地址(典型的存储单元：主存，寄存器，堆栈和累加器)\n        4. `指令集与计算机的性能` T\n            - 指令集在程序中：软硬件的接口\n    2. 指令集结构的分类：\n        - 在cpu中`操作数`的存储方法\n        -  <div  align=\"center\">\n            <img src=\"../图片/计算机体系结构/指令集结构的分类.png\" width = \"300\" height = \"200\" alt=\"指令集结构的分类\" align=center />\n            </div>\n            几种分类（堆栈；累加器等）\n        - <div  align=\"center\">\n            <img src=\"../图片/计算机体系结构/通用寄存器型指令集结构的分类.png\" width = \"300\" height = \"200\" alt=\"通用寄存器型指令集结构\" align=center />\n            </div>\n             通用寄存器型指令集结构的分类  -------？\n        - 由此， 三种通用寄存器型指令集结构的优缺点: 寄存器-寄存器（0，3）；寄存器-存储器型（1，2）；存储器-存储器型（3，3）\n        - <div  align=\"center\">\n            <img src=\"../图片/计算机体系结构/指令集结构设计概观.png\" width = \"300\" height = \"200\" alt=\"指令集结构设计概观\" align=center />\n            </div>\n            指令集结构设计概观\n    3. 存储器寻址：几乎所有都使用`字节寻址`来访问存储器操作数\n        - ARM+MIPS要求操作对象必须是对齐的\n    4. 存储器寻址与寻址模式\n        1. 字节寻址 ： 对齐\n        2. `寻址模式`：\n            1. MIPS寻址模式：\n                - 寄存器寻址\n                - 立即数寻址\n                - 位移量寻址 ：讲固定偏移量加到寄存器得出存储器地址\n            2. 80x86 ：\n                - 寄存器\n                - 立即数\n                - 位移量 ： 分三种。。。\n            3. ARM ：\n                - 寄存器\n                - 立即数\n                - 位移量\n                - PC（程序计数器）的寻址方式\n                - 两个寄存器之和\n                - 自动递增寻址/自动递减寻址\n\n    3. 寻址方式：寄存器寻址；立即值寻址；偏移寻址；寄存器间接寻址（没有偏移量，值得注意的是：`(R1)`表示的是以R1的`地址`为内容的）；索引寻址（一般可用于对数组的访问）；直接寻址或绝对寻址；存储器间接寻址；自增/减寻址；缩放寻址\n        - e.g.` Add R1, (1001)` ---这属于直接寻址，1001是地址， 这条指令的含义就为：`Regs[R1]<-Regs[R1]+Mem[1001]`，这里的Mem[1001]就是地址为1001的寄存器里的内容。变量Mem用来表示存储器中的一个数组，存储按照字节寻址，它可以传送任何数目的字节。\n        - e.g. `Add R1,@(R3)` ---存储器间接寻址，含义为：`Reg[R1]<-Regs[R1]+Mem[Mem[Regs[R3]]]`首先访问寄存器，取出一个存储单元的地址，再访问该存储单元，取出保存操作数的那个存储单元的地址，再通过一次访存，得到操作数。   （只是加深理解，基本不会使用）\n    4. MIPS的指令格式：\n    <div  align=\"center\">\n    <img src=\"../图片/计算机体系结构/MIPS指令格式.png\" width = \"450\" height = \"200\" alt=\"MIPS指令格式\" align=center />\n    </div>\n\n    [MIPS指令基本格式一篇文章](http://www.yuejianzun.xyz/2018/02/18/MIPS指令集与简单分析/)\n\n    4. 指令系统的设计和优化\n        1. 引入控制指令概念：Jump（跳转），Branch\n        2. 过程调用和返回的状态保存（调用者保存 被调用者保存--一般用它）\n    5. 指令系统的发展和改进\n        - 强化指令功能，软件功能向硬件功能转移（CISC）\n        - RISC：在向着它发展\n    6. 操作数的类型和大小\n    7. MIPS指令系统结构\n        1. 操作数保存在寄存器里，所以只能通过load/store指令来访问存储器\n        2. MIPS是一种多元指令结构，注重指令流水效率\n        3. 有32个32位的通用寄存器，R0的内容恒为0；32个32位浮点寄存器\n        4. 支持：寄存器寻址，立即值寻址，偏移寻址，寄存器间接寻址。\n        5. 操作类型：<-,##,\n\n5. ### 流水线技术\n    1. #### 流水线基本概念  ：硬件资源降到最低程度\n        1. 指令流水线\n        2. 功能部件流水线\n        3. 用时空图来描述：横时间，纵各流水线\n        4. 特点：\n            1. 级/段；深度\n        5. 流水线的分类：\n            1. （按流水线 完成的 功能 分类）\n                1. 单功能流水线 ： 只能完成一种固定功能的流水线\n                2. 多功能流水线 ： 各段进行不同的连接，例如：TI ASC\n            2. 按连接方式\n                1. 静态流水线 ：TI ASC\n                2. 动态流水线 ： 重叠在一起，可能会冲突\n            3. 按级别\n                1. 部件级进行流水\n                2. 指令流水线\n                3. 处理机间流水线--宏流水线\n            4. 按数据表示\n                1. 标量流水处理机 ： 仅对标量进行数据处理\n                2. 向量流水处理机 ： 例如TI ASC\n            5. 是否有反馈回路\n                1. 线性流水线\n                2. 非线性 ： 有可能在汇集点冲突 ---流水线调度问题\n    2. #### MIPS基本流水线：\n        1. 非流水方式\n        2. 划分为5个阶段：\n            1. 取指令（IF）：\n                - 根据PC值从存储器取出指令，并将指令送入指令寄存器IR；PC++（指向下一条指令）；并将下一条指令的的地址放入临时寄存器NPC中   ---ps：指令的地址就是pc的值吗\n            2. 译码/读寄存器（ID）：\n                - 进行指令译码，读IR寄存器（指令寄存器），按照相应寄存器号读寄存器文件，...\n            3. 执行/有效地址计算周期（EX）：\n                - ，\n            4. 访存/分支操作完成周期（MEM）\n            5. 写回周期（WB）\n            6. 性能分析\n                7. ？？？？？\n    3. 流水线中的相关\n        1. 流水线性能分析\n            三项性能指标：吞吐率；最大吞吐率；实际吞吐率\n                - 吞吐率是指单位时间内流水线所完成的任务数或输出结果的数量\n                - 最大吞吐率：流水线达到稳定状态后所得到的吞吐率\n                    瓶颈 ---细分瓶颈段，重复设置瓶颈段（并列的）\n                    有一个吞吐率的计算 题型\n                - 假设流水线各段的时间相等\n        2. 加速比： 流水线速度：等功能非流水线速度\n        3. 效率：流水线的设备利用率\n            1. 从时空图上看，时空区面积之比\n            2. 效率是：实际加速比与最大加速比之比\n        4. 锁存器 ： 对时钟扭曲不敏感\n        5. 什么是相关？ --相邻/近的两条指令因存在某种关联，后一条指令不能在原先指定的时钟周期开始执行\n        6. 消除相关的基本方法：暂停（低效）\n        7. 三种不同类型的相关：\n            - 结构相关：硬件资源满足不了重叠执行的要求\n                原因：\n                    - 功能部件不是全流水\n                    - 重复设置的资源数量不足\n                避免：\n                    - 所有功能单元完全流水化\n                    - 设置足够多的硬件资源 （硬件代价很大）\n            - 数据相关：要用到前面指令的结果\n                1. 定向技术forwarding（可以减少数据相关带来的暂停），也称为旁路（bypassing）：\n            - 控制相关：遇到分支指令/改变pc值的指令\n    4. 实例分析：MIPS R4000\n    5. 向量处理机\n\n\n## 数据结构与算法\n1. ### GPU\n\n\n## extra\n1. IPv4地址由32位二进制数组成，即地址字节数为4 xxx.xxx.xxx.xxx (xxx是小于255的十进制数，换算成2进制就是小于8位)\n    - 将地址长度扩大至 IPv4 地址的 4 倍， 即由 32bit 扩展至128bit ，即16个地址字节数\n    - 为互联网上的每一个网络和每一台主机分配一个逻辑地址\n    - MAC（Media Access Control或者Medium Access Control）地址，意译为媒体访问控制，或称为物理地址、硬件地址，用来定义网络设备的位置\n    - 存储器地址（Memory address）是存储器中存储单元的编号。 --32位操作系统存储器地址字节为4个字节，64位操作系统存储器地址字节为8个字节\n        - 一个字节（byte）就是8bit\n        - **1kb是1024byte**，1024*8位数字\n        - 一个字（word）是32位，32bits，也就是4个字节（byte）\n        - 1 kb == 1024 byte == 1024*8 bit\n        - 1024b(字节)=1kb=512个汉字\n2. 半导体：关系到CPU内能塞进多少个晶体管，CPU所能达到的频率还有它的功耗\n    1. ss\n\n| 1978年              | 3000nm生产工艺 | 29000个晶体      | 工作频率5MHz            |\n| ------------------- | -------------- | ---------------- | ----------------------- |\n| 28核Skylake-SP Xeon | 14nm生产工艺   | 超过80亿个晶体管 | 5GHz（Core i9-9900K）｜\n    我们所说的生产工艺是指\n    线宽，也就是芯片上的最基本功能单位门电路的宽度，因为实际上门电路之间连线的宽度同门电路的宽度相同，所以线宽可以描述制造工艺\n    制造工艺用特征尺寸来衡量，即一个晶体管或一条连线在x/y的最小尺寸\n3. 晶圆 晶片 集成电路 芯片 核 cpu 主板 内存 等等的关系：\n    1. 硅晶圆尺寸越大越好，因为这样每块晶圆能生产更多的芯片。\n        - 无法随心所欲地增大晶圆尺寸： 生产过程中，离晶圆中心越远就越容易出现坏点\n        - 晶体管在处理器上集成，晶体管与晶体管之间用金属线路连接（金属线路的容量直接影响信息传送的速度）\n    2. 了解cpu的制作流程 ：\n        1. 切割晶圆 ： 用机器从单晶硅棒上切割下一片事先确定规格的硅晶片，并将其划分成多个细小的区域，每个区域都将成为一个CPU的内核（Die）\n        2. 紫外线通过`印制着CPU复杂电路结构图样`的模板照射硅基片，被紫外线照射的地方光阻物质溶解\n        3. 下一步就是蚀刻（etching）：结合上面制造的基片，CPU的门电路就完成了\n        4. 重复；分层：3d结构，7--9层，层数决定于设计时CPU的布局，以及通过的电流大小\n        5. 封装：封入一个陶瓷的或塑料的封壳中，这样它就可以很容易地装在一块电路板上\n    3. 芯片是半导体元件产品的统称，是集成电路的载体，由晶圆分割而成。\n        - 集成电路包括半导体芯片及外围相关电路（电阻电容二极管）\n        - 芯片是“集成电路”的俗称。集成电路有模拟集成电路和数字集成电路，如果一片集成电路（芯片）中既有模拟电路又有数字电路，则称其为数模混合集成电路\n        - CPU是中央处理器，包含运算器和控制器，是数字电路。如果将运算器和控制器集成在一片集成电路上，就称之为微处理器。目前人们将中央处理器与微处理器已经混为一谈了\n        - so，CPU是一种数字芯片，只是众多芯片中的一类\n        - 一块晶圆上可以切割出数百个处理器(晶体管：50-200nm尺寸)\n    4. 晶体管相当于开关，控制着电流的方向（一个针头上就能放下大约3000万个晶体管）。\n4. 线程进程程序：\n    1. 一个程序包含着若干个进程，一个进程包含着若干个线程。\n5. SRAM DRAM 一个静态一个动态\n    - 所谓的“静态”，是指这种存储器只要保持通电，里面储存的数据就可以恒常保持。相对之下，动态随机存取存储器（DRAM）里面所储存的数据就需要周期性地更新。然而，当电力供应停止时，SRAM储存的数据还是会消失（被称为volatile memory），这与在断电后还能储存资料的ROM或闪存是不同的。\n6. some原理：\n    1. DMA（Direct Memory Access直接存储器访问）： 在DMA控制器的管理下，外设和存储器直接进行数据交换，而不需CPU干预\n7. 一些简写概念的总结\n    - JTAG： [joint test action group](https://www.cnblogs.com/TaigaCon/archive/2012/12/20/2826941.html)\n    - LQFP： Low-profile Quad Flat Package 薄 方 扁平封装 （BGA封装： Ball Grid Array Package）\n    - PCB ： printed circuit board 印刷电路板\n    - SPI： serial peripheral interface 串行外设接口\n\n10. <kbd>这是什么</kbd>\n<table>\n    <tr>\n        <th rowspan=\"2\">真实情况</th>\n        <th colspan=\"2\">预测结果</th>\n    </tr>\n    <tr>\n        <td>正例</td>\n        <td>反例</td>\n    </tr>\n    <tr>\n        <td>正例</td>\n        <td>TP(真正例)</td>\n        <td>FN(假反例)</td>\n    </tr>\n    <tr>\n        <td>反例</td>\n        <td>FP(假正例)</td>\n        <td>TN(真反例)</td>\n    </tr>\n</table>\n\n\n## 疑问疑难\n1. Mem\\[\\]和Regs\\[\\]的理解：Mem的方括号里是表示地址的一串数字，Mem\\[\\]表达的是内容       ----所以表示地址的和表示内容的其实是长度相同的一串二进制数字吗？？？       Regs\\[\\]表示的是数值\n2.  (7.1早上，周四) 数据级并行，指令集并行，任务级并行，线程级并行；SIMD，MIMD等。深入梳理\n3.  核 整理 core multi-core\n4.  各种频率的理解\n    1. 手机 cpu频率2.xGHz（两千多MHz）\n    2. 内存条的频率 最大到三千兆赫兹（3000MHz）\n5. PCI SATA这些是什么\n","source":"_posts/WuhanNote.md","raw":"---\ntitle: 计算机体系结构note\ndate: 2021-07-05 09:06:13\ntag:\n- 计算机体系结构\ncategories:\n- 2021\n- Summer\n- 计算机体系结构\npassword: password\ntop: 50\n---\n\n# Summer Intern 21年6-8月\n# 计算机体系结构\n\n## 国防科大公开课\n[计算机体系结构国防科大35讲](https://www.bilibili.com/video/BV1aJ411g7LM?p=2)\n<!-- more -->\n1. ### 概念\n    1. 冯诺依曼结构\n    2. 20世纪80年代以来：RISC（精简指令集计算机）--指令集并行（流水线；多指令发射）；缓存\n        - 20世纪80年代出现了个人计算机和工作站，因为有微处理器可供使用\n        - 80年代初RISC出现 --简化了指令系统，把更多的芯片硅面积用于实现`流水`和`cache`\n        - 20世纪80年代，单片芯片上集成到25000-50000个晶体管\n    3. ISA（Instruction Set Architecture指令集体系结构）：区分软硬件的界限\n        - 80x86\n            1. 16个通用寄存器，16个存入浮点数据的寄存器\n            2. `寄存器-存储器`ISA：在许多指令中，访问存储器\n            3. 编码为可变长度，变化长度为1--18个`字节` -- 可变长度的指令可以占用较少的空间\n        - ARM\n            1. `载入-存储`ISA（只能用load/store来访问存储器，所有最新的ISA都采用载入-存储ISA）\n            2. 所有ARM和MIPS指令都是的长度都是32位\n        - MIPS\n            1. 32个通用寄存器，32个浮点寄存器\n            2. `载入-存储`ISA（只能用load/store来访问存储器）\n    4. intel和ARM（都是ISA）  （CISC和RISC）\n        - [知乎一篇文章](https://zhuanlan.zhihu.com/p/21266987)\n        - ARM和Intel 两种架构，X86无法做到ARM的功耗，而ARM也无法做到X86的性能\n        - ARM从来只是设计`低功耗处理器`，Intel的强项是设计`超高性能`的台式机和服务器处理器。\n        - Intel i7处理器平均发热功率为45w，ARM是1/15\n        - 制造工艺的纳米数越小，能量的使用效率越高\n        - ARM的big.LITTLE架构是一项Intel一时无法复制的创新 --处理器中的核可以有不同的性能和功耗\n        - 前端设计体现了处理器的构架，精简指令集和复杂指令集的区别是通过前端设计体现的\n        - 后端设计处理电压，时钟等问题，是耗电的直接因素。\n        - 移动处理器都是片上系统(SoC)架构，也就是说，处理器之外，图形，视频，音频，网络等功能都在一个芯片里。这些模块的打开与关闭就容易预测的多，并且可以通过软件来控制。这样，整体功耗就更加取决于软件和制造工艺而不是处理机架构。在这点上，X86的处理器占优势，因为Intel的工艺有很大优势\n        - `疑惑`：\n            1. ARM处理器的乱序执行能力不如intel--intel加入乱序逻辑结构，因为ARM是异构，就没有这方面的问题（一个核顺序执行，一个核乱序执行）\n    5. 存储器寻址与寻址模式\n        1. 字节寻址 ： 对齐\n        2. `寻址模式`：\n            1. MIPS寻址模式：\n                - 寄存器寻址\n                - 立即数寻址\n                - 位移量寻址 ：讲固定偏移量加到寄存器得出存储器地址\n            2. 80x86 ：\n                - 寄存器\n                - 立即数\n                - 位移量 ： 分三种。。。\n            3. ARM ：\n                - 寄存器\n                - 立即数\n                - 位移量\n                - PC（程序计数器）的寻址方式\n                - 两个寄存器之和\n                - 自动递增寻址/自动递减寻址\n\n    6.宽带和吞吐量：在给定时间内完成的总工作量\n    7. 集成电路中的功率和能耗：\n        1. 功率：单位时间的能耗\n        2. 能耗 与 该晶体管驱动的容性负载与电压平方的乘积成正比\n        3. 缩减元件之间的间距之后，晶体管之间的电容也会降低，晶体管的开关频率也得以提升，从而整个芯片的工作频率就上去了。\n        4. 晶体管的尺寸缩小会减低它们的内阻，所需导通电压会降低，这代表着CPU的工作电压会降低\n        5. 动态随机存取存储器（Dynamic Random Access Memory，DRAM）是一种半导体存储器，主要的作用原理是利用电容内存储电荷的多寡来代表一个二进制比特（bit）是1还是0。由于在现实中晶体管会有漏电电流的现象，导致电容上所存储的电荷数量并不足以正确的判别数据，而导致数据毁损。因此对于DRAM来说，周期性地充电是一个无可避免的要件。由于这种需要定时刷新的特性，因此被称为“动态”存储器。相对来说，静态存储器（SRAM）只要存入数据后，纵使不刷新也不会丢失记忆。\n    8. 可信任度：\n        1. 模块可靠性：对发生故障之前的时间度量 MTTF MTTR\n    9. `时钟周期`是计算机中最基本的、最小的时间单位。 在一个时钟周期内，CPU仅完成一个最基本的动作。 时钟周期是一个时间的量。\n        - 1993年的奔腾支持超流水线，一个时钟周期可以执行两条整数运算命令\n        - 现在的时钟周期有的是`0.几ns`；\n\n    10. CPU到内存时间还是不够快，有时候要几百个时钟周期。所以内存和cpu之间还有2--3级`缓存`\n\n\n\n\n<div  align=\"center\">\n    <img src=\"../图片/计算机体系结构/程序执行和指令的操作.png\" width = \"300\" height = \"200\" alt=\"bpp\" align=center />\n    </div>\n    程序执行的过程 --控制流 数据流\n    <div  align=\"center\">\n    <img src=\"../图片/计算机体系结构/计算机的属性.png\" width = \"300\" height = \"200\" alt=\"bpp\" align=center />\n    </div>\n    程序员能看到的计算机的属性\n    <div  align=\"center\">\n    <img src=\"../图片/计算机体系结构/指令集结构的逻辑实现.png\" width = \"300\" height = \"200\" alt=\"bpp\" align=center />\n    </div>\n    指令集结构的逻辑实现\n\n\n    20. 系列机和兼容\n        1. family machine：具有相同体系机构，但组成和实现不同\n        2. 软件兼容software compatibility ： 同一个软件-不加修改-获得相同结果（兼容种类也可以细分为二进制级兼容，汇编级兼容等）\n        3. 兼容机：支持软件兼容的硬件基础\n        4. 兼容性（向下向上：高低档机器先前向后：不同时期投入市场）   --兼容性up 寿命up\n            向后兼容：软件兼容的根本特征\n2. ### 发展\n    1. 计算机的分代（从91年以后是第五代：高性能微处理器+大规模高密度电路）\n    2. 软件的发展：\n    3. 处理器性能的提高，从单纯依赖指令集并行（ILP）转向数据级并行（DLP）和线程级并行（TLP）\n        - 指令 和 线程\n        - 数据级并行DLP：同时操作许多数据项\n        - 任务/线程级并行：？？？\n        - 戴老师讲：数据级并行其实就是许多人用用一个指令处理一堆不同的数据\n    5. 计算机的分类：\n        1. 个人移动设备PMD（手机平板）\n        2. 台式机\n        3. 服务器：\n                - 可用性 ： 要不间断的能使用，安全\n                - 可拓展性 ： 满足对功能的增长需求 ， 拓展计算容量，内存，I/O带宽\n        4. 仓库级计算机（WSC）\n        5. 嵌入式：能否运行第三方软件\n        根据并行分：\n            1. SISD\n            2. SIMD：数据级并行，同一指令由多个使用不同数据流的处理器执行\n            3. MISD\n            4. MIMD：多指令 多数据  --针对的是任务级并行\n    3. 应用的发展：\n        - 桌面计算：笔记本，工作站...（竞争激烈的市场）\n        - 服务器计算：可靠性做为追求目标\n        - 嵌入式计算：打印机，物联网...\n    4. 体系结构的发展：对结构的不断改良\n        - 分布的IO处理能力：IO装置具有独立的处理能力：打印机，把游戏指令发给显卡后显卡会主动生成怪物      ----有效减轻cpu处理负荷\n        - 保护的存储器空间：数据和程序严格割裂开，有利于程序的保护和发展\n        - 存储器组织结构的发展\n        - `并行处理技术`\n        - 指令集发展：用户可以定义自己的指令系统 效率up\n    5. 并行处理技术的发展\n        1. 并行性概念：\n            1. **`指令级并行`**\n                1. 2002年以来，性能增长下降约20% ---> 可以进一步有效开发的指令级并行已经很少  --->04年，从单纯依靠指令级并行转向线程级并行和数据级并行\n            2. `线程级并行`\n        2. 提高并行性的技术途径 ：时间重叠（用流水线，同时处理多个指令，每个指令都可以处于不同的阶段），资源重复（一个cpu不够用多个，数量取胜原则），资源共享（提高资源的利用效率，多个人使用一个打印机）\n        3. 并行计算的应用需求：对计算机的长远需求：工业设计 大气污染 天气预报等等\n    6. 计算机系统的成本和价格\n    7. 思考一些问题： 软件兼容的例子；列举操作系统为上层应用提供的典型API有哪些，功能是什么\n    8. 集成电路的发展和`摩尔定律`：“集成电路密度大概每两年翻一番---摩尔定律”  摩尔定律，也就是说，当价格保持不变时，集成电路上可容纳的晶体管数量每18个月增加一倍，性能提高一倍\n| 时间               | 生产工艺 | cpu晶体管数量    |\n| ------------------ | -------- | ---------------- |\n| 2000 奔腾4威拉米特 | 180nm    | 4200万           |\n| 2010  Corei7≤980X  | 32nm     | 11亿6999万9999个 |\n| 2013核心i7 4960X  |  22nm | 18.6亿|\n\n3. ### 计算机系统设计和分析\n    1. 成本与价格 ：晶圆晶片制造，测试成本，封装。。。\n    2. 基准测试程序： [测试程序包](www.SPEC.org)\n    3. 量化设计的基本原则\n        1. 大概率事件优先原则：追求全局的最优结果\n            - 赋予优先处理权和资源使用权\n        2. Amdahl定律：通过对系统加速比的研究，来找到系统中占有最重要的部件（可以定量计算）\n            - 假设对机器部件的改进，来计算加速比\n            -   如下：\n                <div  align=\"center\">\n                <img src=\"../图片/计算机体系结构/amdahl定律1.png\" width = \"400\" height = \"200\" alt=\"bpp\" align=center />\n                </div>\n                系统加速比的公式\n                系统加速比依赖于两个因素：可改进比例，部件加速比\n            - 性能增加的递减规则：针对改进的某一部分，改进越多，效果越小\n            - 公式的引申和推论：\n                - 对于整个任务的一部分进行优化，则`最大加速比`不大于1/(1-可改进比例)\n\n        3. Amdahl定律的计算练习\n        3. 程序的`局部性`原理：程序执行时所访问的存储器在`时空`上是相对的簇聚（这种簇聚包括指令和数据两部分）: 时间局部性 空间局部性 生产-消费局部性\n\n4. ### 指令系统\n    1. 指令集结构概述\n        1. 每条指令都是直接由cpu硬件执行\n            - CPU插播：进入工厂的原料(程序指令)，经过物资分配部门(控制单元)的调度分配，被送往生产线(逻辑运算单元)，生产出成品(处理后的数据)后，再存储在仓库(储存单元)中，最后等着拿到市场上去卖(交由应用程序使用)\n            - cpu是通过引脚与外围交流的，所有的数据都会通过引脚输入或者输出\n        2. 指令的表示：二进制格式...\n        3. 指令的操作非常简单，其操作由操作码编码表示，每个操作需要的操作数个数为0-3个不等   --操作数是一些`存储单元`的地址(典型的存储单元：主存，寄存器，堆栈和累加器)\n        4. `指令集与计算机的性能` T\n            - 指令集在程序中：软硬件的接口\n    2. 指令集结构的分类：\n        - 在cpu中`操作数`的存储方法\n        -  <div  align=\"center\">\n            <img src=\"../图片/计算机体系结构/指令集结构的分类.png\" width = \"300\" height = \"200\" alt=\"指令集结构的分类\" align=center />\n            </div>\n            几种分类（堆栈；累加器等）\n        - <div  align=\"center\">\n            <img src=\"../图片/计算机体系结构/通用寄存器型指令集结构的分类.png\" width = \"300\" height = \"200\" alt=\"通用寄存器型指令集结构\" align=center />\n            </div>\n             通用寄存器型指令集结构的分类  -------？\n        - 由此， 三种通用寄存器型指令集结构的优缺点: 寄存器-寄存器（0，3）；寄存器-存储器型（1，2）；存储器-存储器型（3，3）\n        - <div  align=\"center\">\n            <img src=\"../图片/计算机体系结构/指令集结构设计概观.png\" width = \"300\" height = \"200\" alt=\"指令集结构设计概观\" align=center />\n            </div>\n            指令集结构设计概观\n    3. 存储器寻址：几乎所有都使用`字节寻址`来访问存储器操作数\n        - ARM+MIPS要求操作对象必须是对齐的\n    4. 存储器寻址与寻址模式\n        1. 字节寻址 ： 对齐\n        2. `寻址模式`：\n            1. MIPS寻址模式：\n                - 寄存器寻址\n                - 立即数寻址\n                - 位移量寻址 ：讲固定偏移量加到寄存器得出存储器地址\n            2. 80x86 ：\n                - 寄存器\n                - 立即数\n                - 位移量 ： 分三种。。。\n            3. ARM ：\n                - 寄存器\n                - 立即数\n                - 位移量\n                - PC（程序计数器）的寻址方式\n                - 两个寄存器之和\n                - 自动递增寻址/自动递减寻址\n\n    3. 寻址方式：寄存器寻址；立即值寻址；偏移寻址；寄存器间接寻址（没有偏移量，值得注意的是：`(R1)`表示的是以R1的`地址`为内容的）；索引寻址（一般可用于对数组的访问）；直接寻址或绝对寻址；存储器间接寻址；自增/减寻址；缩放寻址\n        - e.g.` Add R1, (1001)` ---这属于直接寻址，1001是地址， 这条指令的含义就为：`Regs[R1]<-Regs[R1]+Mem[1001]`，这里的Mem[1001]就是地址为1001的寄存器里的内容。变量Mem用来表示存储器中的一个数组，存储按照字节寻址，它可以传送任何数目的字节。\n        - e.g. `Add R1,@(R3)` ---存储器间接寻址，含义为：`Reg[R1]<-Regs[R1]+Mem[Mem[Regs[R3]]]`首先访问寄存器，取出一个存储单元的地址，再访问该存储单元，取出保存操作数的那个存储单元的地址，再通过一次访存，得到操作数。   （只是加深理解，基本不会使用）\n    4. MIPS的指令格式：\n    <div  align=\"center\">\n    <img src=\"../图片/计算机体系结构/MIPS指令格式.png\" width = \"450\" height = \"200\" alt=\"MIPS指令格式\" align=center />\n    </div>\n\n    [MIPS指令基本格式一篇文章](http://www.yuejianzun.xyz/2018/02/18/MIPS指令集与简单分析/)\n\n    4. 指令系统的设计和优化\n        1. 引入控制指令概念：Jump（跳转），Branch\n        2. 过程调用和返回的状态保存（调用者保存 被调用者保存--一般用它）\n    5. 指令系统的发展和改进\n        - 强化指令功能，软件功能向硬件功能转移（CISC）\n        - RISC：在向着它发展\n    6. 操作数的类型和大小\n    7. MIPS指令系统结构\n        1. 操作数保存在寄存器里，所以只能通过load/store指令来访问存储器\n        2. MIPS是一种多元指令结构，注重指令流水效率\n        3. 有32个32位的通用寄存器，R0的内容恒为0；32个32位浮点寄存器\n        4. 支持：寄存器寻址，立即值寻址，偏移寻址，寄存器间接寻址。\n        5. 操作类型：<-,##,\n\n5. ### 流水线技术\n    1. #### 流水线基本概念  ：硬件资源降到最低程度\n        1. 指令流水线\n        2. 功能部件流水线\n        3. 用时空图来描述：横时间，纵各流水线\n        4. 特点：\n            1. 级/段；深度\n        5. 流水线的分类：\n            1. （按流水线 完成的 功能 分类）\n                1. 单功能流水线 ： 只能完成一种固定功能的流水线\n                2. 多功能流水线 ： 各段进行不同的连接，例如：TI ASC\n            2. 按连接方式\n                1. 静态流水线 ：TI ASC\n                2. 动态流水线 ： 重叠在一起，可能会冲突\n            3. 按级别\n                1. 部件级进行流水\n                2. 指令流水线\n                3. 处理机间流水线--宏流水线\n            4. 按数据表示\n                1. 标量流水处理机 ： 仅对标量进行数据处理\n                2. 向量流水处理机 ： 例如TI ASC\n            5. 是否有反馈回路\n                1. 线性流水线\n                2. 非线性 ： 有可能在汇集点冲突 ---流水线调度问题\n    2. #### MIPS基本流水线：\n        1. 非流水方式\n        2. 划分为5个阶段：\n            1. 取指令（IF）：\n                - 根据PC值从存储器取出指令，并将指令送入指令寄存器IR；PC++（指向下一条指令）；并将下一条指令的的地址放入临时寄存器NPC中   ---ps：指令的地址就是pc的值吗\n            2. 译码/读寄存器（ID）：\n                - 进行指令译码，读IR寄存器（指令寄存器），按照相应寄存器号读寄存器文件，...\n            3. 执行/有效地址计算周期（EX）：\n                - ，\n            4. 访存/分支操作完成周期（MEM）\n            5. 写回周期（WB）\n            6. 性能分析\n                7. ？？？？？\n    3. 流水线中的相关\n        1. 流水线性能分析\n            三项性能指标：吞吐率；最大吞吐率；实际吞吐率\n                - 吞吐率是指单位时间内流水线所完成的任务数或输出结果的数量\n                - 最大吞吐率：流水线达到稳定状态后所得到的吞吐率\n                    瓶颈 ---细分瓶颈段，重复设置瓶颈段（并列的）\n                    有一个吞吐率的计算 题型\n                - 假设流水线各段的时间相等\n        2. 加速比： 流水线速度：等功能非流水线速度\n        3. 效率：流水线的设备利用率\n            1. 从时空图上看，时空区面积之比\n            2. 效率是：实际加速比与最大加速比之比\n        4. 锁存器 ： 对时钟扭曲不敏感\n        5. 什么是相关？ --相邻/近的两条指令因存在某种关联，后一条指令不能在原先指定的时钟周期开始执行\n        6. 消除相关的基本方法：暂停（低效）\n        7. 三种不同类型的相关：\n            - 结构相关：硬件资源满足不了重叠执行的要求\n                原因：\n                    - 功能部件不是全流水\n                    - 重复设置的资源数量不足\n                避免：\n                    - 所有功能单元完全流水化\n                    - 设置足够多的硬件资源 （硬件代价很大）\n            - 数据相关：要用到前面指令的结果\n                1. 定向技术forwarding（可以减少数据相关带来的暂停），也称为旁路（bypassing）：\n            - 控制相关：遇到分支指令/改变pc值的指令\n    4. 实例分析：MIPS R4000\n    5. 向量处理机\n\n\n## 数据结构与算法\n1. ### GPU\n\n\n## extra\n1. IPv4地址由32位二进制数组成，即地址字节数为4 xxx.xxx.xxx.xxx (xxx是小于255的十进制数，换算成2进制就是小于8位)\n    - 将地址长度扩大至 IPv4 地址的 4 倍， 即由 32bit 扩展至128bit ，即16个地址字节数\n    - 为互联网上的每一个网络和每一台主机分配一个逻辑地址\n    - MAC（Media Access Control或者Medium Access Control）地址，意译为媒体访问控制，或称为物理地址、硬件地址，用来定义网络设备的位置\n    - 存储器地址（Memory address）是存储器中存储单元的编号。 --32位操作系统存储器地址字节为4个字节，64位操作系统存储器地址字节为8个字节\n        - 一个字节（byte）就是8bit\n        - **1kb是1024byte**，1024*8位数字\n        - 一个字（word）是32位，32bits，也就是4个字节（byte）\n        - 1 kb == 1024 byte == 1024*8 bit\n        - 1024b(字节)=1kb=512个汉字\n2. 半导体：关系到CPU内能塞进多少个晶体管，CPU所能达到的频率还有它的功耗\n    1. ss\n\n| 1978年              | 3000nm生产工艺 | 29000个晶体      | 工作频率5MHz            |\n| ------------------- | -------------- | ---------------- | ----------------------- |\n| 28核Skylake-SP Xeon | 14nm生产工艺   | 超过80亿个晶体管 | 5GHz（Core i9-9900K）｜\n    我们所说的生产工艺是指\n    线宽，也就是芯片上的最基本功能单位门电路的宽度，因为实际上门电路之间连线的宽度同门电路的宽度相同，所以线宽可以描述制造工艺\n    制造工艺用特征尺寸来衡量，即一个晶体管或一条连线在x/y的最小尺寸\n3. 晶圆 晶片 集成电路 芯片 核 cpu 主板 内存 等等的关系：\n    1. 硅晶圆尺寸越大越好，因为这样每块晶圆能生产更多的芯片。\n        - 无法随心所欲地增大晶圆尺寸： 生产过程中，离晶圆中心越远就越容易出现坏点\n        - 晶体管在处理器上集成，晶体管与晶体管之间用金属线路连接（金属线路的容量直接影响信息传送的速度）\n    2. 了解cpu的制作流程 ：\n        1. 切割晶圆 ： 用机器从单晶硅棒上切割下一片事先确定规格的硅晶片，并将其划分成多个细小的区域，每个区域都将成为一个CPU的内核（Die）\n        2. 紫外线通过`印制着CPU复杂电路结构图样`的模板照射硅基片，被紫外线照射的地方光阻物质溶解\n        3. 下一步就是蚀刻（etching）：结合上面制造的基片，CPU的门电路就完成了\n        4. 重复；分层：3d结构，7--9层，层数决定于设计时CPU的布局，以及通过的电流大小\n        5. 封装：封入一个陶瓷的或塑料的封壳中，这样它就可以很容易地装在一块电路板上\n    3. 芯片是半导体元件产品的统称，是集成电路的载体，由晶圆分割而成。\n        - 集成电路包括半导体芯片及外围相关电路（电阻电容二极管）\n        - 芯片是“集成电路”的俗称。集成电路有模拟集成电路和数字集成电路，如果一片集成电路（芯片）中既有模拟电路又有数字电路，则称其为数模混合集成电路\n        - CPU是中央处理器，包含运算器和控制器，是数字电路。如果将运算器和控制器集成在一片集成电路上，就称之为微处理器。目前人们将中央处理器与微处理器已经混为一谈了\n        - so，CPU是一种数字芯片，只是众多芯片中的一类\n        - 一块晶圆上可以切割出数百个处理器(晶体管：50-200nm尺寸)\n    4. 晶体管相当于开关，控制着电流的方向（一个针头上就能放下大约3000万个晶体管）。\n4. 线程进程程序：\n    1. 一个程序包含着若干个进程，一个进程包含着若干个线程。\n5. SRAM DRAM 一个静态一个动态\n    - 所谓的“静态”，是指这种存储器只要保持通电，里面储存的数据就可以恒常保持。相对之下，动态随机存取存储器（DRAM）里面所储存的数据就需要周期性地更新。然而，当电力供应停止时，SRAM储存的数据还是会消失（被称为volatile memory），这与在断电后还能储存资料的ROM或闪存是不同的。\n6. some原理：\n    1. DMA（Direct Memory Access直接存储器访问）： 在DMA控制器的管理下，外设和存储器直接进行数据交换，而不需CPU干预\n7. 一些简写概念的总结\n    - JTAG： [joint test action group](https://www.cnblogs.com/TaigaCon/archive/2012/12/20/2826941.html)\n    - LQFP： Low-profile Quad Flat Package 薄 方 扁平封装 （BGA封装： Ball Grid Array Package）\n    - PCB ： printed circuit board 印刷电路板\n    - SPI： serial peripheral interface 串行外设接口\n\n10. <kbd>这是什么</kbd>\n<table>\n    <tr>\n        <th rowspan=\"2\">真实情况</th>\n        <th colspan=\"2\">预测结果</th>\n    </tr>\n    <tr>\n        <td>正例</td>\n        <td>反例</td>\n    </tr>\n    <tr>\n        <td>正例</td>\n        <td>TP(真正例)</td>\n        <td>FN(假反例)</td>\n    </tr>\n    <tr>\n        <td>反例</td>\n        <td>FP(假正例)</td>\n        <td>TN(真反例)</td>\n    </tr>\n</table>\n\n\n## 疑问疑难\n1. Mem\\[\\]和Regs\\[\\]的理解：Mem的方括号里是表示地址的一串数字，Mem\\[\\]表达的是内容       ----所以表示地址的和表示内容的其实是长度相同的一串二进制数字吗？？？       Regs\\[\\]表示的是数值\n2.  (7.1早上，周四) 数据级并行，指令集并行，任务级并行，线程级并行；SIMD，MIMD等。深入梳理\n3.  核 整理 core multi-core\n4.  各种频率的理解\n    1. 手机 cpu频率2.xGHz（两千多MHz）\n    2. 内存条的频率 最大到三千兆赫兹（3000MHz）\n5. PCI SATA这些是什么\n","slug":"WuhanNote","published":1,"updated":"2021-07-05T01:06:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqs0rf8600260mwlh0pxbeqd","content":"<h1 id=\"Summer-Intern-21年6-8月\"><a href=\"#Summer-Intern-21年6-8月\" class=\"headerlink\" title=\"Summer Intern 21年6-8月\"></a>Summer Intern 21年6-8月</h1><h1 id=\"计算机体系结构\"><a href=\"#计算机体系结构\" class=\"headerlink\" title=\"计算机体系结构\"></a>计算机体系结构</h1><h2 id=\"国防科大公开课\"><a href=\"#国防科大公开课\" class=\"headerlink\" title=\"国防科大公开课\"></a>国防科大公开课</h2><p><a href=\"https://www.bilibili.com/video/BV1aJ411g7LM?p=2\">计算机体系结构国防科大35讲</a></p>\n<span id=\"more\"></span>\n<ol>\n<li><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><ol>\n<li><p>冯诺依曼结构</p>\n</li>\n<li><p>20世纪80年代以来：RISC（精简指令集计算机）–指令集并行（流水线；多指令发射）；缓存</p>\n<ul>\n<li>20世纪80年代出现了个人计算机和工作站，因为有微处理器可供使用</li>\n<li>80年代初RISC出现 –简化了指令系统，把更多的芯片硅面积用于实现<code>流水</code>和<code>cache</code></li>\n<li>20世纪80年代，单片芯片上集成到25000-50000个晶体管</li>\n</ul>\n</li>\n<li><p>ISA（Instruction Set Architecture指令集体系结构）：区分软硬件的界限</p>\n<ul>\n<li>80x86<ol>\n<li>16个通用寄存器，16个存入浮点数据的寄存器</li>\n<li><code>寄存器-存储器</code>ISA：在许多指令中，访问存储器</li>\n<li>编码为可变长度，变化长度为1–18个<code>字节</code> – 可变长度的指令可以占用较少的空间</li>\n</ol>\n</li>\n<li>ARM<ol>\n<li><code>载入-存储</code>ISA（只能用load/store来访问存储器，所有最新的ISA都采用载入-存储ISA）</li>\n<li>所有ARM和MIPS指令都是的长度都是32位</li>\n</ol>\n</li>\n<li>MIPS<ol>\n<li>32个通用寄存器，32个浮点寄存器</li>\n<li><code>载入-存储</code>ISA（只能用load/store来访问存储器）</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>intel和ARM（都是ISA）  （CISC和RISC）</p>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/21266987\">知乎一篇文章</a></li>\n<li>ARM和Intel 两种架构，X86无法做到ARM的功耗，而ARM也无法做到X86的性能</li>\n<li>ARM从来只是设计<code>低功耗处理器</code>，Intel的强项是设计<code>超高性能</code>的台式机和服务器处理器。</li>\n<li>Intel i7处理器平均发热功率为45w，ARM是1/15</li>\n<li>制造工艺的纳米数越小，能量的使用效率越高</li>\n<li>ARM的big.LITTLE架构是一项Intel一时无法复制的创新 –处理器中的核可以有不同的性能和功耗</li>\n<li>前端设计体现了处理器的构架，精简指令集和复杂指令集的区别是通过前端设计体现的</li>\n<li>后端设计处理电压，时钟等问题，是耗电的直接因素。</li>\n<li>移动处理器都是片上系统(SoC)架构，也就是说，处理器之外，图形，视频，音频，网络等功能都在一个芯片里。这些模块的打开与关闭就容易预测的多，并且可以通过软件来控制。这样，整体功耗就更加取决于软件和制造工艺而不是处理机架构。在这点上，X86的处理器占优势，因为Intel的工艺有很大优势</li>\n<li><code>疑惑</code>：<ol>\n<li>ARM处理器的乱序执行能力不如intel–intel加入乱序逻辑结构，因为ARM是异构，就没有这方面的问题（一个核顺序执行，一个核乱序执行）</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>存储器寻址与寻址模式</p>\n<ol>\n<li>字节寻址 ： 对齐</li>\n<li><code>寻址模式</code>：<ol>\n<li>MIPS寻址模式：<ul>\n<li>寄存器寻址</li>\n<li>立即数寻址</li>\n<li>位移量寻址 ：讲固定偏移量加到寄存器得出存储器地址</li>\n</ul>\n</li>\n<li>80x86 ：<ul>\n<li>寄存器</li>\n<li>立即数</li>\n<li>位移量 ： 分三种。。。</li>\n</ul>\n</li>\n<li>ARM ：<ul>\n<li>寄存器</li>\n<li>立即数</li>\n<li>位移量</li>\n<li>PC（程序计数器）的寻址方式</li>\n<li>两个寄存器之和</li>\n<li>自动递增寻址/自动递减寻址</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>宽带和吞吐量：在给定时间内完成的总工作量</p>\n</li>\n<li><p>集成电路中的功率和能耗：</p>\n<ol>\n<li>功率：单位时间的能耗</li>\n<li>能耗 与 该晶体管驱动的容性负载与电压平方的乘积成正比</li>\n<li>缩减元件之间的间距之后，晶体管之间的电容也会降低，晶体管的开关频率也得以提升，从而整个芯片的工作频率就上去了。</li>\n<li>晶体管的尺寸缩小会减低它们的内阻，所需导通电压会降低，这代表着CPU的工作电压会降低</li>\n<li>动态随机存取存储器（Dynamic Random Access Memory，DRAM）是一种半导体存储器，主要的作用原理是利用电容内存储电荷的多寡来代表一个二进制比特（bit）是1还是0。由于在现实中晶体管会有漏电电流的现象，导致电容上所存储的电荷数量并不足以正确的判别数据，而导致数据毁损。因此对于DRAM来说，周期性地充电是一个无可避免的要件。由于这种需要定时刷新的特性，因此被称为“动态”存储器。相对来说，静态存储器（SRAM）只要存入数据后，纵使不刷新也不会丢失记忆。</li>\n</ol>\n</li>\n<li><p>可信任度：</p>\n<ol>\n<li>模块可靠性：对发生故障之前的时间度量 MTTF MTTR</li>\n</ol>\n</li>\n<li><p><code>时钟周期</code>是计算机中最基本的、最小的时间单位。 在一个时钟周期内，CPU仅完成一个最基本的动作。 时钟周期是一个时间的量。</p>\n<ul>\n<li>1993年的奔腾支持超流水线，一个时钟周期可以执行两条整数运算命令</li>\n<li>现在的时钟周期有的是<code>0.几ns</code>；</li>\n</ul>\n</li>\n<li><p>CPU到内存时间还是不够快，有时候要几百个时钟周期。所以内存和cpu之间还有2–3级<code>缓存</code></p>\n</li>\n</ol>\n</li>\n</ol>\n<div  align=\"center\">\n    <img src=\"../图片/计算机体系结构/程序执行和指令的操作.png\" width = \"300\" height = \"200\" alt=\"bpp\" align=center />\n    </div>\n    程序执行的过程 --控制流 数据流\n    <div  align=\"center\">\n    <img src=\"../图片/计算机体系结构/计算机的属性.png\" width = \"300\" height = \"200\" alt=\"bpp\" align=center />\n    </div>\n    程序员能看到的计算机的属性\n    <div  align=\"center\">\n    <img src=\"../图片/计算机体系结构/指令集结构的逻辑实现.png\" width = \"300\" height = \"200\" alt=\"bpp\" align=center />\n    </div>\n    指令集结构的逻辑实现\n\n\n<pre><code>20. 系列机和兼容\n    1. family machine：具有相同体系机构，但组成和实现不同\n    2. 软件兼容software compatibility ： 同一个软件-不加修改-获得相同结果（兼容种类也可以细分为二进制级兼容，汇编级兼容等）\n    3. 兼容机：支持软件兼容的硬件基础\n    4. 兼容性（向下向上：高低档机器先前向后：不同时期投入市场）   --兼容性up 寿命up\n        向后兼容：软件兼容的根本特征\n</code></pre>\n<ol start=\"2\">\n<li><h3 id=\"发展\"><a href=\"#发展\" class=\"headerlink\" title=\"发展\"></a>发展</h3><ol>\n<li>计算机的分代（从91年以后是第五代：高性能微处理器+大规模高密度电路）</li>\n<li>软件的发展：</li>\n<li>处理器性能的提高，从单纯依赖指令集并行（ILP）转向数据级并行（DLP）和线程级并行（TLP）<ul>\n<li>指令 和 线程</li>\n<li>数据级并行DLP：同时操作许多数据项</li>\n<li>任务/线程级并行：？？？</li>\n<li>戴老师讲：数据级并行其实就是许多人用用一个指令处理一堆不同的数据</li>\n</ul>\n</li>\n<li>计算机的分类：<ol>\n<li>个人移动设备PMD（手机平板）</li>\n<li>台式机</li>\n<li>服务器：<pre><code> - 可用性 ： 要不间断的能使用，安全\n - 可拓展性 ： 满足对功能的增长需求 ， 拓展计算容量，内存，I/O带宽\n</code></pre>\n</li>\n<li>仓库级计算机（WSC）</li>\n<li>嵌入式：能否运行第三方软件<br>根据并行分：<ol>\n<li>SISD</li>\n<li>SIMD：数据级并行，同一指令由多个使用不同数据流的处理器执行</li>\n<li>MISD</li>\n<li>MIMD：多指令 多数据  –针对的是任务级并行</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>应用的发展：<ul>\n<li>桌面计算：笔记本，工作站…（竞争激烈的市场）</li>\n<li>服务器计算：可靠性做为追求目标</li>\n<li>嵌入式计算：打印机，物联网…</li>\n</ul>\n</li>\n<li>体系结构的发展：对结构的不断改良<ul>\n<li>分布的IO处理能力：IO装置具有独立的处理能力：打印机，把游戏指令发给显卡后显卡会主动生成怪物      —-有效减轻cpu处理负荷</li>\n<li>保护的存储器空间：数据和程序严格割裂开，有利于程序的保护和发展</li>\n<li>存储器组织结构的发展</li>\n<li><code>并行处理技术</code></li>\n<li>指令集发展：用户可以定义自己的指令系统 效率up</li>\n</ul>\n</li>\n<li>并行处理技术的发展<ol>\n<li>并行性概念：<ol>\n<li><strong><code>指令级并行</code></strong><ol>\n<li>2002年以来，性能增长下降约20% —&gt; 可以进一步有效开发的指令级并行已经很少  —&gt;04年，从单纯依靠指令级并行转向线程级并行和数据级并行</li>\n</ol>\n</li>\n<li><code>线程级并行</code></li>\n</ol>\n</li>\n<li>提高并行性的技术途径 ：时间重叠（用流水线，同时处理多个指令，每个指令都可以处于不同的阶段），资源重复（一个cpu不够用多个，数量取胜原则），资源共享（提高资源的利用效率，多个人使用一个打印机）</li>\n<li>并行计算的应用需求：对计算机的长远需求：工业设计 大气污染 天气预报等等</li>\n</ol>\n</li>\n<li>计算机系统的成本和价格</li>\n<li>思考一些问题： 软件兼容的例子；列举操作系统为上层应用提供的典型API有哪些，功能是什么</li>\n<li>集成电路的发展和<code>摩尔定律</code>：“集成电路密度大概每两年翻一番—摩尔定律”  摩尔定律，也就是说，当价格保持不变时，集成电路上可容纳的晶体管数量每18个月增加一倍，性能提高一倍<table>\n<thead>\n<tr>\n<th>时间</th>\n<th>生产工艺</th>\n<th>cpu晶体管数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2000 奔腾4威拉米特</td>\n<td>180nm</td>\n<td>4200万</td>\n</tr>\n<tr>\n<td>2010  Corei7≤980X</td>\n<td>32nm</td>\n<td>11亿6999万9999个</td>\n</tr>\n<tr>\n<td>2013核心i7 4960X</td>\n<td>22nm</td>\n<td>18.6亿</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n</li>\n<li><h3 id=\"计算机系统设计和分析\"><a href=\"#计算机系统设计和分析\" class=\"headerlink\" title=\"计算机系统设计和分析\"></a>计算机系统设计和分析</h3><ol>\n<li><p>成本与价格 ：晶圆晶片制造，测试成本，封装。。。</p>\n</li>\n<li><p>基准测试程序： <a href=\"www.SPEC.org\">测试程序包</a></p>\n</li>\n<li><p>量化设计的基本原则</p>\n<ol>\n<li><p>大概率事件优先原则：追求全局的最优结果</p>\n<ul>\n<li>赋予优先处理权和资源使用权</li>\n</ul>\n</li>\n<li><p>Amdahl定律：通过对系统加速比的研究，来找到系统中占有最重要的部件（可以定量计算）</p>\n<ul>\n<li>假设对机器部件的改进，来计算加速比</li>\n<li>如下：  <div  align=\"center\">\n  <img src=\"../图片/计算机体系结构/amdahl定律1.png\" width = \"400\" height = \"200\" alt=\"bpp\" align=center />\n  </div>\n  系统加速比的公式\n  系统加速比依赖于两个因素：可改进比例，部件加速比</li>\n<li>性能增加的递减规则：针对改进的某一部分，改进越多，效果越小</li>\n<li>公式的引申和推论：<ul>\n<li>对于整个任务的一部分进行优化，则<code>最大加速比</code>不大于1/(1-可改进比例)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Amdahl定律的计算练习</p>\n</li>\n<li><p>程序的<code>局部性</code>原理：程序执行时所访问的存储器在<code>时空</code>上是相对的簇聚（这种簇聚包括指令和数据两部分）: 时间局部性 空间局部性 生产-消费局部性</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><h3 id=\"指令系统\"><a href=\"#指令系统\" class=\"headerlink\" title=\"指令系统\"></a>指令系统</h3><ol>\n<li><p>指令集结构概述</p>\n<ol>\n<li>每条指令都是直接由cpu硬件执行<ul>\n<li>CPU插播：进入工厂的原料(程序指令)，经过物资分配部门(控制单元)的调度分配，被送往生产线(逻辑运算单元)，生产出成品(处理后的数据)后，再存储在仓库(储存单元)中，最后等着拿到市场上去卖(交由应用程序使用)</li>\n<li>cpu是通过引脚与外围交流的，所有的数据都会通过引脚输入或者输出</li>\n</ul>\n</li>\n<li>指令的表示：二进制格式…</li>\n<li>指令的操作非常简单，其操作由操作码编码表示，每个操作需要的操作数个数为0-3个不等   –操作数是一些<code>存储单元</code>的地址(典型的存储单元：主存，寄存器，堆栈和累加器)</li>\n<li><code>指令集与计算机的性能</code> T<ul>\n<li>指令集在程序中：软硬件的接口</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>指令集结构的分类：</p>\n<ul>\n<li>在cpu中<code>操作数</code>的存储方法</li>\n<li><div  align=\"center\">\n  <img src=\"../图片/计算机体系结构/指令集结构的分类.png\" width = \"300\" height = \"200\" alt=\"指令集结构的分类\" align=center />\n  </div>\n  几种分类（堆栈；累加器等）</li>\n<li><div  align=\"center\">\n  <img src=\"../图片/计算机体系结构/通用寄存器型指令集结构的分类.png\" width = \"300\" height = \"200\" alt=\"通用寄存器型指令集结构\" align=center />\n  </div>\n   通用寄存器型指令集结构的分类  -------？</li>\n<li>由此， 三种通用寄存器型指令集结构的优缺点: 寄存器-寄存器（0，3）；寄存器-存储器型（1，2）；存储器-存储器型（3，3）</li>\n<li><div  align=\"center\">\n  <img src=\"../图片/计算机体系结构/指令集结构设计概观.png\" width = \"300\" height = \"200\" alt=\"指令集结构设计概观\" align=center />\n  </div>\n  指令集结构设计概观</li>\n</ul>\n</li>\n<li><p>存储器寻址：几乎所有都使用<code>字节寻址</code>来访问存储器操作数</p>\n<ul>\n<li>ARM+MIPS要求操作对象必须是对齐的</li>\n</ul>\n</li>\n<li><p>存储器寻址与寻址模式</p>\n<ol>\n<li>字节寻址 ： 对齐</li>\n<li><code>寻址模式</code>：<ol>\n<li>MIPS寻址模式：<ul>\n<li>寄存器寻址</li>\n<li>立即数寻址</li>\n<li>位移量寻址 ：讲固定偏移量加到寄存器得出存储器地址</li>\n</ul>\n</li>\n<li>80x86 ：<ul>\n<li>寄存器</li>\n<li>立即数</li>\n<li>位移量 ： 分三种。。。</li>\n</ul>\n</li>\n<li>ARM ：<ul>\n<li>寄存器</li>\n<li>立即数</li>\n<li>位移量</li>\n<li>PC（程序计数器）的寻址方式</li>\n<li>两个寄存器之和</li>\n<li>自动递增寻址/自动递减寻址</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>寻址方式：寄存器寻址；立即值寻址；偏移寻址；寄存器间接寻址（没有偏移量，值得注意的是：<code>(R1)</code>表示的是以R1的<code>地址</code>为内容的）；索引寻址（一般可用于对数组的访问）；直接寻址或绝对寻址；存储器间接寻址；自增/减寻址；缩放寻址</p>\n<ul>\n<li>e.g.<code> Add R1, (1001)</code> —这属于直接寻址，1001是地址， 这条指令的含义就为：<code>Regs[R1]&lt;-Regs[R1]+Mem[1001]</code>，这里的Mem[1001]就是地址为1001的寄存器里的内容。变量Mem用来表示存储器中的一个数组，存储按照字节寻址，它可以传送任何数目的字节。</li>\n<li>e.g. <code>Add R1,@(R3)</code> —存储器间接寻址，含义为：<code>Reg[R1]&lt;-Regs[R1]+Mem[Mem[Regs[R3]]]</code>首先访问寄存器，取出一个存储单元的地址，再访问该存储单元，取出保存操作数的那个存储单元的地址，再通过一次访存，得到操作数。   （只是加深理解，基本不会使用）</li>\n</ul>\n</li>\n<li><p>MIPS的指令格式：</p>\n<div  align=\"center\">\n<img src=\"../图片/计算机体系结构/MIPS指令格式.png\" width = \"450\" height = \"200\" alt=\"MIPS指令格式\" align=center />\n</div></li>\n</ol>\n<p> <a href=\"http://www.yuejianzun.xyz/2018/02/18/MIPS%E6%8C%87%E4%BB%A4%E9%9B%86%E4%B8%8E%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/\">MIPS指令基本格式一篇文章</a></p>\n<ol start=\"4\">\n<li>指令系统的设计和优化<ol>\n<li>引入控制指令概念：Jump（跳转），Branch</li>\n<li>过程调用和返回的状态保存（调用者保存 被调用者保存–一般用它）</li>\n</ol>\n</li>\n<li>指令系统的发展和改进<ul>\n<li>强化指令功能，软件功能向硬件功能转移（CISC）</li>\n<li>RISC：在向着它发展</li>\n</ul>\n</li>\n<li>操作数的类型和大小</li>\n<li>MIPS指令系统结构<ol>\n<li>操作数保存在寄存器里，所以只能通过load/store指令来访问存储器</li>\n<li>MIPS是一种多元指令结构，注重指令流水效率</li>\n<li>有32个32位的通用寄存器，R0的内容恒为0；32个32位浮点寄存器</li>\n<li>支持：寄存器寻址，立即值寻址，偏移寻址，寄存器间接寻址。</li>\n<li>操作类型：&lt;-,##,</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><h3 id=\"流水线技术\"><a href=\"#流水线技术\" class=\"headerlink\" title=\"流水线技术\"></a>流水线技术</h3><ol>\n<li><h4 id=\"流水线基本概念-：硬件资源降到最低程度\"><a href=\"#流水线基本概念-：硬件资源降到最低程度\" class=\"headerlink\" title=\"流水线基本概念  ：硬件资源降到最低程度\"></a>流水线基本概念  ：硬件资源降到最低程度</h4><ol>\n<li>指令流水线</li>\n<li>功能部件流水线</li>\n<li>用时空图来描述：横时间，纵各流水线</li>\n<li>特点：<ol>\n<li>级/段；深度</li>\n</ol>\n</li>\n<li>流水线的分类：<ol>\n<li>（按流水线 完成的 功能 分类）<ol>\n<li>单功能流水线 ： 只能完成一种固定功能的流水线</li>\n<li>多功能流水线 ： 各段进行不同的连接，例如：TI ASC</li>\n</ol>\n</li>\n<li>按连接方式<ol>\n<li>静态流水线 ：TI ASC</li>\n<li>动态流水线 ： 重叠在一起，可能会冲突</li>\n</ol>\n</li>\n<li>按级别<ol>\n<li>部件级进行流水</li>\n<li>指令流水线</li>\n<li>处理机间流水线–宏流水线</li>\n</ol>\n</li>\n<li>按数据表示<ol>\n<li>标量流水处理机 ： 仅对标量进行数据处理</li>\n<li>向量流水处理机 ： 例如TI ASC</li>\n</ol>\n</li>\n<li>是否有反馈回路<ol>\n<li>线性流水线</li>\n<li>非线性 ： 有可能在汇集点冲突 —流水线调度问题</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><h4 id=\"MIPS基本流水线：\"><a href=\"#MIPS基本流水线：\" class=\"headerlink\" title=\"MIPS基本流水线：\"></a>MIPS基本流水线：</h4><ol>\n<li>非流水方式</li>\n<li>划分为5个阶段：<ol>\n<li>取指令（IF）：<ul>\n<li>根据PC值从存储器取出指令，并将指令送入指令寄存器IR；PC++（指向下一条指令）；并将下一条指令的的地址放入临时寄存器NPC中   —ps：指令的地址就是pc的值吗</li>\n</ul>\n</li>\n<li>译码/读寄存器（ID）：<ul>\n<li>进行指令译码，读IR寄存器（指令寄存器），按照相应寄存器号读寄存器文件，…</li>\n</ul>\n</li>\n<li>执行/有效地址计算周期（EX）：<ul>\n<li>，</li>\n</ul>\n</li>\n<li>访存/分支操作完成周期（MEM）</li>\n<li>写回周期（WB）</li>\n<li>性能分析<ol start=\"7\">\n<li>？？？？？</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>流水线中的相关<ol>\n<li>流水线性能分析<br> 三项性能指标：吞吐率；最大吞吐率；实际吞吐率<pre><code> - 吞吐率是指单位时间内流水线所完成的任务数或输出结果的数量\n - 最大吞吐率：流水线达到稳定状态后所得到的吞吐率\n     瓶颈 ---细分瓶颈段，重复设置瓶颈段（并列的）\n     有一个吞吐率的计算 题型\n - 假设流水线各段的时间相等\n</code></pre>\n</li>\n<li>加速比： 流水线速度：等功能非流水线速度</li>\n<li>效率：流水线的设备利用率<ol>\n<li>从时空图上看，时空区面积之比</li>\n<li>效率是：实际加速比与最大加速比之比</li>\n</ol>\n</li>\n<li>锁存器 ： 对时钟扭曲不敏感</li>\n<li>什么是相关？ –相邻/近的两条指令因存在某种关联，后一条指令不能在原先指定的时钟周期开始执行</li>\n<li>消除相关的基本方法：暂停（低效）</li>\n<li>三种不同类型的相关：<ul>\n<li>结构相关：硬件资源满足不了重叠执行的要求<br>  原因：<pre><code>  - 功能部件不是全流水\n  - 重复设置的资源数量不足\n</code></pre>\n  避免：<pre><code>  - 所有功能单元完全流水化\n  - 设置足够多的硬件资源 （硬件代价很大）\n</code></pre>\n</li>\n<li>数据相关：要用到前面指令的结果<ol>\n<li>定向技术forwarding（可以减少数据相关带来的暂停），也称为旁路（bypassing）：</li>\n</ol>\n</li>\n<li>控制相关：遇到分支指令/改变pc值的指令</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>实例分析：MIPS R4000</li>\n<li>向量处理机</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"数据结构与算法\"><a href=\"#数据结构与算法\" class=\"headerlink\" title=\"数据结构与算法\"></a>数据结构与算法</h2><ol>\n<li><h3 id=\"GPU\"><a href=\"#GPU\" class=\"headerlink\" title=\"GPU\"></a>GPU</h3></li>\n</ol>\n<h2 id=\"extra\"><a href=\"#extra\" class=\"headerlink\" title=\"extra\"></a>extra</h2><ol>\n<li>IPv4地址由32位二进制数组成，即地址字节数为4 xxx.xxx.xxx.xxx (xxx是小于255的十进制数，换算成2进制就是小于8位)<ul>\n<li>将地址长度扩大至 IPv4 地址的 4 倍， 即由 32bit 扩展至128bit ，即16个地址字节数</li>\n<li>为互联网上的每一个网络和每一台主机分配一个逻辑地址</li>\n<li>MAC（Media Access Control或者Medium Access Control）地址，意译为媒体访问控制，或称为物理地址、硬件地址，用来定义网络设备的位置</li>\n<li>存储器地址（Memory address）是存储器中存储单元的编号。 –32位操作系统存储器地址字节为4个字节，64位操作系统存储器地址字节为8个字节<ul>\n<li>一个字节（byte）就是8bit</li>\n<li><strong>1kb是1024byte</strong>，1024*8位数字</li>\n<li>一个字（word）是32位，32bits，也就是4个字节（byte）</li>\n<li>1 kb == 1024 byte == 1024*8 bit</li>\n<li>1024b(字节)=1kb=512个汉字</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>半导体：关系到CPU内能塞进多少个晶体管，CPU所能达到的频率还有它的功耗<ol>\n<li>ss</li>\n</ol>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>1978年</th>\n<th>3000nm生产工艺</th>\n<th>29000个晶体</th>\n<th>工作频率5MHz</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>28核Skylake-SP Xeon</td>\n<td>14nm生产工艺</td>\n<td>超过80亿个晶体管</td>\n<td>5GHz（Core i9-9900K）｜</td>\n</tr>\n</tbody></table>\n<pre><code>我们所说的生产工艺是指\n线宽，也就是芯片上的最基本功能单位门电路的宽度，因为实际上门电路之间连线的宽度同门电路的宽度相同，所以线宽可以描述制造工艺\n制造工艺用特征尺寸来衡量，即一个晶体管或一条连线在x/y的最小尺寸\n</code></pre>\n<ol start=\"3\">\n<li><p>晶圆 晶片 集成电路 芯片 核 cpu 主板 内存 等等的关系：</p>\n<ol>\n<li>硅晶圆尺寸越大越好，因为这样每块晶圆能生产更多的芯片。<ul>\n<li>无法随心所欲地增大晶圆尺寸： 生产过程中，离晶圆中心越远就越容易出现坏点</li>\n<li>晶体管在处理器上集成，晶体管与晶体管之间用金属线路连接（金属线路的容量直接影响信息传送的速度）</li>\n</ul>\n</li>\n<li>了解cpu的制作流程 ：<ol>\n<li>切割晶圆 ： 用机器从单晶硅棒上切割下一片事先确定规格的硅晶片，并将其划分成多个细小的区域，每个区域都将成为一个CPU的内核（Die）</li>\n<li>紫外线通过<code>印制着CPU复杂电路结构图样</code>的模板照射硅基片，被紫外线照射的地方光阻物质溶解</li>\n<li>下一步就是蚀刻（etching）：结合上面制造的基片，CPU的门电路就完成了</li>\n<li>重复；分层：3d结构，7–9层，层数决定于设计时CPU的布局，以及通过的电流大小</li>\n<li>封装：封入一个陶瓷的或塑料的封壳中，这样它就可以很容易地装在一块电路板上</li>\n</ol>\n</li>\n<li>芯片是半导体元件产品的统称，是集成电路的载体，由晶圆分割而成。<ul>\n<li>集成电路包括半导体芯片及外围相关电路（电阻电容二极管）</li>\n<li>芯片是“集成电路”的俗称。集成电路有模拟集成电路和数字集成电路，如果一片集成电路（芯片）中既有模拟电路又有数字电路，则称其为数模混合集成电路</li>\n<li>CPU是中央处理器，包含运算器和控制器，是数字电路。如果将运算器和控制器集成在一片集成电路上，就称之为微处理器。目前人们将中央处理器与微处理器已经混为一谈了</li>\n<li>so，CPU是一种数字芯片，只是众多芯片中的一类</li>\n<li>一块晶圆上可以切割出数百个处理器(晶体管：50-200nm尺寸)</li>\n</ul>\n</li>\n<li>晶体管相当于开关，控制着电流的方向（一个针头上就能放下大约3000万个晶体管）。</li>\n</ol>\n</li>\n<li><p>线程进程程序：</p>\n<ol>\n<li>一个程序包含着若干个进程，一个进程包含着若干个线程。</li>\n</ol>\n</li>\n<li><p>SRAM DRAM 一个静态一个动态</p>\n<ul>\n<li>所谓的“静态”，是指这种存储器只要保持通电，里面储存的数据就可以恒常保持。相对之下，动态随机存取存储器（DRAM）里面所储存的数据就需要周期性地更新。然而，当电力供应停止时，SRAM储存的数据还是会消失（被称为volatile memory），这与在断电后还能储存资料的ROM或闪存是不同的。</li>\n</ul>\n</li>\n<li><p>some原理：</p>\n<ol>\n<li>DMA（Direct Memory Access直接存储器访问）： 在DMA控制器的管理下，外设和存储器直接进行数据交换，而不需CPU干预</li>\n</ol>\n</li>\n<li><p>一些简写概念的总结</p>\n<ul>\n<li>JTAG： <a href=\"https://www.cnblogs.com/TaigaCon/archive/2012/12/20/2826941.html\">joint test action group</a></li>\n<li>LQFP： Low-profile Quad Flat Package 薄 方 扁平封装 （BGA封装： Ball Grid Array Package）</li>\n<li>PCB ： printed circuit board 印刷电路板</li>\n<li>SPI： serial peripheral interface 串行外设接口</li>\n</ul>\n</li>\n<li><p><kbd>这是什么</kbd></p>\n<table>\n<tr>\n    <th rowspan=\"2\">真实情况</th>\n    <th colspan=\"2\">预测结果</th>\n</tr>\n<tr>\n    <td>正例</td>\n    <td>反例</td>\n</tr>\n<tr>\n    <td>正例</td>\n    <td>TP(真正例)</td>\n    <td>FN(假反例)</td>\n</tr>\n<tr>\n    <td>反例</td>\n    <td>FP(假正例)</td>\n    <td>TN(真反例)</td>\n</tr>\n</table></li>\n</ol>\n<h2 id=\"疑问疑难\"><a href=\"#疑问疑难\" class=\"headerlink\" title=\"疑问疑难\"></a>疑问疑难</h2><ol>\n<li>Mem[]和Regs[]的理解：Mem的方括号里是表示地址的一串数字，Mem[]表达的是内容       —-所以表示地址的和表示内容的其实是长度相同的一串二进制数字吗？？？       Regs[]表示的是数值</li>\n<li> (7.1早上，周四) 数据级并行，指令集并行，任务级并行，线程级并行；SIMD，MIMD等。深入梳理</li>\n<li> 核 整理 core multi-core</li>\n<li>各种频率的理解<ol>\n<li>手机 cpu频率2.xGHz（两千多MHz）</li>\n<li>内存条的频率 最大到三千兆赫兹（3000MHz）</li>\n</ol>\n</li>\n<li>PCI SATA这些是什么</li>\n</ol>\n","site":{"data":{"styles":"body {\n  position: relative;\n  font-family: 'Lato', \"PingFang SC\", \"Microsoft YaHei\", sans-serif;\n  font-size: 14px;\n  line-height: 2;\n  color: #555;\n  background: #a5b8cc;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n/*更好的侧边滚动条*/\n::-webkit-scrollbar {\n  width: 10px;\n  height: 10px;\n}\n::-webkit-scrollbar-button {\n  width: 0;\n  height: 0;\n}\n::-webkit-scrollbar-button:start:increment,\n::-webkit-scrollbar-button:end:decrement {\n  display: none;\n}\n::-webkit-scrollbar-corner {\n  display: block;\n}\n::-webkit-scrollbar-thumb {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.2);\n}\n::-webkit-scrollbar-thumb:hover {\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.5);\n}\n::-webkit-scrollbar-track,\n::-webkit-scrollbar-thumb {\n  border-right: 1px solid transparent;\n  border-left: 1px solid transparent;\n}\n::-webkit-scrollbar-track:hover {\n  background-color: rgba(0,0,0,0.15);\n}\n::-webkit-scrollbar-button:start {\n  width: 10px;\n  height: 10px;\n/*background: url(../images/scrollbar_arrow.png) no-repeat 0 0;*/\n/*可以添加滚动条样式*/\n}\n.post-sticky-flag {\n  font-size: inherit;\n  float: left;\n  color: #000;\n  cursor: help;\n  transition-duration: 0.2s;\n  transition-timing-function: ease-in-out;\n  transition-delay: 0s;\n}\n.post-sticky-flag:hover {\n  color: #07b39b;\n}\n.brand {\n  color: #ff6a6a;\n}\n.site-subtitle {\n  margin-top: 10px;\n  font-size: 13px;\n  color: #fff;\n}\n.busuanzi-value {\n  color: #1890ff;\n}\n* {\n  color: #35405b;\n}\n.site-meta {\n  margin: 0;\n  text-align: $site-meta-text-align;\nmobile()\n}\n.brand {\n  position: relative;\n  display: inline-block;\n  padding: 0 40px;\n  color: #ff6a6a;\n  background: $brand-bg;\n  border-bottom: none;\n}\n.brand:hover {\n  color: $brand-hover-color;\n}\n"}},"excerpt":"<h1 id=\"Summer-Intern-21年6-8月\"><a href=\"#Summer-Intern-21年6-8月\" class=\"headerlink\" title=\"Summer Intern 21年6-8月\"></a>Summer Intern 21年6-8月</h1><h1 id=\"计算机体系结构\"><a href=\"#计算机体系结构\" class=\"headerlink\" title=\"计算机体系结构\"></a>计算机体系结构</h1><h2 id=\"国防科大公开课\"><a href=\"#国防科大公开课\" class=\"headerlink\" title=\"国防科大公开课\"></a>国防科大公开课</h2><p><a href=\"https://www.bilibili.com/video/BV1aJ411g7LM?p=2\">计算机体系结构国防科大35讲</a></p>","more":"<ol>\n<li><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><ol>\n<li><p>冯诺依曼结构</p>\n</li>\n<li><p>20世纪80年代以来：RISC（精简指令集计算机）–指令集并行（流水线；多指令发射）；缓存</p>\n<ul>\n<li>20世纪80年代出现了个人计算机和工作站，因为有微处理器可供使用</li>\n<li>80年代初RISC出现 –简化了指令系统，把更多的芯片硅面积用于实现<code>流水</code>和<code>cache</code></li>\n<li>20世纪80年代，单片芯片上集成到25000-50000个晶体管</li>\n</ul>\n</li>\n<li><p>ISA（Instruction Set Architecture指令集体系结构）：区分软硬件的界限</p>\n<ul>\n<li>80x86<ol>\n<li>16个通用寄存器，16个存入浮点数据的寄存器</li>\n<li><code>寄存器-存储器</code>ISA：在许多指令中，访问存储器</li>\n<li>编码为可变长度，变化长度为1–18个<code>字节</code> – 可变长度的指令可以占用较少的空间</li>\n</ol>\n</li>\n<li>ARM<ol>\n<li><code>载入-存储</code>ISA（只能用load/store来访问存储器，所有最新的ISA都采用载入-存储ISA）</li>\n<li>所有ARM和MIPS指令都是的长度都是32位</li>\n</ol>\n</li>\n<li>MIPS<ol>\n<li>32个通用寄存器，32个浮点寄存器</li>\n<li><code>载入-存储</code>ISA（只能用load/store来访问存储器）</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>intel和ARM（都是ISA）  （CISC和RISC）</p>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/21266987\">知乎一篇文章</a></li>\n<li>ARM和Intel 两种架构，X86无法做到ARM的功耗，而ARM也无法做到X86的性能</li>\n<li>ARM从来只是设计<code>低功耗处理器</code>，Intel的强项是设计<code>超高性能</code>的台式机和服务器处理器。</li>\n<li>Intel i7处理器平均发热功率为45w，ARM是1/15</li>\n<li>制造工艺的纳米数越小，能量的使用效率越高</li>\n<li>ARM的big.LITTLE架构是一项Intel一时无法复制的创新 –处理器中的核可以有不同的性能和功耗</li>\n<li>前端设计体现了处理器的构架，精简指令集和复杂指令集的区别是通过前端设计体现的</li>\n<li>后端设计处理电压，时钟等问题，是耗电的直接因素。</li>\n<li>移动处理器都是片上系统(SoC)架构，也就是说，处理器之外，图形，视频，音频，网络等功能都在一个芯片里。这些模块的打开与关闭就容易预测的多，并且可以通过软件来控制。这样，整体功耗就更加取决于软件和制造工艺而不是处理机架构。在这点上，X86的处理器占优势，因为Intel的工艺有很大优势</li>\n<li><code>疑惑</code>：<ol>\n<li>ARM处理器的乱序执行能力不如intel–intel加入乱序逻辑结构，因为ARM是异构，就没有这方面的问题（一个核顺序执行，一个核乱序执行）</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>存储器寻址与寻址模式</p>\n<ol>\n<li>字节寻址 ： 对齐</li>\n<li><code>寻址模式</code>：<ol>\n<li>MIPS寻址模式：<ul>\n<li>寄存器寻址</li>\n<li>立即数寻址</li>\n<li>位移量寻址 ：讲固定偏移量加到寄存器得出存储器地址</li>\n</ul>\n</li>\n<li>80x86 ：<ul>\n<li>寄存器</li>\n<li>立即数</li>\n<li>位移量 ： 分三种。。。</li>\n</ul>\n</li>\n<li>ARM ：<ul>\n<li>寄存器</li>\n<li>立即数</li>\n<li>位移量</li>\n<li>PC（程序计数器）的寻址方式</li>\n<li>两个寄存器之和</li>\n<li>自动递增寻址/自动递减寻址</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>宽带和吞吐量：在给定时间内完成的总工作量</p>\n</li>\n<li><p>集成电路中的功率和能耗：</p>\n<ol>\n<li>功率：单位时间的能耗</li>\n<li>能耗 与 该晶体管驱动的容性负载与电压平方的乘积成正比</li>\n<li>缩减元件之间的间距之后，晶体管之间的电容也会降低，晶体管的开关频率也得以提升，从而整个芯片的工作频率就上去了。</li>\n<li>晶体管的尺寸缩小会减低它们的内阻，所需导通电压会降低，这代表着CPU的工作电压会降低</li>\n<li>动态随机存取存储器（Dynamic Random Access Memory，DRAM）是一种半导体存储器，主要的作用原理是利用电容内存储电荷的多寡来代表一个二进制比特（bit）是1还是0。由于在现实中晶体管会有漏电电流的现象，导致电容上所存储的电荷数量并不足以正确的判别数据，而导致数据毁损。因此对于DRAM来说，周期性地充电是一个无可避免的要件。由于这种需要定时刷新的特性，因此被称为“动态”存储器。相对来说，静态存储器（SRAM）只要存入数据后，纵使不刷新也不会丢失记忆。</li>\n</ol>\n</li>\n<li><p>可信任度：</p>\n<ol>\n<li>模块可靠性：对发生故障之前的时间度量 MTTF MTTR</li>\n</ol>\n</li>\n<li><p><code>时钟周期</code>是计算机中最基本的、最小的时间单位。 在一个时钟周期内，CPU仅完成一个最基本的动作。 时钟周期是一个时间的量。</p>\n<ul>\n<li>1993年的奔腾支持超流水线，一个时钟周期可以执行两条整数运算命令</li>\n<li>现在的时钟周期有的是<code>0.几ns</code>；</li>\n</ul>\n</li>\n<li><p>CPU到内存时间还是不够快，有时候要几百个时钟周期。所以内存和cpu之间还有2–3级<code>缓存</code></p>\n</li>\n</ol>\n</li>\n</ol>\n<div  align=\"center\">\n    <img src=\"../图片/计算机体系结构/程序执行和指令的操作.png\" width = \"300\" height = \"200\" alt=\"bpp\" align=center />\n    </div>\n    程序执行的过程 --控制流 数据流\n    <div  align=\"center\">\n    <img src=\"../图片/计算机体系结构/计算机的属性.png\" width = \"300\" height = \"200\" alt=\"bpp\" align=center />\n    </div>\n    程序员能看到的计算机的属性\n    <div  align=\"center\">\n    <img src=\"../图片/计算机体系结构/指令集结构的逻辑实现.png\" width = \"300\" height = \"200\" alt=\"bpp\" align=center />\n    </div>\n    指令集结构的逻辑实现\n\n\n<pre><code>20. 系列机和兼容\n    1. family machine：具有相同体系机构，但组成和实现不同\n    2. 软件兼容software compatibility ： 同一个软件-不加修改-获得相同结果（兼容种类也可以细分为二进制级兼容，汇编级兼容等）\n    3. 兼容机：支持软件兼容的硬件基础\n    4. 兼容性（向下向上：高低档机器先前向后：不同时期投入市场）   --兼容性up 寿命up\n        向后兼容：软件兼容的根本特征\n</code></pre>\n<ol start=\"2\">\n<li><h3 id=\"发展\"><a href=\"#发展\" class=\"headerlink\" title=\"发展\"></a>发展</h3><ol>\n<li>计算机的分代（从91年以后是第五代：高性能微处理器+大规模高密度电路）</li>\n<li>软件的发展：</li>\n<li>处理器性能的提高，从单纯依赖指令集并行（ILP）转向数据级并行（DLP）和线程级并行（TLP）<ul>\n<li>指令 和 线程</li>\n<li>数据级并行DLP：同时操作许多数据项</li>\n<li>任务/线程级并行：？？？</li>\n<li>戴老师讲：数据级并行其实就是许多人用用一个指令处理一堆不同的数据</li>\n</ul>\n</li>\n<li>计算机的分类：<ol>\n<li>个人移动设备PMD（手机平板）</li>\n<li>台式机</li>\n<li>服务器：<pre><code> - 可用性 ： 要不间断的能使用，安全\n - 可拓展性 ： 满足对功能的增长需求 ， 拓展计算容量，内存，I/O带宽\n</code></pre>\n</li>\n<li>仓库级计算机（WSC）</li>\n<li>嵌入式：能否运行第三方软件<br>根据并行分：<ol>\n<li>SISD</li>\n<li>SIMD：数据级并行，同一指令由多个使用不同数据流的处理器执行</li>\n<li>MISD</li>\n<li>MIMD：多指令 多数据  –针对的是任务级并行</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>应用的发展：<ul>\n<li>桌面计算：笔记本，工作站…（竞争激烈的市场）</li>\n<li>服务器计算：可靠性做为追求目标</li>\n<li>嵌入式计算：打印机，物联网…</li>\n</ul>\n</li>\n<li>体系结构的发展：对结构的不断改良<ul>\n<li>分布的IO处理能力：IO装置具有独立的处理能力：打印机，把游戏指令发给显卡后显卡会主动生成怪物      —-有效减轻cpu处理负荷</li>\n<li>保护的存储器空间：数据和程序严格割裂开，有利于程序的保护和发展</li>\n<li>存储器组织结构的发展</li>\n<li><code>并行处理技术</code></li>\n<li>指令集发展：用户可以定义自己的指令系统 效率up</li>\n</ul>\n</li>\n<li>并行处理技术的发展<ol>\n<li>并行性概念：<ol>\n<li><strong><code>指令级并行</code></strong><ol>\n<li>2002年以来，性能增长下降约20% —&gt; 可以进一步有效开发的指令级并行已经很少  —&gt;04年，从单纯依靠指令级并行转向线程级并行和数据级并行</li>\n</ol>\n</li>\n<li><code>线程级并行</code></li>\n</ol>\n</li>\n<li>提高并行性的技术途径 ：时间重叠（用流水线，同时处理多个指令，每个指令都可以处于不同的阶段），资源重复（一个cpu不够用多个，数量取胜原则），资源共享（提高资源的利用效率，多个人使用一个打印机）</li>\n<li>并行计算的应用需求：对计算机的长远需求：工业设计 大气污染 天气预报等等</li>\n</ol>\n</li>\n<li>计算机系统的成本和价格</li>\n<li>思考一些问题： 软件兼容的例子；列举操作系统为上层应用提供的典型API有哪些，功能是什么</li>\n<li>集成电路的发展和<code>摩尔定律</code>：“集成电路密度大概每两年翻一番—摩尔定律”  摩尔定律，也就是说，当价格保持不变时，集成电路上可容纳的晶体管数量每18个月增加一倍，性能提高一倍<table>\n<thead>\n<tr>\n<th>时间</th>\n<th>生产工艺</th>\n<th>cpu晶体管数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2000 奔腾4威拉米特</td>\n<td>180nm</td>\n<td>4200万</td>\n</tr>\n<tr>\n<td>2010  Corei7≤980X</td>\n<td>32nm</td>\n<td>11亿6999万9999个</td>\n</tr>\n<tr>\n<td>2013核心i7 4960X</td>\n<td>22nm</td>\n<td>18.6亿</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n</li>\n<li><h3 id=\"计算机系统设计和分析\"><a href=\"#计算机系统设计和分析\" class=\"headerlink\" title=\"计算机系统设计和分析\"></a>计算机系统设计和分析</h3><ol>\n<li><p>成本与价格 ：晶圆晶片制造，测试成本，封装。。。</p>\n</li>\n<li><p>基准测试程序： <a href=\"www.SPEC.org\">测试程序包</a></p>\n</li>\n<li><p>量化设计的基本原则</p>\n<ol>\n<li><p>大概率事件优先原则：追求全局的最优结果</p>\n<ul>\n<li>赋予优先处理权和资源使用权</li>\n</ul>\n</li>\n<li><p>Amdahl定律：通过对系统加速比的研究，来找到系统中占有最重要的部件（可以定量计算）</p>\n<ul>\n<li>假设对机器部件的改进，来计算加速比</li>\n<li>如下：  <div  align=\"center\">\n  <img src=\"../图片/计算机体系结构/amdahl定律1.png\" width = \"400\" height = \"200\" alt=\"bpp\" align=center />\n  </div>\n  系统加速比的公式\n  系统加速比依赖于两个因素：可改进比例，部件加速比</li>\n<li>性能增加的递减规则：针对改进的某一部分，改进越多，效果越小</li>\n<li>公式的引申和推论：<ul>\n<li>对于整个任务的一部分进行优化，则<code>最大加速比</code>不大于1/(1-可改进比例)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Amdahl定律的计算练习</p>\n</li>\n<li><p>程序的<code>局部性</code>原理：程序执行时所访问的存储器在<code>时空</code>上是相对的簇聚（这种簇聚包括指令和数据两部分）: 时间局部性 空间局部性 生产-消费局部性</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><h3 id=\"指令系统\"><a href=\"#指令系统\" class=\"headerlink\" title=\"指令系统\"></a>指令系统</h3><ol>\n<li><p>指令集结构概述</p>\n<ol>\n<li>每条指令都是直接由cpu硬件执行<ul>\n<li>CPU插播：进入工厂的原料(程序指令)，经过物资分配部门(控制单元)的调度分配，被送往生产线(逻辑运算单元)，生产出成品(处理后的数据)后，再存储在仓库(储存单元)中，最后等着拿到市场上去卖(交由应用程序使用)</li>\n<li>cpu是通过引脚与外围交流的，所有的数据都会通过引脚输入或者输出</li>\n</ul>\n</li>\n<li>指令的表示：二进制格式…</li>\n<li>指令的操作非常简单，其操作由操作码编码表示，每个操作需要的操作数个数为0-3个不等   –操作数是一些<code>存储单元</code>的地址(典型的存储单元：主存，寄存器，堆栈和累加器)</li>\n<li><code>指令集与计算机的性能</code> T<ul>\n<li>指令集在程序中：软硬件的接口</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>指令集结构的分类：</p>\n<ul>\n<li>在cpu中<code>操作数</code>的存储方法</li>\n<li><div  align=\"center\">\n  <img src=\"../图片/计算机体系结构/指令集结构的分类.png\" width = \"300\" height = \"200\" alt=\"指令集结构的分类\" align=center />\n  </div>\n  几种分类（堆栈；累加器等）</li>\n<li><div  align=\"center\">\n  <img src=\"../图片/计算机体系结构/通用寄存器型指令集结构的分类.png\" width = \"300\" height = \"200\" alt=\"通用寄存器型指令集结构\" align=center />\n  </div>\n   通用寄存器型指令集结构的分类  -------？</li>\n<li>由此， 三种通用寄存器型指令集结构的优缺点: 寄存器-寄存器（0，3）；寄存器-存储器型（1，2）；存储器-存储器型（3，3）</li>\n<li><div  align=\"center\">\n  <img src=\"../图片/计算机体系结构/指令集结构设计概观.png\" width = \"300\" height = \"200\" alt=\"指令集结构设计概观\" align=center />\n  </div>\n  指令集结构设计概观</li>\n</ul>\n</li>\n<li><p>存储器寻址：几乎所有都使用<code>字节寻址</code>来访问存储器操作数</p>\n<ul>\n<li>ARM+MIPS要求操作对象必须是对齐的</li>\n</ul>\n</li>\n<li><p>存储器寻址与寻址模式</p>\n<ol>\n<li>字节寻址 ： 对齐</li>\n<li><code>寻址模式</code>：<ol>\n<li>MIPS寻址模式：<ul>\n<li>寄存器寻址</li>\n<li>立即数寻址</li>\n<li>位移量寻址 ：讲固定偏移量加到寄存器得出存储器地址</li>\n</ul>\n</li>\n<li>80x86 ：<ul>\n<li>寄存器</li>\n<li>立即数</li>\n<li>位移量 ： 分三种。。。</li>\n</ul>\n</li>\n<li>ARM ：<ul>\n<li>寄存器</li>\n<li>立即数</li>\n<li>位移量</li>\n<li>PC（程序计数器）的寻址方式</li>\n<li>两个寄存器之和</li>\n<li>自动递增寻址/自动递减寻址</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>寻址方式：寄存器寻址；立即值寻址；偏移寻址；寄存器间接寻址（没有偏移量，值得注意的是：<code>(R1)</code>表示的是以R1的<code>地址</code>为内容的）；索引寻址（一般可用于对数组的访问）；直接寻址或绝对寻址；存储器间接寻址；自增/减寻址；缩放寻址</p>\n<ul>\n<li>e.g.<code> Add R1, (1001)</code> —这属于直接寻址，1001是地址， 这条指令的含义就为：<code>Regs[R1]&lt;-Regs[R1]+Mem[1001]</code>，这里的Mem[1001]就是地址为1001的寄存器里的内容。变量Mem用来表示存储器中的一个数组，存储按照字节寻址，它可以传送任何数目的字节。</li>\n<li>e.g. <code>Add R1,@(R3)</code> —存储器间接寻址，含义为：<code>Reg[R1]&lt;-Regs[R1]+Mem[Mem[Regs[R3]]]</code>首先访问寄存器，取出一个存储单元的地址，再访问该存储单元，取出保存操作数的那个存储单元的地址，再通过一次访存，得到操作数。   （只是加深理解，基本不会使用）</li>\n</ul>\n</li>\n<li><p>MIPS的指令格式：</p>\n<div  align=\"center\">\n<img src=\"../图片/计算机体系结构/MIPS指令格式.png\" width = \"450\" height = \"200\" alt=\"MIPS指令格式\" align=center />\n</div></li>\n</ol>\n<p> <a href=\"http://www.yuejianzun.xyz/2018/02/18/MIPS%E6%8C%87%E4%BB%A4%E9%9B%86%E4%B8%8E%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/\">MIPS指令基本格式一篇文章</a></p>\n<ol start=\"4\">\n<li>指令系统的设计和优化<ol>\n<li>引入控制指令概念：Jump（跳转），Branch</li>\n<li>过程调用和返回的状态保存（调用者保存 被调用者保存–一般用它）</li>\n</ol>\n</li>\n<li>指令系统的发展和改进<ul>\n<li>强化指令功能，软件功能向硬件功能转移（CISC）</li>\n<li>RISC：在向着它发展</li>\n</ul>\n</li>\n<li>操作数的类型和大小</li>\n<li>MIPS指令系统结构<ol>\n<li>操作数保存在寄存器里，所以只能通过load/store指令来访问存储器</li>\n<li>MIPS是一种多元指令结构，注重指令流水效率</li>\n<li>有32个32位的通用寄存器，R0的内容恒为0；32个32位浮点寄存器</li>\n<li>支持：寄存器寻址，立即值寻址，偏移寻址，寄存器间接寻址。</li>\n<li>操作类型：&lt;-,##,</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><h3 id=\"流水线技术\"><a href=\"#流水线技术\" class=\"headerlink\" title=\"流水线技术\"></a>流水线技术</h3><ol>\n<li><h4 id=\"流水线基本概念-：硬件资源降到最低程度\"><a href=\"#流水线基本概念-：硬件资源降到最低程度\" class=\"headerlink\" title=\"流水线基本概念  ：硬件资源降到最低程度\"></a>流水线基本概念  ：硬件资源降到最低程度</h4><ol>\n<li>指令流水线</li>\n<li>功能部件流水线</li>\n<li>用时空图来描述：横时间，纵各流水线</li>\n<li>特点：<ol>\n<li>级/段；深度</li>\n</ol>\n</li>\n<li>流水线的分类：<ol>\n<li>（按流水线 完成的 功能 分类）<ol>\n<li>单功能流水线 ： 只能完成一种固定功能的流水线</li>\n<li>多功能流水线 ： 各段进行不同的连接，例如：TI ASC</li>\n</ol>\n</li>\n<li>按连接方式<ol>\n<li>静态流水线 ：TI ASC</li>\n<li>动态流水线 ： 重叠在一起，可能会冲突</li>\n</ol>\n</li>\n<li>按级别<ol>\n<li>部件级进行流水</li>\n<li>指令流水线</li>\n<li>处理机间流水线–宏流水线</li>\n</ol>\n</li>\n<li>按数据表示<ol>\n<li>标量流水处理机 ： 仅对标量进行数据处理</li>\n<li>向量流水处理机 ： 例如TI ASC</li>\n</ol>\n</li>\n<li>是否有反馈回路<ol>\n<li>线性流水线</li>\n<li>非线性 ： 有可能在汇集点冲突 —流水线调度问题</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><h4 id=\"MIPS基本流水线：\"><a href=\"#MIPS基本流水线：\" class=\"headerlink\" title=\"MIPS基本流水线：\"></a>MIPS基本流水线：</h4><ol>\n<li>非流水方式</li>\n<li>划分为5个阶段：<ol>\n<li>取指令（IF）：<ul>\n<li>根据PC值从存储器取出指令，并将指令送入指令寄存器IR；PC++（指向下一条指令）；并将下一条指令的的地址放入临时寄存器NPC中   —ps：指令的地址就是pc的值吗</li>\n</ul>\n</li>\n<li>译码/读寄存器（ID）：<ul>\n<li>进行指令译码，读IR寄存器（指令寄存器），按照相应寄存器号读寄存器文件，…</li>\n</ul>\n</li>\n<li>执行/有效地址计算周期（EX）：<ul>\n<li>，</li>\n</ul>\n</li>\n<li>访存/分支操作完成周期（MEM）</li>\n<li>写回周期（WB）</li>\n<li>性能分析<ol start=\"7\">\n<li>？？？？？</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>流水线中的相关<ol>\n<li>流水线性能分析<br> 三项性能指标：吞吐率；最大吞吐率；实际吞吐率<pre><code> - 吞吐率是指单位时间内流水线所完成的任务数或输出结果的数量\n - 最大吞吐率：流水线达到稳定状态后所得到的吞吐率\n     瓶颈 ---细分瓶颈段，重复设置瓶颈段（并列的）\n     有一个吞吐率的计算 题型\n - 假设流水线各段的时间相等\n</code></pre>\n</li>\n<li>加速比： 流水线速度：等功能非流水线速度</li>\n<li>效率：流水线的设备利用率<ol>\n<li>从时空图上看，时空区面积之比</li>\n<li>效率是：实际加速比与最大加速比之比</li>\n</ol>\n</li>\n<li>锁存器 ： 对时钟扭曲不敏感</li>\n<li>什么是相关？ –相邻/近的两条指令因存在某种关联，后一条指令不能在原先指定的时钟周期开始执行</li>\n<li>消除相关的基本方法：暂停（低效）</li>\n<li>三种不同类型的相关：<ul>\n<li>结构相关：硬件资源满足不了重叠执行的要求<br>  原因：<pre><code>  - 功能部件不是全流水\n  - 重复设置的资源数量不足\n</code></pre>\n  避免：<pre><code>  - 所有功能单元完全流水化\n  - 设置足够多的硬件资源 （硬件代价很大）\n</code></pre>\n</li>\n<li>数据相关：要用到前面指令的结果<ol>\n<li>定向技术forwarding（可以减少数据相关带来的暂停），也称为旁路（bypassing）：</li>\n</ol>\n</li>\n<li>控制相关：遇到分支指令/改变pc值的指令</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>实例分析：MIPS R4000</li>\n<li>向量处理机</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"数据结构与算法\"><a href=\"#数据结构与算法\" class=\"headerlink\" title=\"数据结构与算法\"></a>数据结构与算法</h2><ol>\n<li><h3 id=\"GPU\"><a href=\"#GPU\" class=\"headerlink\" title=\"GPU\"></a>GPU</h3></li>\n</ol>\n<h2 id=\"extra\"><a href=\"#extra\" class=\"headerlink\" title=\"extra\"></a>extra</h2><ol>\n<li>IPv4地址由32位二进制数组成，即地址字节数为4 xxx.xxx.xxx.xxx (xxx是小于255的十进制数，换算成2进制就是小于8位)<ul>\n<li>将地址长度扩大至 IPv4 地址的 4 倍， 即由 32bit 扩展至128bit ，即16个地址字节数</li>\n<li>为互联网上的每一个网络和每一台主机分配一个逻辑地址</li>\n<li>MAC（Media Access Control或者Medium Access Control）地址，意译为媒体访问控制，或称为物理地址、硬件地址，用来定义网络设备的位置</li>\n<li>存储器地址（Memory address）是存储器中存储单元的编号。 –32位操作系统存储器地址字节为4个字节，64位操作系统存储器地址字节为8个字节<ul>\n<li>一个字节（byte）就是8bit</li>\n<li><strong>1kb是1024byte</strong>，1024*8位数字</li>\n<li>一个字（word）是32位，32bits，也就是4个字节（byte）</li>\n<li>1 kb == 1024 byte == 1024*8 bit</li>\n<li>1024b(字节)=1kb=512个汉字</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>半导体：关系到CPU内能塞进多少个晶体管，CPU所能达到的频率还有它的功耗<ol>\n<li>ss</li>\n</ol>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>1978年</th>\n<th>3000nm生产工艺</th>\n<th>29000个晶体</th>\n<th>工作频率5MHz</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>28核Skylake-SP Xeon</td>\n<td>14nm生产工艺</td>\n<td>超过80亿个晶体管</td>\n<td>5GHz（Core i9-9900K）｜</td>\n</tr>\n</tbody></table>\n<pre><code>我们所说的生产工艺是指\n线宽，也就是芯片上的最基本功能单位门电路的宽度，因为实际上门电路之间连线的宽度同门电路的宽度相同，所以线宽可以描述制造工艺\n制造工艺用特征尺寸来衡量，即一个晶体管或一条连线在x/y的最小尺寸\n</code></pre>\n<ol start=\"3\">\n<li><p>晶圆 晶片 集成电路 芯片 核 cpu 主板 内存 等等的关系：</p>\n<ol>\n<li>硅晶圆尺寸越大越好，因为这样每块晶圆能生产更多的芯片。<ul>\n<li>无法随心所欲地增大晶圆尺寸： 生产过程中，离晶圆中心越远就越容易出现坏点</li>\n<li>晶体管在处理器上集成，晶体管与晶体管之间用金属线路连接（金属线路的容量直接影响信息传送的速度）</li>\n</ul>\n</li>\n<li>了解cpu的制作流程 ：<ol>\n<li>切割晶圆 ： 用机器从单晶硅棒上切割下一片事先确定规格的硅晶片，并将其划分成多个细小的区域，每个区域都将成为一个CPU的内核（Die）</li>\n<li>紫外线通过<code>印制着CPU复杂电路结构图样</code>的模板照射硅基片，被紫外线照射的地方光阻物质溶解</li>\n<li>下一步就是蚀刻（etching）：结合上面制造的基片，CPU的门电路就完成了</li>\n<li>重复；分层：3d结构，7–9层，层数决定于设计时CPU的布局，以及通过的电流大小</li>\n<li>封装：封入一个陶瓷的或塑料的封壳中，这样它就可以很容易地装在一块电路板上</li>\n</ol>\n</li>\n<li>芯片是半导体元件产品的统称，是集成电路的载体，由晶圆分割而成。<ul>\n<li>集成电路包括半导体芯片及外围相关电路（电阻电容二极管）</li>\n<li>芯片是“集成电路”的俗称。集成电路有模拟集成电路和数字集成电路，如果一片集成电路（芯片）中既有模拟电路又有数字电路，则称其为数模混合集成电路</li>\n<li>CPU是中央处理器，包含运算器和控制器，是数字电路。如果将运算器和控制器集成在一片集成电路上，就称之为微处理器。目前人们将中央处理器与微处理器已经混为一谈了</li>\n<li>so，CPU是一种数字芯片，只是众多芯片中的一类</li>\n<li>一块晶圆上可以切割出数百个处理器(晶体管：50-200nm尺寸)</li>\n</ul>\n</li>\n<li>晶体管相当于开关，控制着电流的方向（一个针头上就能放下大约3000万个晶体管）。</li>\n</ol>\n</li>\n<li><p>线程进程程序：</p>\n<ol>\n<li>一个程序包含着若干个进程，一个进程包含着若干个线程。</li>\n</ol>\n</li>\n<li><p>SRAM DRAM 一个静态一个动态</p>\n<ul>\n<li>所谓的“静态”，是指这种存储器只要保持通电，里面储存的数据就可以恒常保持。相对之下，动态随机存取存储器（DRAM）里面所储存的数据就需要周期性地更新。然而，当电力供应停止时，SRAM储存的数据还是会消失（被称为volatile memory），这与在断电后还能储存资料的ROM或闪存是不同的。</li>\n</ul>\n</li>\n<li><p>some原理：</p>\n<ol>\n<li>DMA（Direct Memory Access直接存储器访问）： 在DMA控制器的管理下，外设和存储器直接进行数据交换，而不需CPU干预</li>\n</ol>\n</li>\n<li><p>一些简写概念的总结</p>\n<ul>\n<li>JTAG： <a href=\"https://www.cnblogs.com/TaigaCon/archive/2012/12/20/2826941.html\">joint test action group</a></li>\n<li>LQFP： Low-profile Quad Flat Package 薄 方 扁平封装 （BGA封装： Ball Grid Array Package）</li>\n<li>PCB ： printed circuit board 印刷电路板</li>\n<li>SPI： serial peripheral interface 串行外设接口</li>\n</ul>\n</li>\n<li><p><kbd>这是什么</kbd></p>\n<table>\n<tr>\n    <th rowspan=\"2\">真实情况</th>\n    <th colspan=\"2\">预测结果</th>\n</tr>\n<tr>\n    <td>正例</td>\n    <td>反例</td>\n</tr>\n<tr>\n    <td>正例</td>\n    <td>TP(真正例)</td>\n    <td>FN(假反例)</td>\n</tr>\n<tr>\n    <td>反例</td>\n    <td>FP(假正例)</td>\n    <td>TN(真反例)</td>\n</tr>\n</table></li>\n</ol>\n<h2 id=\"疑问疑难\"><a href=\"#疑问疑难\" class=\"headerlink\" title=\"疑问疑难\"></a>疑问疑难</h2><ol>\n<li>Mem[]和Regs[]的理解：Mem的方括号里是表示地址的一串数字，Mem[]表达的是内容       —-所以表示地址的和表示内容的其实是长度相同的一串二进制数字吗？？？       Regs[]表示的是数值</li>\n<li> (7.1早上，周四) 数据级并行，指令集并行，任务级并行，线程级并行；SIMD，MIMD等。深入梳理</li>\n<li> 核 整理 core multi-core</li>\n<li>各种频率的理解<ol>\n<li>手机 cpu频率2.xGHz（两千多MHz）</li>\n<li>内存条的频率 最大到三千兆赫兹（3000MHz）</li>\n</ol>\n</li>\n<li>PCI SATA这些是什么</li>\n</ol>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckqs0rf7p000j0mwl3qj100w7","category_id":"ckqs0rf7w00120mwl02orbwto","_id":"ckqs0rf7x00140mwl1ett1hpj"},{"post_id":"ckqs0rf7h00080mwlax4m9ptj","category_id":"ckqs0rf7d00040mwlfpyl7m3j","_id":"ckqs0rf7y00170mwl6cpug11w"},{"post_id":"ckqs0rf7h00080mwlax4m9ptj","category_id":"ckqs0rf7q000k0mwlg83s4ebh","_id":"ckqs0rf8000190mwl8jysc2h6"},{"post_id":"ckqs0rf7h00080mwlax4m9ptj","category_id":"ckqs0rf7x00150mwl1w8w7gad","_id":"ckqs0rf80001a0mwlf8t57v7j"},{"post_id":"ckqs0rf7800010mwl9lxihhbd","category_id":"ckqs0rf7d00040mwlfpyl7m3j","_id":"ckqs0rf80001c0mwl7xhu4yed"},{"post_id":"ckqs0rf7800010mwl9lxihhbd","category_id":"ckqs0rf7q000k0mwlg83s4ebh","_id":"ckqs0rf80001d0mwl01604xp0"},{"post_id":"ckqs0rf7800010mwl9lxihhbd","category_id":"ckqs0rf7x00160mwl2ba54jjo","_id":"ckqs0rf81001f0mwlazka2ac7"},{"post_id":"ckqs0rf7i00090mwl1z2hdng6","category_id":"ckqs0rf7d00040mwlfpyl7m3j","_id":"ckqs0rf81001g0mwlgh8n4tv7"},{"post_id":"ckqs0rf7i00090mwl1z2hdng6","category_id":"ckqs0rf7q000k0mwlg83s4ebh","_id":"ckqs0rf81001i0mwlfqrva41f"},{"post_id":"ckqs0rf7i00090mwl1z2hdng6","category_id":"ckqs0rf7y00180mwlc3ja5ik8","_id":"ckqs0rf81001j0mwl7pdt18ri"},{"post_id":"ckqs0rf7m000d0mwlbt8vgd0o","category_id":"ckqs0rf7d00040mwlfpyl7m3j","_id":"ckqs0rf82001k0mwlef94fw3n"},{"post_id":"ckqs0rf7m000d0mwlbt8vgd0o","category_id":"ckqs0rf7q000k0mwlg83s4ebh","_id":"ckqs0rf82001m0mwl35s063c2"},{"post_id":"ckqs0rf7m000d0mwlbt8vgd0o","category_id":"ckqs0rf80001b0mwl8ls0496t","_id":"ckqs0rf82001n0mwlbypxbqqs"},{"post_id":"ckqs0rf7b00030mwlcq4y635o","category_id":"ckqs0rf7d00040mwlfpyl7m3j","_id":"ckqs0rf82001p0mwl8m770b4a"},{"post_id":"ckqs0rf7b00030mwlcq4y635o","category_id":"ckqs0rf7q000k0mwlg83s4ebh","_id":"ckqs0rf83001q0mwlhywdbb7i"},{"post_id":"ckqs0rf7b00030mwlcq4y635o","category_id":"ckqs0rf80001e0mwlexhwfzox","_id":"ckqs0rf83001s0mwl90a8d3za"},{"post_id":"ckqs0rf7o000h0mwl9xjk1f9i","category_id":"ckqs0rf7d00040mwlfpyl7m3j","_id":"ckqs0rf83001t0mwl2a39expf"},{"post_id":"ckqs0rf7o000h0mwl9xjk1f9i","category_id":"ckqs0rf7q000k0mwlg83s4ebh","_id":"ckqs0rf84001v0mwl6x5g5je2"},{"post_id":"ckqs0rf7o000h0mwl9xjk1f9i","category_id":"ckqs0rf82001l0mwlevndfw4k","_id":"ckqs0rf84001w0mwl90kd4adn"},{"post_id":"ckqs0rf7g00070mwl7g6o302f","category_id":"ckqs0rf7d00040mwlfpyl7m3j","_id":"ckqs0rf84001x0mwl8tgs4vtw"},{"post_id":"ckqs0rf7g00070mwl7g6o302f","category_id":"ckqs0rf7q000k0mwlg83s4ebh","_id":"ckqs0rf84001y0mwldogeab1t"},{"post_id":"ckqs0rf7g00070mwl7g6o302f","category_id":"ckqs0rf7x00150mwl1w8w7gad","_id":"ckqs0rf84001z0mwl4h531o4a"},{"post_id":"ckqs0rf7r000m0mwlh4dg7l05","category_id":"ckqs0rf7d00040mwlfpyl7m3j","_id":"ckqs0rf8400200mwlezij1jv2"},{"post_id":"ckqs0rf7r000m0mwlh4dg7l05","category_id":"ckqs0rf7w00130mwlazvu3onk","_id":"ckqs0rf8400210mwlcwpubph4"},{"post_id":"ckqs0rf7r000m0mwlh4dg7l05","category_id":"ckqs0rf83001r0mwl1dqgh8ab","_id":"ckqs0rf8400220mwl36jkhm6i"},{"post_id":"ckqs0rf7n000e0mwleypsb8is","category_id":"ckqs0rf7v000z0mwle5r38f07","_id":"ckqs0rf8400230mwl9u4zdtqw"},{"post_id":"ckqs0rf7n000e0mwleypsb8is","category_id":"ckqs0rf81001h0mwl136x8vik","_id":"ckqs0rf8400240mwlh0kbbx37"},{"post_id":"ckqs0rf7n000e0mwleypsb8is","category_id":"ckqs0rf83001u0mwl6bnibqy7","_id":"ckqs0rf8500250mwlf0xu539b"},{"post_id":"ckqs0rf8600260mwlh0pxbeqd","category_id":"ckqs0rf7v000z0mwle5r38f07","_id":"ckqs0rf88002a0mwl2mst4fn4"},{"post_id":"ckqs0rf8600260mwlh0pxbeqd","category_id":"ckqs0rf81001h0mwl136x8vik","_id":"ckqs0rf88002b0mwlbh322hxk"},{"post_id":"ckqs0rf8600260mwlh0pxbeqd","category_id":"ckqs0rf8800280mwl4zc94ir8","_id":"ckqs0rf88002c0mwl42dt9978"}],"PostTag":[{"post_id":"ckqs0rf7800010mwl9lxihhbd","tag_id":"ckqs0rf7f00050mwlbsj7bqwn","_id":"ckqs0rf7m000c0mwl7zow9ipl"},{"post_id":"ckqs0rf7b00030mwlcq4y635o","tag_id":"ckqs0rf7k000b0mwlgb4r8n0t","_id":"ckqs0rf7p000i0mwlcvi38iu0"},{"post_id":"ckqs0rf7g00070mwl7g6o302f","tag_id":"ckqs0rf7o000g0mwl20u9gb66","_id":"ckqs0rf7s000n0mwl32mrbbbm"},{"post_id":"ckqs0rf7h00080mwlax4m9ptj","tag_id":"ckqs0rf7o000g0mwl20u9gb66","_id":"ckqs0rf7t000q0mwlbyu49v4n"},{"post_id":"ckqs0rf7i00090mwl1z2hdng6","tag_id":"ckqs0rf7s000p0mwl86nehk8k","_id":"ckqs0rf7u000t0mwl1vtu8lpi"},{"post_id":"ckqs0rf7n000e0mwleypsb8is","tag_id":"ckqs0rf7t000s0mwlf8o0ccvf","_id":"ckqs0rf7v000w0mwl7ja9a4hx"},{"post_id":"ckqs0rf7p000j0mwl3qj100w7","tag_id":"ckqs0rf7u000v0mwl9hvg6mdk","_id":"ckqs0rf7v000y0mwl3foxdtd0"},{"post_id":"ckqs0rf8600260mwlh0pxbeqd","tag_id":"ckqs0rf8700270mwl68ob6r3f","_id":"ckqs0rf8800290mwlguin92h7"}],"Tag":[{"name":"单片机","_id":"ckqs0rf7f00050mwlbsj7bqwn"},{"name":"空间向量","_id":"ckqs0rf7k000b0mwlgb4r8n0t"},{"name":"CS","_id":"ckqs0rf7o000g0mwl20u9gb66"},{"name":"MatLab","_id":"ckqs0rf7s000p0mwl86nehk8k"},{"name":"语音识别","_id":"ckqs0rf7t000s0mwlf8o0ccvf"},{"name":"ubuntu系统问题","_id":"ckqs0rf7u000v0mwl9hvg6mdk"},{"name":"计算机体系结构","_id":"ckqs0rf8700270mwl68ob6r3f"}]}}